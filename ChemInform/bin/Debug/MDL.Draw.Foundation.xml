<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MDL.Draw.Foundation</name>
    </assembly>
    <members>
        <member name="T:MDL.Draw.ChemGraphicsObject">
            <summary>
            Summary description for ChemGraphicsObject.
            </summary>
        </member>
        <member name="T:MDL.Draw.Nodes.Node">
            <summary> Node
            Node is a class for representing objects with a variety of Properties.
            The Node object is essentially an object which has NO 'type' or Properties 
            at compile time, and these are defined at run time by the users of 
            objects of this class.  
            The class maintains connections between a variety of objects of
            this type.
            </summary>
            <author> Francois Nguyen </author>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.NUMBER_DEFAULT_PARENT_TYPES">
            <summary>This number is used as default size of the 'Parents' hashtable
            - it should be around the average number of different TYPES of Parents
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.NUMBER_DEFAULT_CHILDREN_TYPES">
            <summary>This number is used as default size of the 'Children' hashtable
            - it should be around the average number of different TYPES of Children
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.NUMBER_DEFAULT_PROPERTIES">
            <summary>This number is used as default size of the 'Properties' hashtable
            - it should be around the average number of different Properties
            a typical object would have
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.OTYPE">
            <summary>Default type if none specified during Node creation </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.ISIS_OBJTYPE">
            <summary>Object type property for an 'generic' Node's who are NOT given a specific type  </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.PROP_OBJECTTYPE">
            <summary>Object type property for an 'generic' Node's who are NOT given a specific type </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.PROP_PROPERTIES_CHANGED">
            <summary>Object property for Node's special Observer property which watches ALL Properties change state </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.PROP_VALUE_ANY">
            <summary>Object property for 'template' object's where the VALUE of a property or object type need to be specified as ANY </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.id">
            <summary> A unique integer Id for this object.
            *
            The principle use for these is for comparing the
            order of two objects.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.GlobalUniqueId">
            <summary>'Global' Node id which is constantly incremented to make sure
            that objects have unique ids
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetEnumerator">
            <summary>
            returns an iterator of all the children. 
            usage example:
              foreach(Node n in some_node.GetEnumerator()){
                   System.Console.WriteLine("Object:"+n);
               }
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.getChildIterator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.getChildIterator(MDL.Draw.Nodes.NodeProperty[],System.Boolean)">
            <summary>
            returns an enumerator on the children of this node of certain types.
            </summary>
            <param name="types">object types</param>
            <param name="incl"> if true -- enumerate only 'types' objects, else -- enumerate all except 'types'</param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.UNDOABLE">
            <summary>Set UNDOABLE to false to disable UNDO
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.undoManager">
            
            <summary>NOTE: lazy instantiation when listener is added.  All methods should
            check for isUndoable before creating/firing UndoableEdits.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.Parents">
            <summary> The objects that are Parents of this object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.PropertiesHashtable">
            <summary> The PropertiesHashtable of this object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.Children">
            <summary> The objects that are Children of this object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.TypeName">
            <summary> We store the "type" property in member variable to speed look ups
            of this "type" from within our methods such as AddParent()
            and addChildren()
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.Node.maintainXMLChildOrder">
            <summary>Flag that indicates if Node will maintain child order in 
            XML_CHILD_ORDER pseudochildren
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AgeRead(System.Int32)">
            <summary>
            Updates ages_last_read[] for the node and recursively for all descendants
            </summary>
            <param name="which"></param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AgeUp">
            <summary>
            Increases the node's sequence number of a property 'other',
            and also does it recursively for all its ancestors.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AgeUp(System.Int32)">
            <summary>
            Increases the node's sequence number (of a given property)
            and also does it recursively for all its ancestors.
            </summary>
            <param name="which"></param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetAge(System.Int32)">
            <summary>
            Returns the node's sequence number (of a given property)
            and involves a recursive AgeRead() call.
            </summary>
            <param name="which"></param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.#ctor">
            <summary> The default constructor.
            *
            Property PROP_OBJECTTYPE is set to "default".
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.#ctor(MDL.Draw.Nodes.NodeProperty)">
            <summary> Constructor which allows the type of the object to be specified.
            </summary>
            <param name="type">which specifies the type of the object.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddItemToHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Convenience method for adding Objects to Hashtable ArrayLists.
            If no Object with this key is in the Hashtable, then a ArrayList
            is created and stored in the Hashtable at this location.  The
            object is then added to the ArrayList at the specified location.
            </summary>
            <param name="hash">to which object is to be added
            </param>
            <param name="key">key value for the object in the MTHashtable
            </param>
            <param name="object_Renamed">The Object that is to be added to the MTHashtable ArrayList.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveItemFromHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Convenience method for removing Objects from Hashtable Vectors.
            *
            </summary>
            <param name="hash"> Hashtable from which object is to be removed
            </param>
            <param name="key">  The key value for the object in the Hashtable
            </param>
            <param name="value_Renamed">The Object that is to be removed from the Hashtable Vector.
            
            </param>
            <returns> Returns true if the specified item was found and removed from the
            vector.
            *
            </returns>      
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ContainsItemInHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Convenience method for checking for Objects in Hashtable Vectors.
            </summary>
            <param name="hash">from which object is to be removed
            </param>
            <param name="key">key value for the object in the Hashtable
            </param>
            <param name="value_Renamed">The Object that is to be removed from the Hashtable Vector.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ReplaceItemInHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object,System.Object)">
            <summary> Convenience method for checking for REPLACING Objects in 
            Hashtable Vectors.
            *
            </summary>
            <param name="hash">from which object is to be replaced
            </param>
            <param name="key">key value for the object in the Hashtable
            </param>
            <param name="value_Renamed">Object that is to be replaced in the Hashtable Vector.
            </param>
            <param name="newvalue">NEW Object that is to be placed into the Hashtable Vector.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddParent(MDL.Draw.Nodes.Node)">
            <summary> Add a new parent object to this object.
            *
            The new parent gets added in the ArrayList of objects
            stored at the location in the Parents Hashtable, given
            by the type of the newParent.
            *
            NOTE: the 'newParent' object is NOT NOTIFIED that it has a new child
            *
            </summary>
            <param name="newParent"> the new parent to be added
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveParent(MDL.Draw.Nodes.Node)">
            <summary> Remove the specified object from this objects list of Parents.
            *
            </summary>
            <param name="estrangedParent">The parent object to remove.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddChild(MDL.Draw.Nodes.NodeProperty,MDL.Draw.Nodes.Node)">
            <summary> This version of AddChild() allows the caller to set the
            'pseudo type' for the child object being added, so that
            it is added under the pseudo type TypeName for the parent
            instead of the newChild object's actual type.
            *
            </summary>
            <param name="pseudoTypeName">The type name under which the child will be stored.
            </param>
            <param name="newChild">The child object that is to be added with the type
            pseudoTypeName.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddChild(MDL.Draw.Nodes.Node)">
            <summary> Add an object to this objects list of Children.
            *
            </summary>
            <param name="newChild">The child object that is to be added.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddArrayOfChildren(System.Int32,MDL.Draw.Nodes.Node[])">
            <summary> Convenience method for adding a large number of Children simultaneously
            to another object.  This method is provided largely for performance
            enhancements.
            *
            </summary>
            <param name="iNumChildren">The number of Children objects to be added.
            </param>
            <param name="newChildrenArray">The array of child objects to be added.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddArrayListOfChildren(MDL.Draw.Nodes.NodeProperty,System.Collections.ArrayList,System.Boolean)">
            <summary> Convenience method for adding a large number of LIKE TYPED Children 
            simultaneously to another object.  This method is provided largely 
            for convenience/performance enhancements.
            The passed in ArrayList REPLACES any existing ArrayList for the 
            specified type in the object's Children hashtable
            Each child in the vector has this object added as a parent
            *
            </summary>
            <param name="childrenType">     objectType to add the Children as
            </param>
            <param name="childrenVector">   ArrayListof Children of like type
            </param>
            <param name="alwaysCopyVector">if true then the passed in vector is COPIED
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ReplaceArrayListOfChildren(MDL.Draw.Nodes.NodeProperty,System.Collections.ArrayList)">
            <summary>Convenience method for adding a large number of LIKE TYPED Children 
            simultaneously to another object.  This method is provided largely 
            for convenience/performance enhancements.
            The passed in ArrayList REPLACES any existing ArrayList for the 
            specified type in the object's Children hashtable
            Each child in the vector has this object added as a parent
            All of the Children in the EXISTING vector for this object type
            MUST BE PRESENT in the new vector - additional objects are allowed,
            -this method is used by XML reader to REORDER the Children of
            the specified type
            </summary>
            <summary>INTERNAL USE function, no Changed events are generated
            </summary>
            <param name="childrenType">objectType to add the Children as
            </param>
            <param name="childrenVector">ArrayList of Children of like type
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ReParentChildrenOfObject(MDL.Draw.Nodes.Node)">
            <summary> RE-parent all of the Children of the specified object to another object
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveChild(MDL.Draw.Nodes.Node)">
            <summary> Remove a child from this object.
            *
            </summary>
            <param name="estrangedChild">The child object to be removed.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ReplaceChild(MDL.Draw.Nodes.Node,MDL.Draw.Nodes.Node)">
            <summary> Replace a child from this object with another child (preserving the order).
            *
            </summary>
            <param name="estrangedChild">The child object to be removed.
            </param>
            <param name="newChild">The child to replace the estrangedChild with.
            </param>
            <author> jbo
            </author>
            <version> 2-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ReplaceChild(MDL.Draw.Nodes.NodeProperty,MDL.Draw.Nodes.Node,MDL.Draw.Nodes.Node)">
            <summary> Replace the given child with a new child (maintaining the order).
            </summary>
            <author> jbo
            </author>
            <version> 2-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Subclasses of object can decide whether they will keep
            existing based on the loss of a child object.
            
            </summary>
            <param name="lostChild">The child object that was removed.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.Destroy">
            <summary> Destroy this object.
            This method has a variety of side effects.
            All Parents and Children of this object will be notifed of its 
            imminent demise.  They may decide to Destroy themselves as a result.
            This class is not restricted to molecular systems, but a good example
            is what happens when an atom is Destroyed.  Bonds that had the atom
            as a child would Destroy themselves when the atom was Destroyed.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetChildrenOfType(MDL.Draw.Nodes.NodeProperty)">
            <summary>Return an ArrayList object that contains all of the Children of
            the specified type.  If 'changedOnly' argument is true then only
            the Changed Children of the specified type are returned.
            </summary>
            <param name="TypeName">The type name of the Children to return.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetParentsOfType(MDL.Draw.Nodes.NodeProperty)">
            <summary> Returns ArrayList of all the Parents of the specified type
            
            </summary>
            <param name="TypeName">The type name of the Parents to be returned.
            </param>
            <returns>An ArrayList or null if no Parents of that type exist for this
            object.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.Matches(MDL.Draw.Nodes.Node)">
            <summary>This method Matches one object to another object.  If the 
            'matchObject' contains AT LEAST all of the Properties (and
            type) of this object (it can have MORE Properties) then
            the objects match.
            If the TypeName of this object is PROP_VALUE_ANY than it will
            match any object type which matchObject has
            If any Properties of this object have PROP_VALUE_ANY than the
            matchObject must only HAVE that property, the value can be
            anything.
            So, it is possible that "this.Matches(objecta)" is TRUE and that
            "objecta.Matches(this)" is NOT TRUE
            </summary>
            <param name="matchObject">  another object to match against
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.Matches(MDL.Draw.Nodes.Node,System.Boolean)">
            <summary>This method Matches one object to another object.  If the 
            'matchObject' contains AT LEAST all of the Properties (and
            type) of this object (it can have MORE Properties) then
            the objects match.
            If the TypeName of this object is PROP_VALUE_ANY than it will
            match any object type which matchObject has
            If any Properties of this object have PROP_VALUE_ANY than the
            matchObject must only HAVE that property, the value can be
            anything.
            So, it is possible that "this.Matches(objecta)" is TRUE and that
            "objecta.Matches(this)" is NOT TRUE
            </summary>
            <param name="matchObject">  another object to match against
            </param>
            <param name="matchParentAndChildren"> if true then matchObject must 
            have AT LEAST all of the parent/Children of 'this' 
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.equals(MDL.Draw.Nodes.Node)">
            <summary>returns TRUE if the 2 objects share ALL of the same Properties
            and values.  See Matches() for details.
            basically if this.Matches( matchObject ) and matchObject.Matches( this )
            than the objects are considered equal. This is not _E_quals() as we would aslo need GetHashcode()
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetParent(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method which returns the first parent of a given
            type, or null if there are no Parents of that type.
            This is useful as often an object only has one parent of a
            type, and the code fragment
            <pre>
            ArrayList parentsOfType = (ArrayList)getParentsOfType(TypeName);
            if(parentsOfType != null &amp;&amp; parentsOfType.size() > 0){
                return (object)parentsOfType.elementAt(0);
            }
            </pre>
            is rather clumsy to use in these situations.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetChild(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method which returns the first child of a given
            type, or null if there are no Children of that type.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetArrayListProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>Returns the specified property as an ArrayList
            If the property is NOT stored as a vector, and instead is a single
            object (optimized vector of 1) then we CREATE the vector and
            place it INTO THE HASHTABLE (so that it will be there the next
            time this property is requested)
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Return the value of the specified property for this object.
            *
            </summary>
            <param name="propertyName">The property for which we wish to know the value.
            </param>
            <returns>An object which represents the value of the property, or null
            if the object has no property of that name.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for finding the value of an integer property value.
            *
            </summary>
            <param name="propertyName">The property for which we wish to know the value.
            </param>
            <returns> The basic integer value of the property rather than an Integer
            object which has that value.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.SetIntegerProperty(MDL.Draw.Nodes.NodeProperty,System.Int32)">
            <summary> Convenience method for setting the value of an Integer property.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to set.
            </param>
            <param name="propertyVal">The int value of the property.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.IncrementIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for adding one to the value of an integer property.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to increment.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.DecrementIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for subtracting one from the value of an
            integer property.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to decrement.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.IncrementIntegerProperty(MDL.Draw.Nodes.NodeProperty,System.Int32)">
            <summary> Convenience method for adding a specified amount to an integer property.
            If the property doesn't exist it will be created.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to increment.
            </param>
            <param name="incrementValue">The amount we wish to add to the property value
            (can be positive or negative).
            </param>
            <returns> The new value of the property.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetDoubleProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for getting the value of a double valued property.
            The double value is returned instead of a Double object that contains
            the value.
            *
            </summary>
            <param name="propertyName">The name of the property we want the value of.
            </param>
            <returns> The value of the property or 0.0 if it is not set.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.SetDoubleProperty(MDL.Draw.Nodes.NodeProperty,System.Double)">
            <summary> Convenience method for setting the value of a double property.
            
            </summary>
            <param name="propertyName">The name of the property we are setting.
            </param>
            <param name="propertyVal">The value of the property we wish to set.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetBooleanProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for returning the boolean value of a Boolean property.
            *
            </summary>
            <param name="propertyName">The name of the property we want the value of.
            </param>
            <returns> The boolean value of the property or false if the property
            is not set.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.SetBooleanProperty(MDL.Draw.Nodes.NodeProperty,System.Boolean)">
            <summary> Convenience method for setting the value of a boolean property.
            </summary>
            <param name="propertyName">The name of the property we wish to set.
            </param>
            <param name="propertyVal">The value of the property.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.GetStringProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for getting the String value of a property.
            *
            </summary>
            <param name="propertyName">The name of the property we want the value of.
            </param>
            <returns> The string value of the property, or the empty string string.Empty if
            the property is not set.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.AddItemToVectorProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Add an item to a property of TYPE ArrayList.
            *
            </summary>
            <param name="propertyName">The property name of the vector property to add the item to
            </param>
            <param name="newItem">The object to be added to the property vector.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveItemFromVectorProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Remove an object from a property vector.
            *
            </summary>
            <param name="propertyName">The property where the object is stored.
            </param>
            <param name="removeItem">The object that is to be removed from the property
            vector.
            *
            </param>
            <returns> Returns true if the item was FOUND and removed
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.VectorPropertyContainsItem(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Does a vector property contain the specified item.
            *
            </summary>
            <param name="propertyName">The property where the object would be stored.
            </param>
            <param name="checkForItem">The object to be searched for in the specified vector
            property.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.VectorPropertyContainsItemLike(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary>
            Performs a lookup against the properties hashtable as a substring. 
            This is much less efficient than always using the hashcode, but necessary to find a partial match.
            </summary>
            <param name="propertyName">the type of property, e.g. "highlight"</param>
            <param name="checkForItem">the item within the above vector to find.</param>
            <returns>true if found, false if not.</returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.DestroyChildrenOfType(MDL.Draw.Nodes.NodeProperty)">
            <summary> Remove and Destroy all Children of the specified type.
            *
            </summary>
            <param name="childName">The type of Children we want to remove/Destroy.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.DestroyParentsOfType(MDL.Draw.Nodes.NodeProperty)">
            
            <summary> Remove and Destroy Parents of the specified type.
            KLUDGE - should this EXISTS ??
            (made private 03/01/99 because this is not used and I don't
            think it should exist)
            *
            </summary>
            <param name="parentType">Name The parent types we want to remove
            *
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveFromParents">
            <summary> Removes this object from all of its Parents.
            NOTE:  This method was added to provide an undoable alternative to
            fragment.Destroy().  Fixing fragment.Destroy() would have been the
            best way to proceed, but we're under a code freeze and fixing Destroy
            would have been too dangerous.
            </summary>
            <author> jbo
            </author>
            <version> 2-6-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveFromChildren">
            <summary> Removes this object from all of its Children.
            </summary>
            <author> ymk
            </author>
            <version> 12-10-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemoveProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Remove a property from an object.
            
            </summary>
            <param name="propertyName">The property we want to remove.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.CopyProperties(MDL.Draw.Nodes.Node)">
            <summary> Convenience method that copies the Properties of another 
            object and adds them to this object.
            </summary>
            <author> jbo, taken from den's code in QueryletManager
            </author>
            <version> 3-17-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.HasProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Does this object have this property.
            *
            </summary>
            <param name="propertyName">The name of the property we want to know about.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.HasProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Does this object have a property of the specified value.
            *
            </summary>
            <param name="propertyName">The name of the property.
            </param>
            <param name="propertyValue">The value we want to check.
            </param>
            <returns> True if the object has the specified property with the specified
            value. False otherwise.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.HasParent(MDL.Draw.Nodes.Node)">
            <summary>   Checks object to see if it has the specified parent object
            if no parent and called with null, will return true.
            </summary>
            <param name="parentToCheckFor"> parent we will check for in our Parents </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.HasChild(MDL.Draw.Nodes.Node)">
            <summary>Checks object to see if it has the specified child object
            </summary>
            <param name="childToCheckFor"> child we will check for in our Children
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.HasChild">
            <summary> Checks if this object has ANY kind of child
            </summary>
            <author> ymk
            </author>
            <version> 03-21-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.RemovePropertyFromChildren(MDL.Draw.Nodes.NodeProperty,MDL.Draw.Nodes.NodeProperty)">
            <summary> Remove the specified property from the specified Children.
            *
            </summary>
            <param name="childName">The type of Children we want to remove the property from.
            </param>
            <param name="propertyName">The property we wish to remove.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.PlaceObjectInVectorAndPlaceInHashtable(System.Object,System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty)">
            <summary>placeObjectInVectorAndPlaceInHashtable
            </summary>
            <summary>This is a convenience function which will take an object and 
            place it in a vector and return that vector.
            It will also place the vector in the specified hashtable (destinationHashTable)
            with the specified key (TypeName) if a hashtable is supplied.
            This function is used when a ArrayList is requested and
            we had OPTIMIZED the creation of a ArrayList and NOT CREATED IT YET.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.Node.ResetCache">
            <summary> If an object that inherits from object uses caching to speed up
            access to object Children or Properties, it should implement this 
            method to reset that object's cache.
            NOTE:  This method is NOT undoable.  Because of the order of undo,
            an explicit fireResetCache() call needs to be made from MTUndoManager
            wherever the programmer needs the cache to be reset in an undo.
            </summary>
            <returns>true If cache was successfully reset, else false.
            </returns>
            <author> jbo
            </author>
            <version> 2-5-01
            
            </version>
            
        </member>
        <member name="P:MDL.Draw.Nodes.Node.NativeProperties">
            <summary>Subclasses should override this if they have any 'native' Properties
            which are stored as member variables.  They should return an 
            Array of NodeProperty objects which the subclasses checks for
            in get/SetProperty() to interface to the native Properties
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.Node.NextId">
            <summary>Method to get a new unique id from our globalUniqueId variable
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.Node.ParentsTypes">
            <summary>Returns all the different parent types of the specified object.
            A ArrayList containing NodeProperty object types is returned
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.Node.ChildrenTypes">
            <summary>Returns all the different chidren types of the specified object.
            A ArrayList containing NodeProperty object types is returned
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.Node.Properties">
            <summary>Returns a vector of NodeProperty objects for each property
            assigned to this object.  Does not include child objects.
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.Node.PropertiesCount">
            <summary>Returns the size of the arraylist that would be returned by calling Properties.
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.Node.Replaced">
            <summary>
            set Replaced to true temporarily while doing stuff that could have side effect.
            for exampple in undo code.
            </summary>
        </member>
        <member name="T:MDL.Draw.Nodes.Node.ChildIterator">
            <summary>
            an enumerator over the children of a node.
            </summary>
        </member>
        <member name="T:MDL.Draw.Nodes.Node.ChildIteratorAll">
            <summary>
            enumerator for ALL the children types
            </summary>
        </member>
        <member name="T:MDL.Draw.Nodes.Node.ChildIteratorTypesInclude">
            <summary>
            an enumerator for SOME children types. Constructor contains list of types to enumerate
            </summary>
        </member>
        <member name="T:MDL.Draw.Nodes.Node.ChildIteratorTypesExclude">
            <summary>
            an enumerator for SOME children types. Constructor contains list of types to exclude from enumeration
            </summary>
        </member>
        <member name="T:MDL.Draw.ISkObject">
            <summary>
            Summary description for ISkObject.
            </summary>
        </member>
        <member name="M:MDL.Draw.ChemGraphicsObject.canSelect(MDL.Draw.Nodes.Node)">
            <summary>
            
            </summary>
            <param name="cgo"></param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.ChemGraphicsObject.ZLAYER">
            <summary>
            
            </summary> 
        </member>
        <member name="M:MDL.Draw.ChemGraphicsObject.InitSkcWrite(System.Boolean)">
            init the node data for sketch writing
        </member>
        <member name="F:MDL.Draw.ChemGraphicsObject.PEN_WIDTH_UNIT">
             <summary>
            Pen width unit
             </summary>
        </member>
        <member name="F:MDL.Draw.ChemGraphicsObject.PEN_STYLE_TOKEN">
             <summary>
            Pen Style token
             </summary>
        </member>
        <member name="F:MDL.Draw.ChemGraphicsObject.ARROW_DIR">
            <summary>
            DP: arrow properties here for use in ReactionArrow and GenericLine
            </summary>
        </member>
        <member name="F:MDL.Draw.ChemGraphicsObject.OBJ_COORDS">
             <summary>
            object coords
             </summary>
        </member>
        <member name="F:MDL.Draw.ChemGraphicsObject.FILL_STYLE">
             <summary>
            Fill Style
             </summary>
        </member>
        <member name="M:MDL.Draw.ChemGraphicsObject.PrepareSkObjects(MDL.Draw.Chemistry.IO.SkcWriter,System.Collections.ArrayList)">
            <summary>
            put the objects in the al arraylist and do any required preprocessing on them.
            </summary>
            <param name="w"></param>
            <param name="al"></param>
        </member>
        <member name="M:MDL.Draw.ChemGraphicsObject.Translate(System.Double,System.Double)">
            <summary>Translate method looks for PROP_XYZ by default, but Atom and Sgroup
            objects will implement versions that do more
            The Translate() method will get called in MoleculeRenderer by layout routines.
            </summary>
        </member>
        <member name="M:MDL.Draw.ChemGraphicsObject.Scale(System.Double)">
            <summary>Scale method does nothing by default, but Atom and Sgroup
            objects will implement versions that do something
            The Scale() method will get called in MoleculeRenderer by
            layout routines.
            </summary>
        </member>
        <member name="T:MDL.Draw.ChemGraphicsObject.FillStyles">
            <summary>
            FillStyles
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.SetSgroupChangedFlagExplicitely">
            <summary>
            sets sgroupchanged explicitely. This flag is set implicitely when a property is changed or the hierarchy of objects is changed.
            When this does not work, it can be set explicitely here.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.ClearSgroupChangedFlagExplicitely">
            <summary>
            clears sgroupchanged explicitely.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.RemoveSgroupchangedRecursive">
            <summary>
            Utility method to remove sgroupchanged flag
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.ChemObject.OTYPE_STEXT">
            SText (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.ChemObject.OTYPE_STEREO_PURITY">
            Stereo Purity Type (Chemical Object Type) 
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.SetFont(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the font for this object
            </summary>
            <param name="font_name">Name</param>
            <param name="size">Size (in points)</param>
            <param name="bold">Boolean flag for bold</param>
            <param name="italic">Boolean flag for italic</param>
            <param name="underline">Boolean flag for underline</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetAtom(System.Int32)">
            <summary> Generic convenience method that will return the specified atom
            from the list of children atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetBond(System.Int32)">
            <summary> Generic convenience method that will return the specified bond
            from the list of children bonds.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetSgroup(System.Int32)">
            <summary> Generic convenience method that will return the specified sgroup
            from the list of children sgroups.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetMolfileStringWithCollection(System.String)">
            <summary>
            It returns a V3000 molfile string with collection of this. 
            If this is not correct object type for collection, it returns default molfile string of the parent molecule.
            </summary>
            <param name="collectionName">String to be used for V3000 collection. Recommended name is "XMDLDraw/XXXX" with XXXX as caller's choice. 
            This string should not collide with any collection name reserved by MDL.</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetContractedSuperParent">
            <summary> get contracted super sgroup parent of this chemObject if it has one. return null otherwise.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>
            GetIntegerProperty()
            
            Because the base method may change call SetProperty if the value set is not an int (i.e. a string)
            it would trigger an invalid reset of sgroupchanged. We need to prevent this.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetBooleanProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>
            GetBooleanProperty()
            
            Because the base method may change call SetProperty if the value set is not a bool (i.e. a string)
            it would trigger an invalid reset of sgroupchanged. We need to prevent this.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetDoubleProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>
            GetDoubleProperty()
            
            Because the base method may change call SetProperty if the value set is not a double (i.e. a string)
            it would trigger an invalid reset of sgroupchanged. We need to prevent this.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemObject.GetArrayListProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>
            GetArrayListProperty()
            
            Because the base method may change call SetProperty if the value set is not an ArrayList (i.e. a single value)
            it would trigger an invalid reset of sgroupchanged. We need to prevent this.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.Chemistry.ChemObject.MolfileIndex">
            <summary>
            It returns a 1-based index number of this. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.ChemObject.MolfileString">
            <summary>
            It generates molfile string of parent molecule of this object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ChemText.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Subclasses of Node can decide whether they will keep
            existing based on the loss of a child object </summary>
            <param name="lostChild">The child object that was removed. </param>
        </member>
        <member name="P:MDL.Draw.Chemistry.ChemText.HasNonDefaultProperty">
            <summary>
            NonDefaultProperty override. returns false as chem text always use default font and colors.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ConfigLabel.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Subclasses of Node can decide whether they will keep
            existing based on the loss of a child object </summary>
            <param name="lostChild">The child object that was removed. </param>
        </member>
        <member name="P:MDL.Draw.Chemistry.ConfigLabel.HasNonDefaultProperty">
            <summary>
            NonDefaultProperty override. returns false as chem text always use default font and colors.
            </summary>
        </member>
        <member name="T:MDL.Draw.Foundation.Chemistry.IO.CDX">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MDL.Draw.Foundation.Chemistry.IO.CDX.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MDL.Draw.Foundation.Chemistry.IO.CDX.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXNode.Fragment">
            <summary>
            Child Fragment
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXGraphic.ArrowShaftType">
            <summary>
            used for keep solid(1), hollow(2) or angled(3) types of arrow
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXChemicalProperty.ObjectIDs">
            <summary>
            An ordered list of objects used to define this object
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXChemicalProperty.DisplayID">
            <summary>
            The ID of a graphical object used to display the property value
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXBracketGroup.ComponentOrder">
            <summary>
            CDX SDK: A Component Order of zero indicates an unordered component
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.CDXParser.NormalizeInternalFragmentsCoords(System.Drawing.Point,MDL.Draw.Chemistry.IO.CDXFragment)">
            <summary>
            in some CDX files internal fragments may have incorrect coordinates
            that caused issue 315492 (wrong convertation)
            the function corrects coordinates if needed
            </summary>
            <param name="parentNodePosition"></param>
            <param name="fragment"></param>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXParser.RearrangeReaction">
            <summary>
            true(default) to rearrange reaction into one line
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXParser.Warning">
            <summary>
            Warning message. Might contain a description about status of parsing.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.CDXParser.Status">
            <summary>
            Error status
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.OpenEyeIO">
            <summary>*
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.OpenEyeIO.AddToDictionary(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="SMILESString"></param>
            <param name="source"></param>
            <returns>0: success; 1: duplicate name; 2: duplicate structure</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.OpenEyeIO.MolFileToMolecule(System.String)">
            <summary>
            This method converts a molfile (either as a valid path or a string)
            into a Molecule object.
            </summary>
            <param name="molfile">molfile as string or molfile name</param>
            <returns>A Molecule on success, null on failure</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.OpenEyeIO.SMILESToMolecule(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.OpenEyeIO.MoleculeToIUPAC(MDL.Draw.Chemistry.Molecule)">
            <summary>
            convert Molecule to IUPAC name
            </summary>
            <param name="inmol">the molecule to convert</param>
            <returns>string iupac name</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.OpenEyeIO.IUPACToMolecule(System.String)">
            <summary>
            Convert an IUPAC name to a molecule.
            </summary>
            <param name="name">the IUPAC name to convert</param>
            <returns>the molecule</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.OpenEyeIO.IUPACToMolfileString(System.String)">
            <summary>
            Convert an IUPAC name to a molfile string.
            </summary>
            <param name="name">The IUPAC name to convert</param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.EMPTY_STRING">
            Convenience. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.handler">
            Pointer to the class containing the callbacks used. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.NO_DATA">
            String used when Sgroup Data is empty.
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.accessionNumberFound">
            Parser state information. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.readingFeatures">
            Parser state information. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.readingSequenceData">
            Parser state information. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.keyName">
            Feature information which needs to persist between lines. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.fromEndpoint">
            Feature information which needs to persist between lines. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.toEndpoint">
            Feature information which needs to persist between lines. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.rawDescription">
            Feature information which needs to persist between lines. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.type">
            Feature information which needs to persist between lines. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.description">
            Feature information which needs to persist between lines. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.original">
            Feature information which needs to persist between lines.
            This is set for CONFLICT, VARIANT, MUTAGEN. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.featureMap">
            Map between Flat File keyNames and XML TYPEs. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.inRecord">
            Keep track of whether we are inside a record or not 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.recordContents">
            Current record contents 
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.#ctor">
            Empty constructor. 
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.Parse(System.String,MDL.Draw.Chemistry.IO.UniprotHandler,MDL.Draw.Chemistry.Molecule@)">
            Entry point for parsing a flat file. 
            
            @param inputFlatFile
            @param inputHandler
            @throws IOException
            @throws Exception
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.GetRecordContents">
            ** Entry point for returning current record contents */
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.ProcessLine(System.String)">
            Scan a line looking for keyNames of interest.
            Presently processes ID, AC, FT, SQ, "  ", and //
            keyNames.
             
            @param line
            @throws Exception
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.featureTokensToHashMap(System.String)">
            The UniProt XML parser uses HashMaps for persistent storage of
            attribute data when a tag contains embedded tags (for example 
            "cross-link", which has embedded position tags).  This routine
            populates those HashMaps. 
            
            @throws Exception
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.keyNameToFeatureType(System.String)">
            Utility method to translate from the flat file keyName
             to the XML file type attribute.  Uses the static featureMap field.
             
            @param flatFileKeyName 
            @return the corresponding XML file type attribute
            @throws Exception
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.rawDescriptionToDescription(System.String,System.String)">
            Parse the flat file description field, leaving just the part 
            corresponding to the XML feature description attribute.
            
            @param inputDescription the entire flat file description field
            @return the appropriate XML description attribute.
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotFlatFileParser.parseFeatureLine(System.String)">
            Splits a FT line into its constituent fields.  These are
            stored as the instance variables keyName, fromEndpoint, toEndpoint
            and rawDescription.
            
            @param line
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.UNIPROT_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.ENTRY_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.NAME_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.ACCESSION_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.FEATURE_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.BEGIN_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.END_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.POSITION_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.ORIGINAL_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.VARIATION_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.TYPE_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.LOCATION_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.SEQUENCE_TAG">
            Tags 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.NO_DATA">
            Define the output string used when a Sgroup data field is empty.
            This constant should be coordinated with the one defined in uniprot.cct.
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.ADD_ATTRIBUTES_TO_DESCRIPTION">
            Set behavior for including/excluding other attributes from description line
            used in Data Sgroups
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.encounteredError">
            ** Flag indicating that the processing of a record has failed, and missing cells should
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.uniprotTag">
            Storage for the initial uniprot tag. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.uniprotName">
            Storage for the Uniprot name. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.uniprotAccessionNumber">
            Storage for the Uniprot accession number(s). 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.sequenceBuffer">
            Storage for the sequence. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.secondaryTextBuffer">
            Text buffer for the secondary output stream. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.unknownFeatures">
            Storage for unknown feature types 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.featureAttributes">
            Storage for feature attributes. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.featurePosition">
            Storage for feature position. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.variations">
            Storage for sequence variations. The original is in the first position. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.chainScripts">
            Storage for the dynamically created Cheshire scripts defining chain-cutting operations. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.modificationScripts">
            Storage for the dynamically created Cheshire scripts defining amino acid modifications. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.crosslinkScripts">
            Storage for the dynamically created Cheshire scripts defining amino acid crosslinks. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.sgroupScripts">
            Storage for the dynamically created Cheshire scripts defining Sgroups. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.missingCount">
            Count of the records which fail to parse. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.rowKey">
            The row id of the row being processed. 
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.UniprotHandler.entryIndentLevel">
            The indent level of the "entry" tag. 
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotHandler.CreateDataSgroup(MDL.Draw.Chemistry.IO.UniprotHandler.ParserStatesEnum,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Hashtable)">
            May put a Data Sgroup on a range of residues.  The behavior is defined by the 
             nonStructureDifferentiatingDataSgroup and StructureDifferentiatingDataSgroup fields.
            
            @param type - "NSD" for Non-Structure-Differentiating, "SD" for Structure-Differentiating
            @param position - the featurePosition HashMap
            @param attributes - the featureAttributes HashMap
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotHandler.ProcessName(System.String)">
            Process the record name.
            	     *  We haven't read, and therefore created, the sequence and hence mol.
            	     *  So we cache the command in an array of Cheshire modificationScripts.
            	     * 
            	    * @param the record name
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotHandler.ProcessAccessionNumber(System.String)">
            Process the accession number.
            	     *  We haven't read, and therefore created, the sequence and hence mol.
            	     *  So we cache the command in an array of Cheshire modificationScripts.
            	     * 
            	    * @param the record name
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.UniprotHandler.ParserStatesEnum">
            States for the parser state variable.
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.UniprotException">
            <summary>*
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.UniprotException.#ctor(System.String)">
            <summary>*
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sequence.Translate(System.Double,System.Double)">
            <summary>Translate this object. 
            </summary>		
        </member>
        <member name="F:MDL.Draw.Chemistry.SequenceUnit.MODIFIEDFLAG">
            Modified Flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.SequenceUnit.MUTATEDLABEL">
            Mutated Label
        </member>
        <member name="F:MDL.Draw.Chemistry.SequenceUnit.MUTATEDDESCRIPTION">
            Mutated Description
        </member>
        <member name="F:MDL.Draw.Chemistry.SequenceUnit.MODIFICATIONDESCRIPTION">
            Modification Description
        </member>
        <member name="M:MDL.Draw.Chemistry.SequenceUnit.Destroy">
            <summary>	destory sequence unit and remove it from list and remove all related features
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.StereoFlag.Translate(System.Double,System.Double)">
            <summary>Translate this object. 
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.NamespaceDoc">
            <summary>
            Contains the Interfaces to be implemented by Add-ins that want to extend the 
            functionality of an Editor, Renditor, action, tool, module, help, or file namer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Nodes.CanvasObjectBase">
            <summary> Node
            Node is a class for representing objects with a variety of Properties.
            The Node object is essentially an object which has NO 'type' or Properties 
            at compile time, and these are defined at run time by the users of 
            objects of this class.  
            The class maintains connections between a variety of objects of
            this type.
            </summary>
            <author> Francois Nguyen </author>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.NUMBER_DEFAULT_PARENT_TYPES">
            <summary>This number is used as default size of the 'Parents' hashtable
            - it should be around the average number of different TYPES of Parents
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.NUMBER_DEFAULT_CHILDREN_TYPES">
            <summary>This number is used as default size of the 'Children' hashtable
            - it should be around the average number of different TYPES of Children
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.NUMBER_DEFAULT_PROPERTIES">
            <summary>This number is used as default size of the 'Properties' hashtable
            - it should be around the average number of different Properties
            a typical object would have
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.OTYPE">
            <summary>Default type if none specified during Node creation </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.ISIS_OBJTYPE">
            <summary>Object type property for an 'generic' Node's who are NOT given a specific type  </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.PROP_OBJECTTYPE">
            <summary>Object type property for an 'generic' Node's who are NOT given a specific type </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.PROP_PROPERTIES_CHANGED">
            <summary>Object property for Node's special Observer property which watches ALL Properties change state </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.PROP_VALUE_ANY">
            <summary>Object property for 'template' object's where the VALUE of a property or object type need to be specified as ANY </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.id">
            <summary> A unique integer Id for this object.
            *
            The principle use for these is for comparing the
            order of two objects.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.GlobalUniqueId">
            <summary>'Global' Node id which is constantly incremented to make sure
            that objects have unique ids
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.UNDOABLE">
            <summary>Set UNDOABLE to false to disable UNDO
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.undoManager">
            
            <summary>NOTE: lazy instantiation when listener is added.  All methods should
            check for isUndoable before creating/firing UndoableEdits.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.Parents">
            <summary> The objects that are Parents of this object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.PropertiesHashtable">
            <summary> The PropertiesHashtable of this object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.Children">
            <summary> The objects that are Children of this object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.CanvasObjectBase.TypeName">
            <summary> We store the "type" property in member variable to speed look ups
            of this "type" from within our methods such as AddParent()
            and addChildren()
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.#ctor">
            <summary> The default constructor.
            *
            Property PROP_OBJECTTYPE is set to "default".
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.#ctor(MDL.Draw.Nodes.NodeProperty)">
            <summary> Constructor which allows the type of the object to be specified.
            </summary>
            <param name="type">which specifies the type of the object.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.AddItemToHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Convenience method for adding Objects to Hashtable ArrayLists.
            If no Object with this key is in the Hashtable, then a ArrayList
            is created and stored in the Hashtable at this location.  The
            object is then added to the ArrayList at the specified location.
            </summary>
            <param name="hash">to which object is to be added
            </param>
            <param name="key">key value for the object in the MTHashtable
            </param>
            <param name="object_Renamed">The Object that is to be added to the MTHashtable ArrayList.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.RemoveItemFromHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Convenience method for removing Objects from Hashtable Vectors.
            *
            </summary>
            <param name="hash"> Hashtable from which object is to be removed
            </param>
            <param name="key">  The key value for the object in the Hashtable
            </param>
            <param name="value_Renamed">The Object that is to be removed from the Hashtable Vector.
            
            </param>
            <returns> Returns true if the specified item was found and removed from the
            vector.
            *
            </returns>      
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.ContainsItemInHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Convenience method for checking for Objects in Hashtable Vectors.
            </summary>
            <param name="hash">from which object is to be removed
            </param>
            <param name="key">key value for the object in the Hashtable
            </param>
            <param name="value_Renamed">The Object that is to be removed from the Hashtable Vector.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.ReplaceItemInHashtableVector(System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty,System.Object,System.Object)">
            <summary> Convenience method for checking for REPLACING Objects in 
            Hashtable Vectors.
            *
            </summary>
            <param name="hash">from which object is to be replaced
            </param>
            <param name="key">key value for the object in the Hashtable
            </param>
            <param name="value_Renamed">Object that is to be replaced in the Hashtable Vector.
            </param>
            <param name="newvalue">NEW Object that is to be placed into the Hashtable Vector.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.AddParent(MDL.Draw.Nodes.Node)">
            <summary> Add a new parent object to this object.
            *
            The new parent gets added in the ArrayList of objects
            stored at the location in the Parents Hashtable, given
            by the type of the newParent.
            *
            NOTE: the 'newParent' object is NOT NOTIFIED that it has a new child
            *
            </summary>
            <param name="newParent"> the new parent to be added
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.Destroy">
            <summary> Destroy this object.
            This method has a variety of side effects.
            All Parents and Children of this object will be notifed of its 
            imminent demise.  They may decide to Destroy themselves as a result.
            This class is not restricted to molecular systems, but a good example
            is what happens when an atom is Destroyed.  Bonds that had the atom
            as a child would Destroy themselves when the atom was Destroyed.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetChildrenOfType(MDL.Draw.Nodes.NodeProperty)">
            <summary>Return an ArrayList object that contains all of the Children of
            the specified type.  If 'changedOnly' argument is true then only
            the Changed Children of the specified type are returned.
            </summary>
            <param name="TypeName">The type name of the Children to return.
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetParentsOfType(MDL.Draw.Nodes.NodeProperty)">
            <summary> Returns ArrayList of all the Parents of the specified type
            
            </summary>
            <param name="TypeName">The type name of the Parents to be returned.
            </param>
            <returns>An ArrayList or null if no Parents of that type exist for this
            object.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetParent(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method which returns the first parent of a given
            type, or null if there are no Parents of that type.
            This is useful as often an object only has one parent of a
            type, and the code fragment
            <pre>
            ArrayList parentsOfType = (ArrayList)getParentsOfType(TypeName);
            if(parentsOfType != null &amp;&amp; parentsOfType.size() > 0){
                return (object)parentsOfType.elementAt(0);
            }
            </pre>
            is rather clumsy to use in these situations.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetArrayListProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>Returns the specified property as an ArrayList
            If the property is NOT stored as a vector, and instead is a single
            object (optimized vector of 1) then we CREATE the vector and
            place it INTO THE HASHTABLE (so that it will be there the next
            time this property is requested)
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Return the value of the specified property for this object.
            *
            </summary>
            <param name="propertyName">The property for which we wish to know the value.
            </param>
            <returns>An object which represents the value of the property, or null
            if the object has no property of that name.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for finding the value of an integer property value.
            *
            </summary>
            <param name="propertyName">The property for which we wish to know the value.
            </param>
            <returns> The basic integer value of the property rather than an Integer
            object which has that value.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.SetIntegerProperty(MDL.Draw.Nodes.NodeProperty,System.Int32)">
            <summary> Convenience method for setting the value of an Integer property.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to set.
            </param>
            <param name="propertyVal">The int value of the property.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.IncrementIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for adding one to the value of an integer property.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to increment.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.DecrementIntegerProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for subtracting one from the value of an
            integer property.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to decrement.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.IncrementIntegerProperty(MDL.Draw.Nodes.NodeProperty,System.Int32)">
            <summary> Convenience method for adding a specified amount to an integer property.
            If the property doesn't exist it will be created.
            *
            </summary>
            <param name="propertyName">The name of the property we wish to increment.
            </param>
            <param name="incrementValue">The amount we wish to add to the property value
            (can be positive or negative).
            </param>
            <returns> The new value of the property.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetDoubleProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for getting the value of a double valued property.
            The double value is returned instead of a Double object that contains
            the value.
            *
            </summary>
            <param name="propertyName">The name of the property we want the value of.
            </param>
            <returns> The value of the property or 0.0 if it is not set.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.SetDoubleProperty(MDL.Draw.Nodes.NodeProperty,System.Double)">
            <summary> Convenience method for setting the value of a double property.
            
            </summary>
            <param name="propertyName">The name of the property we are setting.
            </param>
            <param name="propertyVal">The value of the property we wish to set.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetBooleanProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for returning the boolean value of a Boolean property.
            *
            </summary>
            <param name="propertyName">The name of the property we want the value of.
            </param>
            <returns> The boolean value of the property or false if the property
            is not set.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.SetBooleanProperty(MDL.Draw.Nodes.NodeProperty,System.Boolean)">
            <summary> Convenience method for setting the value of a boolean property.
            </summary>
            <param name="propertyName">The name of the property we wish to set.
            </param>
            <param name="propertyVal">The value of the property.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.GetStringProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Convenience method for getting the String value of a property.
            *
            </summary>
            <param name="propertyName">The name of the property we want the value of.
            </param>
            <returns> The string value of the property, or the empty string string.Empty if
            the property is not set.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.AddItemToVectorProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Add an item to a property of TYPE ArrayList.
            *
            </summary>
            <param name="propertyName">The property name of the vector property to add the item to
            </param>
            <param name="newItem">The object to be added to the property vector.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.RemoveItemFromVectorProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Remove an object from a property vector.
            *
            </summary>
            <param name="propertyName">The property where the object is stored.
            </param>
            <param name="removeItem">The object that is to be removed from the property
            vector.
            *
            </param>
            <returns> Returns true if the item was FOUND and removed
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.VectorPropertyContainsItem(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Does a vector property contain the specified item.
            *
            </summary>
            <param name="propertyName">The property where the object would be stored.
            </param>
            <param name="checkForItem">The object to be searched for in the specified vector
            property.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.VectorPropertyContainsItemLike(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary>
            Performs a lookup against the properties hashtable as a substring. 
            This is much less efficient than always using the hashcode, but necessary to find a partial match.
            </summary>
            <param name="propertyName">the type of property, e.g. "highlight"</param>
            <param name="checkForItem">the item within the above vector to find.</param>
            <returns>true if found, false if not.</returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.RemoveProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Remove a property from an object.
            
            </summary>
            <param name="propertyName">The property we want to remove.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.CopyProperties(MDL.Draw.Nodes.Node)">
            <summary> Convenience method that copies the Properties of another 
            object and adds them to this object.
            </summary>
            <author> jbo, taken from den's code in QueryletManager
            </author>
            <version> 3-17-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.HasProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Does this object have this property.
            *
            </summary>
            <param name="propertyName">The name of the property we want to know about.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.HasProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> Does this object have a property of the specified value.
            *
            </summary>
            <param name="propertyName">The name of the property.
            </param>
            <param name="propertyValue">The value we want to check.
            </param>
            <returns> True if the object has the specified property with the specified
            value. False otherwise.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.HasParent(MDL.Draw.Nodes.Node)">
            <summary>   Checks object to see if it has the specified parent object
            if no parent and called with null, will return true.
            </summary>
            <param name="parentToCheckFor"> parent we will check for in our Parents </param>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.PlaceObjectInVectorAndPlaceInHashtable(System.Object,System.Collections.IDictionary,MDL.Draw.Nodes.NodeProperty)">
            <summary>placeObjectInVectorAndPlaceInHashtable
            </summary>
            <summary>This is a convenience function which will take an object and 
            place it in a vector and return that vector.
            It will also place the vector in the specified hashtable (destinationHashTable)
            with the specified key (TypeName) if a hashtable is supplied.
            This function is used when a ArrayList is requested and
            we had OPTIMIZED the creation of a ArrayList and NOT CREATED IT YET.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.CanvasObjectBase.ResetCache">
            <summary> If an object that inherits from object uses caching to speed up
            access to object Children or Properties, it should implement this 
            method to reset that object's cache.
            NOTE:  This method is NOT undoable.  Because of the order of undo,
            an explicit fireResetCache() call needs to be made from MTUndoManager
            wherever the programmer needs the cache to be reset in an undo.
            </summary>
            <returns>true If cache was successfully reset, else false.
            </returns>
            <author> jbo
            </author>
            <version> 2-5-01
            
            </version>
            
        </member>
        <member name="P:MDL.Draw.Nodes.CanvasObjectBase.NativeProperties">
            <summary>Subclasses should override this if they have any 'native' Properties
            which are stored as member variables.  They should return an 
            Array of NodeProperty objects which the subclasses checks for
            in get/SetProperty() to interface to the native Properties
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.CanvasObjectBase.NextId">
            <summary>Method to get a new unique id from our globalUniqueId variable
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.CanvasObjectBase.ParentsTypes">
            <summary>Returns all the different parent types of the specified object.
            A ArrayList containing NodeProperty object types is returned
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.CanvasObjectBase.Properties">
            <summary>Returns a vector of NodeProperty objects for each property
            assigned to this object.  Does not include child objects.
            </summary>
        </member>
        <member name="P:MDL.Draw.Nodes.CanvasObjectBase.Replaced">
            <summary>
            set Replaced to true temporarily while doing stuff that could have side effect.
            for exampple in undo code.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DIRADICAL">
            <summary>
            Definitions of the radical values used in MDL Mol files.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.OTYPE">
            <summary>
            Atom (Chemical Object Type)
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.idNumber">
            <summary>
            number to be used in Molecule.FindRings() to prevent changing real Id number
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HPOSITION">
            <summary>
            where to placed h# label if implicit hydrogen are displayed. see sk format page 2-16
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.FIXED_POSITION">
            <summary>
            The property that specifies if an atom has a fixed position.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.TEMPLATE_ATTACHMENT">
            <summary>
            The property that specifies if an atom serves as the attachment point for the template
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.CAN_REVERSE_LABEL">
            <summary>
            The property that specifies if an atom label can be reversed. like NO2 -> O2N
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.NUM_SIZE">
            <summary>
            font size for drawing the atom number
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.NAME">
            <summary>
            The property that defines the name of an atom.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.ISOTOPE">
            <summary>
            The chemical isotope of an atom. (stored as mass difference)
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.SYMBOL">
            <summary>
            The symbol of an atom.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.CHARGE">
            <summary>
            The charge of an atom
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HYDROGENCOUNT">
            <summary>
            The explicit hydrogen count of an atom.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HYDROGENCOUNT_MIN">
            <summary>
            The explicit hydrogen count of an atom. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HYDROGENCOUNT_MAX">
            <summary>
            The explicit hydrogen count of an atom.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.TYPE">
            <summary>
            The atom type of an atom. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.VALENCE">
            <summary>
            The explicit valence of an atom. STORED INTERNALLY IN MDL MOLFILE CONVENTION (0='off', 1-14, 15='0' 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.STEREOCAREBOX">
            <summary>
            Does an atom have a bond with a stereo care box.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.REACTIONCOMPONENTTYPE">
            <summary>
            The reaction component type of this atom.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.REACTIONCOMPONENTNUMBER">
            <summary>
            The reaction component number of this atom. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.ATOMATOMMAPPINGNUMBER">
            <summary>
            Mapping number of this atom. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.INVERSIONRETENTIONFLAG">
            <summary>
            Does this atom retain its chirality or invert. 1 = ".inv.", 2 = ".ret." 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.EXACTCHANGEFLAG">
            <summary>
            Exact change flag. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.CHANGEFLAG">
            <summary>
            Change flag in reactant.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DISPLAYHYDROGENS">
            <summary>
            Display Hydrogens 0: no display; 1: on hetero; 2 on terminal or hetero; 3 display whatever the type.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.SUBSTITUTIONCOUNT">
            <summary>
            Substitution count
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RINGBONDCOUNT">
            <summary>
            Ring Bond Count
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.NPOS">
            <summary>
            Npos
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RGROUPATTACHMENTPOINT">
            <summary>
            RGroup Attachment Point 
            1: first attachment point
            2: second attachment point
            3: first and second attachment point
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.UNSATURATED">
            <summary>
            Unsaturated Atom
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.ATOMNAMELIST">
            <summary>
            Atom Name List
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.ATOMLISTLOGIC">
            <summary>
            Atom List Logic
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RADICAL">
            <summary>
            Radical NOTE:  We're using MDL internal representation where 1 = diradical (2.),
             2= monoradical (1.), 3 = triplet diradical (2.), 4 = triradical (3.) 5-100 = (4.,5.,6.,...,99.)
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.LONE_PAIRS">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DELTA">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.ALIAS">
            <summary>
            Atom Alias
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.VALUE">
            <summary>
            Atom Value
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.IN_RING">
            <summary>
            Atom is a member of ring flag
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.STEREO_CONFIG">
            <summary>
            Atom stereo configuration 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RGROUP_LABELLOCATION">
            <summary>
            Atom RGroup Label Location 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RGROUP_ATTACHMENT_ORDER">
            <summary>
            Atom RGroup Attachment order - presence usually indicates that 
            second attachment is NOT high numbered atom
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RGROUP_ATTACHMENT_DIRECTION">
            <summary>
            Atom RGroup Attachment direction
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RGROUP_ATTACHMENT_AT_LOW">
            <summary>
            Atom RGroup Secondary Attachment point is at low attachment
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.RING_ATOM">
            <summary>
            This property show that it's a ringAtom type	
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.MULTIEND_ATOM">
            <summary>
            This property shows that it's a MultiEndPoint atom for 1-to-Any / 1-to-All bond types
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.MULTIEND_DEFINED">
            <summary>
            This property shows that it's a MultiEndPoint Attachment atoms (children) is defined yet.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DISPLAYNUMBER">
            <summary>
            DO NOT display number of an atom
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DONT_DISPLAYVALENCE">
            <summary>
            DO NOT display valence of an atom
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DONT_DISPLAYVALUE">
            <summary>
            DO NOT display value of an atom
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.CEXPLICIT">
            <summary>
            display C marked EXPLICIT
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.MARGINWIDTH">
            the amount of space, in decipoints, between an atom's label and the bonds that connect to the atom 
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.DOTWIDTH">
            <summary>
            the diameter in decipoints of the dot or circile that is displayed to represent hydrogens attached to a 
            carbon by a stereo bond
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.NUMBER">
            the number of an atom 
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.SHOWCONFIG">
            <summary>
            Show/Hide stereo configuration labels
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.#ctor">
            <summary>
            no param constructor. creates a Carbon atom
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.#ctor(MDL.Draw.Chemistry.Atom)">
            <summary> Makes a copy of an existing Atom. </summary>        
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.EqualsIgnoreCoordinates(MDL.Draw.Chemistry.Atom)">
            <summary>
            compares two atoms and makes sure they have the same properties except the coordinates
            </summary>
            <param name="atom">the atom to compare to</param>
            <returns>true if all properties are the same except xyz</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.Translate(System.Double,System.Double)">
            <summary>Subclasses should override this if they have any 'native' properties
            which are stored as member variables.  They should return an 
            Array of NodeProperty objects which the subclasses checks for
            in get/SetProperty() to interface to the native properties
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.TranslateTo(MDL.Draw.Utils.Point3d)">
            <summary> Undoable method for moving the coordiates to a given point without 
            copying that point.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.Scale(System.Double)">
            <summary>Scale method does nothing by default, but Atom and Sgroup
            objects will implement versions that do something
            The Scale() method will get called in MoleculeRenderer by
            layout routines.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Rotates the atom about the centerOfRotation (within the XY-plane).
            NOTE:  Only does 2D rotation.  The axis is defined by center and 
            positive normal to XY plane containing atom. </summary>
            <param name="centerOfRotation">The point that defines the x,y coords about which atom is rotated </param>
            <param name="theta">Angle of rotation in radians. </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetBond(System.Int32)">
            <summary> Return the specified bond of this atom.
            Returns null if the atom doesn't have that many bonds.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetBondIndex(MDL.Draw.Chemistry.Bond)">
            <summary> Return the specified bond index of this atom.
            Returns -1 if the atom doesn't have that bond.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.HasBondToAtom(MDL.Draw.Chemistry.Atom)">
            <summary> Does this atom have a bond to the specified atom?  </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.FindBondToAtom(MDL.Draw.Chemistry.Atom)">
            <summary> Find the bond to the specified atom.
            Returns the bond, or null if no such bond exists.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.RemoveBond(MDL.Draw.Chemistry.Bond)">
            <summary> Remove a bond from this atoms list of bonds. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.VectorSumOfBonds(System.Boolean,System.Boolean)">
            <summary>
            return a vector that is the sum of all the bonds coming from this atom.
            </summary>
            <param name="normalise">if true, the vector is normalized before being returned.</param>
            <param name="horizontalOnly">if true, only consider vertical or horizontal bonds.</param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.nextSensibleSproutPosition">
            <summary> If sprouting from atom with 1 bond, getSensibleSproutPosition() 
            will calculate 2 sensible positions and return one of them.  If the user
            rejects the first one and deletes it, then the next time getSensibleSproutPosition()
            is called it will return the other position.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetSensibleSproutPosition(MDL.Draw.Chemistry.Bond.BondTypeEnum,System.Double)">
            <summary> Calculate a sensible position to sprout an atom or attachment.
            If has one bond then it will favor the most extended 120 degree chain.
            Saves discarded point in nextSensibleSproutPosition and will use it next
            pass if still bond count == 1.
            </summary>
            <param name="bondOrder"> The order of the new bond (which will effect its geometry) </param>
            <param name="bondLength"> The length that the new bond should be when sprouted. </param>
            <returns>The Point3d position of the atom to be sprouted (using an average bond length. </returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.CurrentValence">
            <summary> Calculate the current valence of the atom.
            Should a specified valence override the calculated value?
            Not finished yet.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.CurrentBondCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.FreeValence(System.Int32)">
            <summary> Number of free valence slots for this atom. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.changedXYZ">
            <summary>shortcut method to call SetProperty() for the XYZ atom coord point
            flag that xyz Point3d object was changed by outside entity
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.ToString">
            <summary> Returns atom id number followed by atomType. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.RemoveRelatedSgroup">
            <summary> Remove the related sgroup. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.RemoveRelatedSgroup(System.String)">
            <summary> Remove the related sgroup. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>Overload of super's GetProperty() method that checks for special
            'interned' properties
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.SetProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary>Overload of super's SetProperty() method that checks for special
            'interned' properties i.e. xyz and name</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.SetPropertyWithoutContractionCheck(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary>
            Method so that we can set properties to get around the contraction check (to allow coercion of the "*" atom to "A"
            in creating the Biopolymer query
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.IsPossibleStereoCenter(System.Boolean)">
            <summary>
            is this atom a possible stereo center that can be used for query
            </summary>
            <param name="includeEitherUnmarked">true if it should return true for Either/Unmarked stereo center as well</param>
            <returns>true if atom is a stereo center</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.IsPossibleStereoCenterWhenStereoBondAdded">
            <summary>
            is this atom a possible stereo center that can be used for query when stereo bond is added to this atom
            </summary>
            <returns>true if atom is a stereo center</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.IsStereoCenter(System.Boolean)">
            <summary>
             is this atom a stereo center
             </summary>
             <param name="includeEitherUnmarked">true if it should return true for Either/Unmarked stereo center as well</param>
             <returns>true if atom is a stereo center</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.StereoCenterChanged(MDL.Draw.Chemistry.Atom)">
            <summary> This is called when direction of wedge bond is changing.
            Needs to change stereoGroup's child if there is. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.ValenceCheckWithMemory(System.Boolean)">
            <summary>
            This function performs the valence check, but remembers the last return.
            If the last return was a false and a reset has not been done in the meantime,
            the return will always be true (even if the value is false), this is used to
            prevent re-prompting on atoms where they have already okayed a valence being
            left alone.
            </summary>
            <param name="autoCorrect">Whether the bond order should be automatically reduced if possible
            to correct the valence.</param>
            <returns>Whether the valence should be considered 'right' (see summary)</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.ValenceCheck(System.Boolean)">
            <summary> Checks to see if the valence of the atom has been
            exceeded.  If autoCorrect == true then bond orders will be reduced
            in an attempt to correct the problem.  If they can't be reduced enough or 
            if autoCorrect == false and an atom's valence has been exceeded, then the
            method will return false.
            NOTE: If possible aromatic bonds will be left intact.
            </summary>
            <param name="autoCorrect">If value is passed in as true, then bond orders will be
            reduced in an attempt to fix valence.
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.Destroy">
            <summary>	destory all of the children when sgroup is destroyed
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> RingAtom definitely care if they lose a child.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.WriteCTv2(MDL.Draw.Chemistry.Atom,System.String)">
            <summary>
            Returns CT Format V2000 atom line string
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.WritePropertiesBlockV2(System.Collections.ArrayList,System.Collections.Hashtable,System.String)">
            <summary>
            Returns CT format V2000 atom properties block string (M  ISO, M  RAD, etc)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.WriteRgAtomPropertiesV2(System.Collections.ArrayList,System.Collections.Hashtable,System.String,MDL.Draw.Chemistry.Molecule,System.Boolean)">
            <summary>
            Returns CT Format V2000 Rgroup atom properties block string (i.e. M  RGP, M  LOG, etc)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.WriteLinkAtomPropertiesV2(System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            Returns CT Format V2000 Link Atom property line string (M  LIN)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetAPOString(System.Collections.ArrayList,System.Int32@)">
            <summary> Generate a M APO line (CT Format V2000)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetLOGString(MDL.Draw.Chemistry.Molecule,System.String)">
            <summary> Generate a M LOG line(CT Format V2000)
            IMPORTATNT : We append M LOG line only for main CTab
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetALSLineString(System.Collections.ArrayList,System.Collections.Hashtable,System.String)">
            <summary> Wrtie Atom List Block (CT Format V2000)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.GetAtomListBlockString(System.Collections.ArrayList,System.Collections.Hashtable,System.String)">
            <summary> Wrtie Atom List Block (CT Format V2000)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Atom.RemoveParent(MDL.Draw.Nodes.Node)">
            In order to properly delete attachments to an abbreviated
            you need to remove the attached atom from the AttachmentPointSgroup,
            otherwise it gets accidentally left in place.
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.HPosition">
            <summary> Get or set  the Hydrogen position
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.Type">
            <summary> Set the element type of this atom. This also sets the default 
            label of the atom to that specified in our periodic table.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.DisplayHydrogens">
            <summary> Get or set  the Hydrogen display
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.AtomListLabel">
            <summary> Make a String for the atom list label. </summary>
            moved from atomrenderer
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.RGroupLabel">
            <summary> Make a String for the RGroup label.
            Doesn't correctly handle the case where the atom has multiple
            rgroup labels, but then again the reader can't store them yet.
            </summary>
            moved from atomrenderer fan 3/3/05
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.Bonds">
            <summary>
            arraylist of bonds connected to this atom
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.BondCount">
            <summary> Return the number of bonds that an atom has (rational name).
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.BondOrderCount">
            <summary> Return the sum of bond order that an atom has (rational name).
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Atom.StereoParity">
            <summary>
            MDL Parity according to ctlib rules
            </summary>
            
            <returns>Atom.StereoParityEnum Enum</returns>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HydrogenDisplayMode.Off">
            <summary>
            Does not display implicit hydrogen atoms. 
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            <para><img src="images/HydrogenDisplayMode-off2.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HydrogenDisplayMode.Hetero">
            <summary>Displays implicit hydrogens on heteroatoms. 
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            <para><img src="images/HydrogenDisplayMode-hetero2.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HydrogenDisplayMode.Terminal">
            <summary>Displays implicit hydrogens on terminal atoms. 
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2)
            <para><img src="images/HydrogenDisplayMode-terminal.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HydrogenDisplayMode.HeteroOrTerminal">
            <summary>Displays implicit hydrogens on terminal atoms and 
            heteroatoms.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 3)
            <para><img src="images/HydrogenDisplayMode-hetero-terminal.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Atom.HydrogenDisplayMode.All">
            <summary>Displays implicit hydrogens on all atoms.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 4)
            <para><img src="images/HydrogenDisplayMode-all.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.AtomicElement.MAX_VALENCE_STATES">
            <summary>The maximum number of valence states that any of our atoms exist in. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.AtomicElement.ToString">
            <summary> get atomic number and mass for this AtomicElement.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.OTYPE">
            Bond (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.PROP_AROMATIC">
            Bond or Atom Aromaticity 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.REACTINGCENTERSTATUS">
            <summary>
            Reaction center status
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.ZEROORDERBONDDISPLAY">
            <summary>
            Zero Orer Bond Display
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.BOND_SPACING">
            <summary>
            spacing between the lines of double or triple bond in percentage of the length
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.HASH_SPACING">
            <summary>
            distnace between the hash marks of a down stereo bond
            unused, but preserved in skc/tgf format
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.TOPOLOGY">
            <summary>
            Bond topology
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.RXN_TOPOLOGY">
            Bond reaction changes topology 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.ORDER">
            Bond order 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.RXN_ORDER">
            Bond reaction changes order 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.RXN_AROMATIC">
            Exclude reactions in which the corresponding bond in the product is aromatic 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.CURRENTQUERY">
            Bond "current query" 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.STEREO">
            Stereo flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.MULTIENDPOINTS">
            <summary>
            Multi-Endpoint bond (new in Direct8, 2011)
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.ALT_STEREO_DISPLAY">
            Alternate Stereo Bond Display flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.STEREO_CARE">
            Double steric bond query feature 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.CALCED_BONDPROP_LENGTH">
            Bond length (calculated) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.DRAWLABELFLAG">
            Draw Label Flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.LABEL">
            Bond Label 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.LABELFOREGROUNDCOLOR">
            Label foreground color 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.LABELBACKGROUNDCOLOR">
            Label background color 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.RGROUP_SECOND_ATTACH_FLAG">
            Bond is a Rgroup second attachment ('quote') bond 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.RING_BOND_TYPE">
            Ring bond type 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.DOUBLE_PLACEMENT">
            lateral placement of double bond 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.ALTERNATE_DOUBLE">
            internal use : specify the double bond in aromatic-inorganic ring renderering 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.NEWLY_ADDED">
            internal use : specify the bond has just added and valence check process should not touch it for the "autocorrect" 
        </member>
        <member name="F:MDL.Draw.Chemistry.Bond.SHOWCONFIG">
            <summary>
            Show/Hide stereo configuration labels
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.#ctor(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Undo.IUndoableEditListener)">
            <summary> Constructor that allows the Bond object to be undoable before
            the actions of adding atom children occur.  
            NOTE:  If manager is null, then adding atom children will NOT be undoable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.ResetCache">
            <summary> Resets the fastAtomList cache.  Overrides Node.resetCache()</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.GetAtom(System.Int32)">
            <summary> Return the specified atom of this bond.</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.GetOtherRing(MDL.Draw.Chemistry.Ring)">
            <summary>Returns a ring that is not the passed in ring that has the passed in bond
            If ring is null, the method just returns the first ring found
            returns null if no ring found
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.GetOtherAtom(MDL.Draw.Chemistry.Atom)">
            <summary> Return the other atom which forms part of this bond. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.MidPoint">
            <summary> Calculate the midpoint of the bond. </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.Length">
            <summary>
            
            </summary>
            <returns>length of bond between the two atoms locations</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.RemoveRelatedSgroup">
            <summary> Remove the related sgroup </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Override the default behaviour of Node.
            If a bond ever loses a child (an atom) then it doesn't want to
            continue.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.AddChild(MDL.Draw.Nodes.Node)">
            <summary> Overridden AddChild method so that we can keep track of bonds
            and atoms that are added to the molecule.
            This way we can keep fragments and ring information up to date.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.UpdateRingInfo(System.Collections.ArrayList)">
            <summary> Update the ring info for this molecule.
            This is only carried out if both of the child atoms of the
            bond are non-terminal. i.e. both atoms have more than one bond.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.UpdateFragmentInfo(System.Collections.ArrayList)">
            <summary> Update the fragment info for the molecule.
            Adding a new bond can change the fragment structure of the molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.Translate(System.Double,System.Double)">
            <summary> NOTE:  This method should be left blank so that routines
            that indiscriminately Translate the children of fragments or
            molecules won't Translate the atoms twice.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.TranslateBondAtoms(System.Double,System.Double)">
            <summary> Translate the bond by translating its attached atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.GetConnectedPartOfAtoms(MDL.Draw.Chemistry.Atom)">
            <summary> selectedAtom is one of either atom of this bond(Including the other atom of the bond)
            find all atoms on that part of this bond
            NOTE:if this bond is a ring bond, it'll return whole fragment's atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.IsStereoBond">
            <summary> Check if this bond is stereo bond
            Definition of "stereo bond" : UP, DOWN, (Need to extend)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.IsSequenceBond">
            <summary>
            Return true if this is a bond between two sequences
            More specifically, it'll return true if either end atom is attachment point of sequence abbreviation
            and it's not from cross attachment point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.RemoveProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary> Override node's method
            It cares if removed property is STEREO.
            If so, check if any children atoms have StereoGroup.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.SetIntegerProperty(MDL.Draw.Nodes.NodeProperty,System.Int32)">
            <summary> Override Node's method
            It cares if property was wedge bond.
            If so, check if any children atoms have StereoGroup.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.Swap(System.Boolean,System.Boolean)">
            <summary>Swaps atom	#0 and atom	#1.
            </summary>
            <param name="bStereoSwap">Swaps	the	stereocenters also</param>
            <param name="bCheckBondCount">checks if	bondcount of the 2 atoms are in	the	right order	first.
            If not,	the	swap proceeds, otherwise we	exit. We need to swap atoms	since first	atom becomes the stereoCenter
            This way, we alway put stereocenter	into the atom with more	bonds 
            </param>
            <returns>true if atom0 and atom1 could be found, and swap actually occurred. 
            false otherwise.</returns>
            <remarks>Original comment from BondTool.cs:	
            010401 fan - new way to	do the swap	so that	undo works.
            was only changing elements of atoms	vector. Also picks up several rounds of	bugfixes.</remarks>
        </member>
        <member name="M:MDL.Draw.Chemistry.Bond.WriteCTv2(MDL.Draw.Chemistry.Bond,System.Collections.Hashtable,System.String)">
            <summary>
            Returns CT Format V2000 bond property line string
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Bond.Crossed">
            <summary>
            if crossed is true, the bond will be broken where it intersects other bonds.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Bond.Order">
            <summary> Get or set  the bond order.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Bond.HasZeroLength">
            <summary>
            return true if both atoms at same coordinates.
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.Bond.BondTypeEnum">
            <summary>
            Definitions of the bond types used in MDL Mol files.
            KLUDGE -
            from ISIS, I changed these to our xx_OR_AROMATIC because that makes
            our renderer do what ISIS's does could be just TYPO in isis's constant names ???
            beilstein specific DOUBLE_OR_TRIPLE 
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.Bond.StereoBondTypeEnum">
            <summary>
            Definitions of bond stereo values. 
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.Bond.BondReactionTopologyEnum">
            <summary>Bond reaction changes topology 
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.Bond.RingBondTypeEnum">
            <summary>Ring Bond Types  </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Chiral.OTYPE">
            Chiral Flag 
        </member>
        <member name="T:MDL.Draw.Chemistry.Collection">
            <summary> Collection </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Collection.OTYPE">
            <summary>Collection object (Node)  </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.Edit">
            <summary> Edit
            This class provides a set of static methods for editing molecular
            structures.  This class is where all methods used for editing a
            structure should end up.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.Regularize(MDL.Draw.Chemistry.Molecule)">
            <summary> Regularize the geometry of the passed molecule.
            The atoms of the molecule are forced to lie on a hexagonal grid
            where approrpriate.
            </summary>
            <param name="mol">The molecule whose geometry is to be regularised.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.CoerceToHexagonalGrid(MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,System.Double,System.Double)">
            <summary> Coerce the coordinates of this atom to lie on a hexagonal grid
            defined by xOrigin, yOrigin and modeBondLength.
            
            </summary>
            <param name="a">The atom whose coordinates are to be coerced.
            </param>
            <param name="origin">The origin of the hexagonal grid.
            </param>
            <param name="modeBondLength">The length used for the lines on the
            hexagonal grid.
            </param>
            <param name="snapTolerance">The tolerance for snapping as a fraction of
            the average bond length.
            
            </param>
        </member>
        <member name="F:MDL.Draw.Chemistry.Edit.sixtyDegrees">
            <summary>Precalculate sixty degrees. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Edit.sin60">
            <summary>Precalculate sin(60.0) 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Edit.hexagonWidth">
            <summary>Width of a hexagon (between the vertical lines). 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.AtomLiesOnVerticalGrid(MDL.Draw.Chemistry.Atom,System.Double)">
            <summary> Figure out if an atom wants to be aligned on a vertical or horizontal
            hexagonal grid.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.GenerateRingCenterDirection(MDL.Draw.Chemistry.Bond)">
            <summary> Generate a vector that shows which side of a bond a ring
            should be added.
            *
            </summary>
            <param name="bond">The bond for which the direction is to be calculated.
            </param>
            <returns>The direction the ring center should be placed or
            null if there is not a sensible position for the ring center.
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.AddAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Fragment)">
            <summary> Create an atom as a child of the specified molecule and fragment.
            If fragment == null, then a fragment will be created.
            </summary>
            <author> jbo
            </author>
            <version> 4-7-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.AddAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Fragment,MDL.Draw.Utils.Point3d)">
            <summary> Create an atom as a child of the specified molecule with
            coordinates.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.AddBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom)">
            <summary> Create a bond as a child of the specified molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.AddBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum)">
            <summary> Create a bond as a child of the specified molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.AddBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Chemistry.Bond.StereoBondTypeEnum)">
            <summary> Create a bond as a child of the specified molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Edit.#ctor">
            <summary> Unused constructor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.MDL3D_TWO_POINT_DISTANCE_LINE">
            <summary> Constants to identify the types in the file format.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.OTYPE">
            <summary>3d pharmacophore feature (Chemical Object Type) 	
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.DefineD_FLAG">
            <summary> Feature3D Defined flag 	
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.Feature3DColors">
            <summary> Array of color names.
            
            These should correspond to the colors used by Draw. 
            Confirmed with ISIS Draw 2.5 SP1
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.COLOR_3D">
            <summary>Feature3D color integer 	
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.TYPE">
            <summary> Feature3D type integer 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.NAME">
            <summary> Feature3D name string
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.DISTANCE">
            <summary>* Feature3D distance double
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.MINIMUM_DISTANCE">
            <summary> Feature3D minimum distance double in Angstroms
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.MAXIMUM_DISTANCE">
            <summary> Feature3D maximum distance double in Angstroms
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.RADIUS">
            <summary> Feature3D radius double 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.MINIMUM_ANGLE">
            <summary> Feature3D minimum angle double 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.MAXIMUM_ANGLE">
            <summary> Feature3D maximum angle double 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.DEVIATION">
            <summary> Feature3D deviation double 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.EXCLUSION_SPHERE_ALLOWED_ATOMS">
            <summary> Feature3D Exclusion Sphere Allowed Atoms List 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.IGNORE_UNCONNECTED_ATOMS">
            <summary>
            1 or 0. 1 means unconnected atoms are ignored within the exclusion sphere during a search. 0 otherwise.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.PNTDIR">
            <summary> point has direction if 1.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.ANGDIR">
            <summary> Dihedral angle has direction if 1.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.QUERY">
            <summary> Feature3D atom query string
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.MARKER">
            <summary>* Feature3D distance double
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.EXCLUS_DRADIUS">
            <summary>* Feature3D display radius for an exclusion sphere
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.POINT_DDISTANCE">
            <summary>* Feature3D display distance
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.CONSTRAINT">
            <summary> Data constraint
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.COMMENT">
            <summary> comment
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.xyz">
            <summary>Coordinate of normal or point feature object. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3D.o">
            <summary>Origin for lines. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.#ctor(System.Int32)">
            <summary> Constructor that allows specification of the feature type.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.GetBasisObjectCoordinate(System.Int32)">
            <summary> Return the coordinate of the specified basis object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.GetBasisObject(System.Int32)">
            <summary> Return the vector of basis objects.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.GetFeature(System.Int32)">
            <summary> Return the feature that is associated with the specified basis object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.GetAtom(System.Int32)">
            <summary> Return the atom that is associated with the specified basis object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.getAllRelatedAtoms">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.AllBasisObjectsDefined">
            <summary> Are all of this features basis objects Defined?
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineCoordinate">
            <summary> Define the coordinate of this feature.
            *
            This can only be done if all of the basis objects for this
            feature are already Defined.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineFeatures(System.Collections.ArrayList)">
            <summary> Iterate through all of the features until they are all Defined.
            *
            Stop when no more features are Defined on a particular iteration.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.MarkFeaturesAsNotDefined(System.Collections.ArrayList)">
            <summary> Mark all features as not having been Defined.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.FindFeatureCentroid">
            <summary> Calculate the centroid of the objects in a feature.
            Return the centroid of the feature.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineTwoPlaneAngle">
            <summary> Define a feature that represents the angle between two planes.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineBestFitLine">
            <summary> Define a feature that represents a best fit line.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineTwoPointDistance">
            <summary> Define a feature Defined in terms of two points and a range.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineExclusionSphere">
            <summary> Define an exclusion sphere.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefineCentroid">
            <summary> Define a centroid 3d feature.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefinePlane">
            <summary> Define a plane 3d feature.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.DefinePointNormalDistnace">
            <summary> Define a feature that represents a point Defined by a point,
            a normal line and a distance.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.GetCoordinate(MDL.Draw.Chemistry.ChemObject)">
            <summary>Return the coordinate of this basis object. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.CoordinateDefined(MDL.Draw.Chemistry.ChemObject)">
            <summary> Does the specified basis object have a Defined coordinate.
            *
            Atoms always have Defined coordinates.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Feature3D.GetColor">
            <summary> Return the color of this object on the basis of its colorNum variable.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Feature3D.BasisObjectCount">
            <summary> Return the number of basis objects that this feature contains.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Feature3D.IsDefined">
            <summary> Is the coordinate of this feature Defined?
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Feature3DBasisObject.OTYPE">
            <summary>3d pharmacophore feature basis object (Chemical Object Type) 
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IStructureHandle">
            <summary>This interface is provided as a convenient way to get and set a handle to a structure.
            You can pass this handle to another method or property that accepts it as a parameter.
            See <c>StructureConverter.StructureHandle</c>, <c>HeadlessRenderer.PaintMolecule</c>, and 
            <c>HeadlessRenderer.SaveMoleculeAsImage</c>.
            Do not implement this interface except for this limited purpose.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.DebugLocal">
            <summary>debug flag 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.OTYPE">
            Molecule (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.FILENAME">
            original filename of molecule 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.SOURCEOFINFO">
            Molecule info source (molfile, smiles, etc.) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.NAME">
            Molecule Name 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.PSEUDOATOMCODE">
            3-letter code used for psuedo atom name encoding 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.ABBREVIATIONREPRESENTATIONTYPE">
            lchen, Jan. 4, 2006: Abbreviaton's representation type: = STARATOM, or PSEUDOATOM, or FULLCTAB 
            (full connection table).
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.SUPERATOMNAME">
            Main abbreviation's text name that can be used for whole template's display name 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.V3CTAB_NAME">
            V3000 CTAB name 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.INITITIAL">
            User Initial (from file source) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.ORIGIN">
            Molecule origin (from file source) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.COMMENTS">
            Molecule comments (from file source) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.VERSION">
            Molecule file version info (from file source) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.DATE_STRING">
            Molecule object file date info as string 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.REGNO">
            Molecule object file registry number intger 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.COMPONENT_NUM">
            Molecule component number (rxn/rgfiles) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.RGROUP_NUM">
            Molecule object rgroup number (rgfiles) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.DIMENSIONAL_CODE">
            Molecule object dimensional code (2D or 3D) (from molfile) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.ALIGNEDBONDS_FLAG">
            Molecule object 'already aligned bonds' flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.RGROUP_LABELS_PRESENT_FLAG">
            <summary>
            Molecule object 'rgroup labels present' flag
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.MULTICOMPONENT_COMPOUNDS">
            <summary>
            Molecule object:  Query Option for multicomponent compound boolean
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.RING_CLOSURE">
            Molecule object:  Query Option for ring closure through substitution boolean 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.ISOTOPES">
            Molecule object:  Query Option for isotopes boolean 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.CHARGES">
            Molecule object:  Query Option for charges boolean 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.RADICALS">
            Molecule object:  Query Option for radicals boolean 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.SUBSTITUTION_ASDRAWN">
            Molecule object:  Query Option for implicit free sites boolean (substitution as drawn) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.TAUTOMERS">
            Molecule object:  Query Option for tautomers boolean 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.SEPARATE_FRAGMENTS">
            Molecule object:  Query Option for separate fragments (components) boolean 
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.STEREO_SEARCH">
            Molecule object:  Query Option for stereo search setting (integer) 
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.doubletoint(System.Double)">
            <summary>
            convert double to int with no overflow and no exception.
            if double bigger than maxint, returns maxint
            if double smaller than minint, returns minint
            </summary>
            <param name="d">the double value to convert</param>
            <returns>converted value</returns>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.redrawAll">
            <summary>if this flag is set then EVERYTHING is redrawn when addMolecule() is called 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.ChildrenArray">
            <remarks/>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.Relation">
            <remarks/>
        </member>
        <member name="F:MDL.Draw.Chemistry.Molecule.bondVector">
            <summary>Subclasses should override this if they have any
            special code which needs to be executed BEFORE a ROOT
            level object is SERIALIZED or UNSERIALIZED
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAtomWithin(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Find the nearest atom to a point within a certain distance.
            *
            Return the atom or null if there is no atom with that distance.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAtomWithin2D(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Find the nearest atom to a point within a certain distance.
            *
            Return the atom or null if there is no atom with that distance.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestRingWithin(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Find the nearest ring to a point within a certain distance.
            *
            Return the ring or null if there is no ring with that distance.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAtom(MDL.Draw.Chemistry.Atom)">
            <summary> Find the nearest atom to the passed atom.
            NOTE:  Will not return the atom entered as the parameter.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAtom(MDL.Draw.Utils.Point3d)">
            <summary> Find the nearest atom the the passed point.
            *
            Don't check an atom that has the same Point3d object
            for it's coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAbbreviationWithin(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Find the nearest abbreviation to a point within a certain distance.
            *
            Return the abbreviation or null if there is no abbreviation with that distance.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAbbreviation(MDL.Draw.Utils.Point3d)">
            <summary> Find the nearest abbreviation of given type
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestAtom2D(MDL.Draw.Utils.Point3d)">
            <summary> Find the nearest atom the the passed point.
            *
            Don't check an atom that has the same Point3d object
            for it's coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindNearestRing(MDL.Draw.Utils.Point3d)">
            <summary> Find the nearest ring the the passed point.
            *
            Don't check an ring that has the same Point3d object
            for it's coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetSproutPositions(MDL.Draw.Chemistry.Atom,System.Double,System.Int32,System.Double)">
            <summary> Generate a set of sprout positions. If a sprout position lies near
            an existing atom it is not returned.
            </summary>
            <param name="a"> an atom
            </param>
            <param name="bondLength">the bondlength that will be used to generate the
            positions.
            </param>
            <param name="divisions">how many divisions to generate the sprout positions on
            </param>
            <param name="tolerance"> </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetBestSproutPosition(MDL.Draw.Chemistry.Atom,System.Double)">
            <summary> Generate the best sprout position (trying to mimick template sprouting in Draw).
            *
            </summary>
            <param name="a">The atom from which the bond will be sprouted.
            </param>
            <param name="bondLength">the bondlength that will be used to generate the position.
            NOTE:  Revised on 4/26/02 to make all sprout positions scaled to bondLength iff bondLength > 0
            </param>
            <author> jbo
            </author>
            <version> 11-16-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.AddBond(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Chemistry.Bond.StereoBondTypeEnum)">
            <summary>
            Add a bond between the two atoms using the bond order and stereo
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="bondOrder"></param>
            <param name="stereo"></param>
            <returns>Newly created bond</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.AddBond(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum)">
            <summary> Create a new bond (only if the bond doesn't already exist).
            Set up all of the parent child relationships
            If the bond already exists then this is returned.
            If the atoms are part of two different fragments, then the fragments
            will be automatically merged.  jbo
            If the atom a is part of a fragment, then the bond will be added to the 
            fragment as well.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.AddAtom(System.Int32)">
            <summary> Add an atom of the specified type to the molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GenerateFusionRingPoints(MDL.Draw.Chemistry.Bond,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Double,System.Int32)">
            <summary> Return a Vector of atoms that make a ring of the specified size
            joining with the bond.
            *
            If ringCenter is non-null put the ring center coordinates in there.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ringContains(MDL.Draw.Chemistry.Atom[],MDL.Draw.Chemistry.Atom,System.Int32)">
            <summary>
            checks whether the ring contains a specified atom
            </summary>
            <param name="ring">ring to check</param>
            <param name="testatom">Atom to check for in the ring</param>
            <param name="depth">how deep to go</param>
            <returns><c>true</c> if the testatom is in the ring.</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.PropagateRing(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom[],MDL.Draw.Chemistry.Bond[],System.Int32,System.Int32)">
            <summary> Propagate the search for rings through the molecule. </summary>
            <param name="a">atom where the search started</param>
            <param name="current">current atom in the search</param>
            <param name="ring">atoms in path of this ring</param>
            <param name="ringBonds">bonds in path of this ring</param>
            <param name="depth">current depth in search tree</param>
            <param name="maxDepth">depth at which to terminate search</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindRings">
            <summary> Find the rings in the molecule according to whatever preferences
            have been set.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindRings(System.Int32,System.Int32)">
            <summary>Finds rings in a range of sizes, as specified.  All existing 
            Ring.OTYPE objects in molecule are destroyed, and then
            recreated during the ring finding routines.  
            </summary>
            <param name="startSize">minimum ring size to find
            </param>
            <param name="stopSize"> max ring size to find.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.MakeRingsAromatic">
            <summary> Goes through the molecule and finds all aromatic ring systems 
            and makes them aromatic.  NOTE:  Assumes that findRings() has
            been called before this method is called. 
            </summary>
            <returns>true if there are any aromatic rings found
            </returns>
            <author> jbo 
            </author>
            <version> 6-20-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.MoleculeContainsRing(MDL.Draw.Chemistry.Atom[],MDL.Draw.Chemistry.Bond[],System.Int32)">
            <summary> Does the molecules ring child list already include this ring.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.Kekulize(System.Collections.ArrayList,MDL.Draw.Chemistry.Bond)">
            <summary> kekulizes the rings, and does not modify any old aromatic rings.
            Basically tries to keep everything we've accomplished the way it was.
            An attempt to replace the old kekulize() method (below)
            </summary>
            <param name="rings">A ArrayList of rings 
            </param>
            <param name="startBond">A joining bond for the two ring structures
            </param>
            <author> jk
            </author>
            <version> 6-28-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetOtherRingContainingBond(System.Collections.ArrayList,MDL.Draw.Chemistry.Bond)">
            <summary> Returns a ring that contains bond b that isn't one of the rings in the input vector
            or null if it doesn't find one.
            </summary>
            <author> jbo
            NOTE from jk if we don't want to create a new hashtable each time, we can just make a private static one and use the clear() method.
            private static Hashtable table = new Hashtable( 19 );
            
            </author>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.AlignBonds(System.Boolean)">
            <summary> Force near horizontal/vertical bond to be horizontal/vertical.
            *
            Extremely simple minded, but effective for a number of cases
            in particular estradiol in the test molecule set.
            *
            Check if the horizontal or vertical coordinate difference is
            less than some threshold (bondAlignmentTolerance). If it is
            and one of the atoms has less than 4 bonds then copy the
            coordinate of the other atom.
            </summary>
            <param name="forceFlag">: if true, force align. if false, align only if the ALIGNEDBONDS_FLAG says so.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetObjectIndex(MDL.Draw.Chemistry.ChemObject)">
            <summary>
            it returns index of chemObj from its in-memory children vectors.
            NOTE:It may be the same id number as the atom/bond/sgroup id from molfile if the molecule is NOT reaction or generic or ferrocene-type structure.
            </summary>
            <param name="chemObj"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindRgroupNumber(System.Int32)">
            <summary> Figure out if the moleclue contains the specified rgroup.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.CreateRgroup(System.Int32,System.Int32)">
            <summary> Creates an Rgroup definition.
            </summary>
            <param name="rgroupNumber">The rgroup number (e.g. R1, R2, etc.)
            </param>
            <param name="attachmentCount">The number of attachment points that members of Rgroup should have.
            </param>
            <author> jbo
            </author>
            <version> 12-08-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetRgroup(System.Int32)">
            <summary> Gets the Rgroup Definitions with the given number value.
            </summary>
            <author> jbo
            </author>
            <version> 01-18-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.IsRgroupDefined(System.Int32)">
            <summary> Returns true if an Rgroup has already been defined for the given rgroupnum 
            -- else false.
            </summary>
            <author> jbo
            </author>
            <version> 12-08-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.IsRgroupAtomDefined(System.Int32)">
            <summary> Returns true if any atom with this rgroup number is defined
            -- else false.
            </summary>
            <author> ymk
            </author>
            <version> 09-05-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.HasRgroupMember">
            <summary> Returns   true if this molecule has any Rgroup member defined
            false otherwise
            </summary>
            <author> ymk
            </author>
            <version> 02-23-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetCollection(System.String,System.String)">
            <summary> Gets the Coolection Definitions with the given name and subname.
            </summary>
            <author> ymk
            </author>
            <version> 04-02-04
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetCollections(System.String,System.String)">
            <summary> Gets the Collections with the given name and subname.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.RemoveCollection(System.String,System.String)">
            <summary> Remove the Coolection Definitions with the given name and subname that starts with the given subname.
            </summary>
            <author> ymk
            </author>
            <version> 04-02-04
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.AddFragment(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Fragment)">
            <summary> Adds a fragment to the molecule without fusion of overlapping
            atoms.  To fuse overlapping atoms call FuseMolecule(Molecule,tolerance. fusedAtoms);
            *
            </summary>
            <author> jbo
            </author>
            <version> 11-19-99
            </version>
            <deprecated>
            
            </deprecated>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FuseMolecule(System.Collections.ArrayList,System.Double,System.Collections.ArrayList)">
            <summary> Given a molecule that has already been added using AddFragment()
            or addTemplate(), method fuses the atoms in the added molecule
            so that this.molecule's atoms and bonds are replaced by atoms and
            bonds from the added molecules (if the added atoms are &lt; cutoff).
            NOTE:  Bonds with higher bond orders are not replaced by bonds with
            lower bond orders.
            </summary>
            <param name="tolerance">The max distance that atoms must lie from each other
            in order for the algorithm to fuse the atoms.
            NOTE:  If tolerance &lt; 0.0, then
            tolerance = averageBondLength / 10.0
            </param>
            <param name="fusedAtoms">Vector of fusion point atoms. They are replaced if corresponding
            overlap pair wins and survive. Passed as null if don't need to do that.
            </param>
            <param name="templateAtoms"></param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FuseMolecule(System.Collections.ArrayList,System.Double,System.Collections.ArrayList,System.Boolean,MDL.Draw.Chemistry.Atom)">
            <summary> Given a molecule that has already been added using AddFragment()
            or addTemplate(), method fuses the atoms in the added molecule
            so that this.molecule's atoms and bonds are replaced by atoms and
            bonds from the added molecules (if the added atoms are &lt; cutoff).
            NOTE:  Bonds with higher bond orders are not replaced by bonds with
            lower bond orders.
            </summary>
            <param name="templateAtoms"></param>
            <param name="tolerance">The max distance that atoms must lie from each other
            in order for the algorithm to fuse the atoms.
            NOTE:  If tolerance &lt; 0.0, then
            tolerance = averageBondLength / 10.0</param>
            <param name="fusedAtoms">Vector of fusion point atoms. They are replaced if corresponding
            overlap pair wins and survive. Passed as null if don't need to do that.</param>
            <param name="fuseToContractedAbbrev">Fuse with atoms in contracted abbreviation if true. 
            We don't want to fuse if it's from user's translating the structure. 
            We'll fuse in every other cases.
            </param>
            <param name="fuseAtom"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.SetAbbrevName">
            <summary>
            If all atoms in this molecule belongs to a single abbreviation, get/set the molecule's name from the abbreviation name.
            NOTE:When this molecule is something created for drag/drop (for example), this molecule would not have the sgroup children.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.AddMolecule(MDL.Draw.Chemistry.Molecule,System.Boolean,System.Boolean)">
            <summary> Adds the given TEMPLATE molecule without atom and bond fusion.
            NOTE:  Can't assume that template is an Molecule with a fragment child.
            It could be a fragment.
            </summary>
            <param name="template">template to add</param>
            <param name="removeOriginalMol">if true, remove children of the template from the template</param>
            <param name="copyMol">if true, copy returning molecule so that original structure is not modifide during PerceiveFragments.</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.Translate(System.Double,System.Double)">
            <summary> Translate all the atoms in the molecule.
            </summary>
            <param name="dx">The x increment to add to the atoms.
            </param>
            <param name="dy">The y increment to add to the atoms.
            </param>
            <author> jbo
            </author>
            <version> 11-11-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Rotate the atoms in the molecule.
            *
            This will go through molecule atoms and Rotate them
            within the XY plane around the centerOfRotation.  
            </summary>
            <param name="centerOfRotation">The point about which the molecule is rotated.
            </param>
            <param name="theta">The angle of rotation in radians.
            </param>
            <author> jbo
            </author>
            <version> 11-11-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.Scale(System.Double)">
            <summary> Scale the molecule so that the first bond in the molecule is
            scaled to scaleTo.
            NOTE:  Currently does 2d scaling (in x and y dimension).KLUDGE!!!
            </summary>
            <author> jbo
            </author>
            <version> 11-22-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.Scale(MDL.Draw.Chemistry.Bond,System.Double)">
            <summary> Scale the molecule so that the given bond is scaled to scaleTo.
            NOTE:  Currently does 2d scaling (in x and y dimension).KLUDGE!!!
            </summary>
            <author> jbo
            </author>
            <version> 11-22-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ScaleModeBondLengthTo(System.Double)">
            <summary> scale the molecule so that the mode BondLength will be set to newBondLength
            after the scaling
            </summary>
            <author> fan
            </author>
            <version> 4-5-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ScaleAverageBondLengthTo(System.Double)">
            <summary> scale the molecule so that the average BondLength will be set to newBondLength
            after the scaling
            </summary>
            <author> fan
            </author>
            <version> 4-5-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ScaleFragmentModeBondLengthTo(System.Double,System.Double,System.Double)">
            <summary>
            Scale each fragment individually and each mode bond length to the newBondLength.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ValenceCheck(System.Boolean)">
            <summary> Checks to see if the valences of the atoms in the molecule have been
            exceeded.  If autoCorrect == true then then bond orders will be reduced
            in an attempt to correct the problem.  If they can't be reduced enough or 
            if autoCorrect == false and an atom's valence has been exceeded, then the
            method will return false.
            </summary>
            <author> jbo
            </author>
            <version> 5-1-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.SetAttachmentPoints">
            <summary>
            Set first atom and first bond as AttachmentPoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.IsChiralFlagSet(MDL.Draw.Chemistry.Fragment)">
            <summary> Gets Vector of Stereo center atoms from this molecule
            </summary>
            <author> ymk
            </author>
            <version> 05-21-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.IsRacemicMolecule">
            * Sets the chiral flag based on whether all stereocenters are 
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.IsRxnWithRgroupDef">
            <summary> This returns true if this molecule is a reaction and also include rgroup definition.
            false otherwise
            </summary>
            <author> ymk
            </author>
            <version> 04-16-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.isNoStructure">
            <summary> return true if this molecule has no atoms and noStructure
            false otherwise
            </summary>
            <returns>boolean this molecule has no atoms and noStructure
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.DoIsolation">
            <summary>
            Shape Molecule to be able to be serialized into xml. Needs to be called before the molecule is serialized.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ReverseIsolation">
            <summary>
            Needs to be called after the molecule is deserialized from xml. Reads ChildrenArray and remakes the
            parent-child relationship.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.BiopolymerToSubsequenceQuery">
             <summary>
             
            1.	Delete explicit hydrogen non-terminal leaving groups 
                 on sequence residues. (Explicit hydrogen only).
            2.	Delete terminal leaving groups on sequence residues.
            3.	Apply Substitution as drawn (s*) query feature to a 
                 collection of atoms. For sequences, the collection 
                 should include every non-hydrogen atom in the sequence, 
                 except:
                   •	Residues that contain query features.  The presence 
                   of query features implies that the user added them, 
                   so we don’t want to override their changes.
                   •	Residues that are “IsQueryOnly”, such as the 
                   “Any” amino acid residue. 
                   •	Residues that use a condensed representation 
                   (*atom or pseudoatom) instead of the full connection 
                   table.
             </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.GetConnectedPartOfAtoms(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Sgroup)">
            <summary> selectedAtom is one of either atom of pickedBond
            find all atoms on that part of the pickedBond(It does not include the other atom of the picked bond)
            NOTE:if pickedBond is a ring bond, it'll return whole fragment's atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindRingBonds(MDL.Draw.Chemistry.Molecule)">
            <summary> Remove MTRingBonds. We will interprete deferently in molfile writing
            </summary>
            <author> ymk
            </author>
            <version> 12-14-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.ConvertRingBond(MDL.Draw.Chemistry.IO.MoleculePrefs)">
            
            <summary> RingBond of type "Inorganic" will be omitted and each atom of the ring will have radical
            RingBond of type "Markush" will be translated to a Rgroup which will be added to each atom of the ring
            </summary>
            <author> ymk
            </author>
            <version> 12-14-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Molecule.FindConnectedAtom(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond)">
            <summary> copied from the RotationFlipTool's getSelectedPartOfAtoms()
            find all atoms connected to the given atom
            Don't include ringBond since it's going to be destroyed
            NOTE:if pickedBond is a ring bond, it'll return whole fragment's atoms.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.HasBondWithZeroLength">
            <summary>
            returns true if at least one bond has zero length (both atoms at same coordinates)
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.AllBondsWithZeroLength">
            <summary>
            returns true if all bonds have zero length (both atoms at same coordinates)
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.AverageBondLength">
            <summary> Calculate the average bond length of the molecule.
            This is used to make geometrical calculations independent of
            the units used for atomic coordinates.
            NOTE: Returns 0 if there are no bonds.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.ScaleLabelsToBondLength">
            <summary>
            Toggles behavior on drawing of Chemical Text during AddMolecule
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.ModeBondLength">
            <summary> Calculate the mode bond length of the molecule.
            This is used to make geometrical calculations independent of
            the units used for atomic coordinates.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.MedianBondLength">
            <summary> Calculate the median bond length of the molecule.
            This is used to make geometrical calculations independent of
            the units used for atomic coordinates.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.ModeBondLengthWithoutAbbreviations">
            <summary> Calculate the mode bond length of the molecule.
            This is used to make geometrical calculations independent of
            the units used for atomic coordinates and omits the bonds attached to abbreviations
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.MedianBondLengthWithoutAbbreviations">
            <summary> Calculate the median bond length of the molecule.
            This is used to make geometrical calculations independent of
            the units used for atomic coordinates and omits the bonds attached to abbreviations
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.Rgroups">
            <summary> Gets an ArrayList of Rgroup Definitions ("R1 = " or "R2 = ", etc.) within the molecule.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.HighlightChildren">
             <summary>get/set highlight children.
             set: Parses a host highlight string info atom/bond highlight arrays
             get : Returns a highlightinfo string.
            
             highlightInfoString is a string of the form:
             "&lt;atomno1>,&lt;atomno2&gt;,...,&lt;atomnoN&gt;;&lt;bondno1&gt;,&lt;bondno2&gt;,...&lt;bondnoN&gt;"
             that is, a pair of comma-separated lists of integers specifying the
             atoms and bonds that should be highlighted as matching the query.
              jbo. Taken from tim's MoleculeRenderFactory.setHighlightInfo (original provided by RayC)
             </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.MolfileString">
            <summary>
            It generates molfile string of this molecule.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.ChemicalCenter">
            <summary> Calculate the coordinate center of the chemistry part of the mol.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.Center">
            <summary> Calculate the coordinate center of the mol.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Molecule.Center1">
            <summary> Calculate the coordinate center of the mol.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Fragment.OTYPE">
            <summary>/** Fragment (Chemical Object Type) */</summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Fragment.CANVASBOUNDINGBOX">
            <summary>/** Fragment Info - fragment canvas obj bbox */</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.Translate(System.Double,System.Double)">
            <summary> Implement fragment translation.
            *
            This will recursively search through fragment children
            and Translate them.  Fragments that don't contain other fragments
            will tranlsate their atoms (and sgroups?).
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Rotate the fragment.
            *
            This will recursively search through fragment children
            and rotate them within the XY plane around the centerOfRotation.  
            Fragments that don't contain other fragments
            will tranlsate their atoms (and sgroups?).
            </summary>
            <param name="centerOfRotation">The point about which the fragment is rotated.
            </param>
            <param name="theta">The angle of rotation in radians.
            </param>
            <author> jbo
            </author>
            <version> 11-11-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.Destroy">
            <summary> Override destroy() method.
            *
            If a fragment is destroyed it needs to kill all of its children.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.DestroyOnly">
            <summary> This method doesn't kill its children. Destroys itself only
            </summary>
            <author> ymk
            </author>
            <version> 02-04-03
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.PerceiveFragments(MDL.Draw.Chemistry.Molecule)">
            <summary> Perceive the fragments in a molecule.
            *
            Experiment with using a Hashtable to store the visit state of
            the atoms.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.PropagateFragmentSearch(MDL.Draw.Chemistry.Atom,MDL.Draw.Nodes.Node,System.Collections.Hashtable,MDL.Draw.Chemistry.Molecule)">
            <summary> Method to propagate the search for fragments.
            </summary>
            <param name="atom">The current atom in the search.
            </param>
            <param name="fragment">The current fragment to which atoms are added.
            </param>
            <param name="visited">The MTHashtable which is storing visit information.
            </param>
            <param name="molecule">current molecule
            </param>
            <returns>The number of atoms added to the object. 
            </returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.GetAtomCoordinateCenter(MDL.Draw.Chemistry.ChemObject)">
            <summary> Calculate the coordinate center of the atoms that are in the
            passed object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.HasRgroupNumber(System.Int32)">
            <summary> Figure out if the moleclue contains the specified rgroup.
            </summary>
            <author> jbo
            </author>
            <version> 1-22-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.AddFragment(MDL.Draw.Chemistry.Fragment)">
            <summary> Merges the given fragment into this fragment.
            <pre>
            molecule                    molecule  
            /         \       merge         |   
            this       frag2    --->         this
            /  |  \     /  |  \            / / /  \ \ \
            a1 a2  b1   a3  a4  b2        a1 a2 a3 a4 b1 b2
            
            OR
            *
            mol1        mol2                 mol1            mol2
            |           |     merge          |               |
            this       frag2    --->         this
            /  |  \     /  |  \            / / /  \ \ \
            a1 a2  b1   a3  a4  b2        a1 a2 a3 a4 b1 b2
            
            </pre>
            *
            NOTE:  If the frag is a child of a different molecule, then the
            children of the fragment will be moved from that molecule
            to the parent molecule of this fragment.
            </summary>
            <param name="frag"> The fragment to merge into this fragment.
            </param>
            <author> jbo
            </author>
            <version> 4-4-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Fragment.CleanSuperSgroup(MDL.Draw.Chemistry.Fragment)">
            <summary> See if any atoms in the new fragment is  children of super sgroup.
            If so, decide the superSgroup's parent fragment
            If all the sgroup's atom is in the new Fragment, move the sgroup to the new Fragment.
            If not all ot the atoms in the new Fragment, remove these atoms from the sgroup.
            </summary>
            <author> ymk
            </author>
            <version> 10-30-01
            
            </version>
        </member>
        <member name="P:MDL.Draw.Chemistry.Fragment.ChemicalCenter">
            <summary> Calculate the coordinate center of the chemistry part of the mol.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Fragment.MolfileString">
            <summary>
            It generates molfile string of this fragment
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.FragmentGroup">
            <summary>
            only for identification 
             this class used for Group/Ungroup operations
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.FragmentGroup.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Override the default behaviour of Node.
            If it losing child leaves this object only one child, return true and die.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.FragmentGroup.GetObjectListFromSelection(System.Collections.ArrayList)">
            <summary>
            In MDLDraw we have 2 types of container-objects: 
            FragmentGroup -- could include unlimited set of any objects
            Fragment -- include only object with defined types, does not 
                        support nesting        
                        
            this method is designed to simplify translate/rotate/resize etc. 
            operations with hierachicaly related objects. So if we have 
            Parent and Child in selection, than entrance of the Child is 
            redundant, and we adds only Parent into returned array.
            </summary>
            <param name="selection"> array of objects</param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Chemistry.HighlightInfo">
            <summary> HighlightInfo </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.HighlightInfo.OTYPE">
            <summary>Highlight info object (Node)  </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.HighlightInfo.COLOR">
            <summary>Highlight Info - A string (either simple color name E.g. "red" or 
            RGB string e.g. "#FF00FF") to use to draw children of OBJECTTYPE_HIGHLIGHTINFO object 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.HighlightInfo.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Override the default behaviour of MTObject.
            If a highlighinfo loses all its children it goes.
            </summary>
        </member>
        <member name="F:MDL.Draw.CheshireAccess.SyncRootInstance">
            <summary>
            use this object for synchronized operations
            </summary>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.GetCheshireAccess">
            <summary>
            returns a new cheshireaccess instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.#ctor">
            <summary>
            to get an instance use the GetChesireInstance method
            </summary>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.calcStructure(System.String,MDL.Draw.Chemistry.Molecule,System.String@)">
            <summary>
            runs some calculation with cheshire.
            runs the script provided on a molecule and returns the result in scriptresult.
            returns true if script succeeded, false if it failed.
            </summary>
            <param name="script">the script to run</param>
            <param name="mol">the strcutre to run the script on</param>
            <param name="scriptResult">result of running the script</param>
            <returns>true if script ran successfully.</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.calcStructure(System.String,System.String,System.String@)">
            <summary>
            runs some calculation with cheshire.
            runs the script provided on a molecule and returns the result in scriptresult.
            returns true if script succeeded, false if it failed.
            </summary>
            <param name="script"></param>
            <param name="ctfile">molfilestring representing the structure to run the script on</param>
            <param name="scriptResult">result of the script.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.modStructure(System.String,MDL.Draw.Chemistry.Molecule@)">
            <summary>
            runs the provided cheshire script on a structure.
            a NEW structure is returned.
            </summary>
            <param name="script">script to run</param>
            <param name="mol">the structure to run the script on and the structure returned</param>
            <returns>true if script ran successfully</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.modStructure(System.String,System.String@)">
            <summary>
            run the provided cheshire script on a structure.
            </summary>
            <param name="script">script to run</param>
            <param name="ctfile">molfile string representing the structure</param>
            <returns>true if script ran successfully.</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.SetTarget(System.String)">
            <summary>
            sets the target in cheshire
            </summary>
            <param name="s">starget to set, usually a molfile</param>
            <returns>true is successful</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.SetTarget(MDL.Draw.Chemistry.Molecule)">
            <summary>
            sets the molecule as target in cheshire
            </summary>
            <param name="mol">structure to set as target</param>
            <returns>true is successful</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.GetTarget">
            <summary>
            returns the target.
            </summary>
            <returns>the target or null if there is no valid target or error.</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.GetTargetAsMolecule">
            <summary>
            returns the target as a structure.
            </summary>
            <returns>structure representing the target or null is invalid.</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.SetVariable(System.String,System.String)">
            <summary>
            sets some data as  named variable in cheshire.Data type will be set to undefined so chshire can autodetect.
            The data is a molfile or rxn file. if you want to set a string, you should use the SetStringVariable instead.</summary>
            <param name="vname">name of the variable</param>
            <param name="data">data to set</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.SetVariable(System.String,MDL.Draw.Chemistry.Molecule)">
            <summary>
            sets some data as named variable in cheshire. data type is set to undefined so cheshire can autodetect.
            </summary>
            <param name="vname">name of variable</param>
            <param name="mol">structure that contains the data.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.GetVariable(System.String)">
            <summary>
            returns the data stored in a variable.
            </summary>
            <param name="vname">name of data</param>
            <returns>data value as string</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.GetVariableAsObject(System.String)">
            <summary>
            get a variable from cheshire.
            returns an object, not necessarily a string. if you want a string you may use GetVariable()
            </summary>
            <param name="vname">name of variable</param>
            <returns>the variable with the name vname</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.GetVariableAsMolecule(System.String)">
            <summary>
            returns the value of a variable as a molecule.
            </summary>
            <param name="vname">name of the variable</param>
            <returns>data as molecule or null if failed.</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.RunScript(System.String)">
            <summary>
            runs the specified script in cheshire.
            this is usually preceded by loading the data and is sometimes followed by reading the data
            </summary>
            <param name="script">script to run</param>
            <returns>whether the script ran ok</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.RunScript(System.String,System.Boolean,System.String@)">
            <summary>
            runs the scripts.
            if CheckErrors is true, checks that the result is not empty and does not start with the word "error"
            </summary>
            <param name="script">script to ruin</param>
            <param name="CheckErrors">if true validates the result for containing the word _error_</param>
            <param name="Result">script result</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.RunScript(System.String,System.String@)">
            <summary>
            runs the script. no additional error checking 
            </summary>
            <param name="script"></param>
            <param name="Result">the result of the script</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.CheshireAccess.RunScript(System.String,System.Boolean)">
            <summary>
            runs the script. if checkerrors is true, validates the output for not containing _error_ 
            </summary>
            <param name="script"></param>
            <param name="CheckErrors"></param>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.CheshireAccess.Ptable">
            <summary>
            sets a ptable in the cheshire environment.
            </summary>
        </member>
        <member name="P:MDL.Draw.CheshireAccess.Version">
            <summary>
            returns the version of Cheshire as a string.
            </summary>
        </member>
        <member name="P:MDL.Draw.CheshireAccess.ScriptResult">
            <summary>
            returns the script result.
            you may want to lock the cheshire object (use a lock on SyncRoot) to make sure you are looking at the result of the right script,
            or use the flavor of the script that returns the script result.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolGenericArrayReader.CurLineLen">
            <summary>length of current line 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolGenericArrayReader.LineWrapChar">
            <summary>if NON 0 then this is the wrap character that can be present as last char of line (V3000 molfiles) 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolGenericArrayReader.WrapSkipAmount">
            <summary>amount to skip at start of a wrap line (if wrapping) V3000 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolGenericArrayReader.LastKeyWordParsed">
            <summary>and intern()'ed version of any keyword parse from the last call to parseFreeFormString(), null if no keyword parsed 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolGenericArrayReader.EatLeadingSpace">
            <summary>Eats leading space, returns TRUE if still data left on line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolGenericArrayReader.ParseFixedLengthStringAndCheck(System.Int32,System.String)">
            
            <summary>parse a fixed number of characters, and returns TRUE if they case insensitive match 
            passed in toMatch string MUST BE an intern()'ed string 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.cbuf">
            <summary>byte[] of the char buffer data we are reading.. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.cbufLen">
            <summary>length of the overall char buffer (cbuf) we are reading 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.curLineOffset">
            <summary>offset in entire buffer to current line 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.curLineLenWithEOLs">
            <summary>offset to start of next line (CurLineLen + # of EOL chars) 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.curLineParsePos">
            <summary>offset to the current "free form" parsing position in current line (relative to line start) 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.iLineWrapOffset">
            <summary>offset to jump to if the current line WRAPS past eoln (for example V3000 molfiles "-" wrap 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolByteArrayReader.baseOffset">
            <summary>offset to the setNewByteArray() specified BASE offset 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolByteArrayReader.SetNewByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>used for binary data reading 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolByteArrayReader.GetCurLineSubString(System.Int32)">
            <summary>this version of getCurLineSubString (no len supplied), gets rest of line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolByteArrayReader.EatLeadingSpace">
            <summary>Eats leading space, returns TRUE if still data left on line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolByteArrayReader.ParseFixedLengthStringAndCheck(System.Int32,System.String)">
            
            <summary>parse a fixed number of characters, and returns TRUE if they case insensitive match 
            passed in toMatch string MUST BE an intern()'ed string 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolCharArrayReader.CharBuffer">
            <summary>char[] of the char buffer data we are reading.. </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolCharArrayReader.BufLen">
            <summary>length of the overall char buffer (CharBuffer) we are reading </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolCharArrayReader.CurLineOffset">
            <summary>offset in entire buffer to current line  </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolCharArrayReader.CurLineLenWithEOLs">
            <summary>offset to start of next line (CurLineLen + # of EOL chars) </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolCharArrayReader.CurLineParsePos">
            <summary>offset to the current "free form" parsing position in current line (relative to line start) </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MolCharArrayReader.LineWrapOffset">
            <summary>offset to jump to if the current line WRAPS past eoln (for example V3000 molfiles "-" wrap </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.getCurLineSubString(System.Int32,System.String)">
            <summary>gets sub string by a distributive char 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.GetCurLineSymbol(System.Int32)">
            <summary>get the symbol of current line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.GetCurLineNextString(System.Int32)">
            <summary>get next token of current line </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.GetCurLineNextToken(System.Int32)">
            <summary>get next token of current line  </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.GetCurLineSubString(System.Int32)">
            <summary>this version of getCurLineSubString (no len supplied), gets rest of line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.FastMolfile3Int(System.Int32)">
            <summary> for sketch files MDLEditText field
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.EatLeadingSpace">
            <summary>Eats leading space, returns TRUE if still data left on line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolCharArrayReader.ParseFixedLengthStringAndCheck(System.Int32,System.String)">
            <summary>parse a fixed number of characters, and returns TRUE if they case insensitive match 
            passed in toMatch string MUST BE an intern()'ed string 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeIO.strErrorReadingFile">
            <summary>Error text used for log
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeIO.bSetMolfileName">
            <summary>true if readMolecule () from file should set filename as a property on
            the returned Molecule 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeIO.molreader">
            <summary>Molfile reader object that we keep once we create to read subsequent molfiles 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeIO.tgfreader">
            <summary>Sketch(TGF and binary) reader object 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeIO.xml_serializer">
            <summary>The singleton instance of XML serializer.
            We should avoid creating XmlSerializer just temporary per need,
            since it is expensive, and each instance is a slight memory leak.
            More info http://weblogs.asp.net/cschittko/archive/2004/02/11/71649.aspx
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.ReadMoleculeFromChimeString(System.String)">
            <summary>Method that takes a Chime String and directly returns an Molecule 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.ReadMolecule(MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Int32,System.Int32@)">
            <summary>
            read a molecule from an array reader. ret is set to 0 except when reading a sk file where it can be set to -1, -2 -3, -4 or -5 .
            0  read ok
            -1 error reading, 
            -2 existing 3d (mol/rxn)
            -3 no data 
            -4 unsupported sketch tags(for sketch file only)
            -5 unsupported format (extension).
            </summary>
            <param name="in_Renamed"></param>
            <param name="formatHint"></param>
            <param name="ret"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.generateCompressedXML(MDL.Draw.Chemistry.Molecule)">
            <summary> Generate a compressedXML string representation of the Node.
            NOTE:	 Since XML can capture all the properties of an Node, it
            is much more general than a ChimeString.
            </summary>
            <author> jbo
            </author>
            <version> 3-3-00
            </version>
            <param name="mol"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.GenerateXML(MDL.Draw.Chemistry.Molecule)">
            
            <summary> Generate an XML string representation of the Node.
            </summary>
            <author> jbo
            </author>
            <version> 3-3-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.ReadXML(System.String)">
            
            <summary> Read an XML string into an Node.
            </summary>
            <author> jbo
            </author>
            <version> 3-3-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.ReadSkc(System.Byte[])">
             
             <summary> Read an skc byte[] into an Molecule .
             </summary>
             <author> jk
             </author>
             <version> 9-06-01
             
             </version>
            
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.ReadFileIntoByteBuffer(System.String,System.Byte[]@)">
            <summary>reads a file into the byte buffer
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeIO.ReadFileIntoCharBuffer(System.String,System.Char[]@)">
            <summary>
            reads a file into the char buffer, this has been modified so that the
            file name can be of the form "file:///" or "http://" so that the file can
            easily exist on a shared server.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.IO.MoleculeIO.Warning">
            <summary>
            Warning or error message. Might contain a description about status of any action.
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.MoleculePrefs">
            <summary>MTMoleculePrefs 
            </summary>
            <summary>This is preference related on file writing.
            For example, readDAndT will decide whether we want to translate H2 into D
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculePrefs.PI_RADICALS_WRITE">
            <summary> Settings for piBondWriting.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculePrefs.ReadDandT">
            <summary>Boolean value to display D and T insteadof H2 and H3 *
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculePrefs.PiBondWriting">
            <summary>setting for writing pi-bond (Ferrocene type structure) *
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculePrefs.DisplayImplicitAndGroup">
            <summary>Should the renderer draw the implicit and stereogroup *
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculePrefs.WriteSequenceMolfileAsFullCTAB">
            <summary>
            if false will write sequences as Self Contained Sequence representation. if true use the older Full CTAB format.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.v3000reader">
            <summary>a V3000 molfile read object will be created if needed 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.GetCenter(System.Collections.ArrayList)">
            <summary> Calculate the coordinate center of the given atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.ConnectPurityToStereoGroup(MDL.Draw.Chemistry.Molecule)">
            <summary> Add "MDL_Purity" data sgroup to it's stereogroup if any
            </summary>
            <author> ymk
            </author>
            <version> 02-26-03
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.AddAbsGroup(MDL.Draw.Chemistry.Molecule)">
            <summary> Add "abs" stereo group to all stereo centers within passed molecule
            </summary>
            <author> ymk
            </author>
            <version> 03-29-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.AddImplicitAndGroup(MDL.Draw.Chemistry.Molecule)">
            <summary> Create implicit AND group to all stereo bond without stereogroup associated.
            </summary>
            <author> ymk
            </author>
            <version> 02-19-03
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.Parse3DFeatureList(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Int32,MDL.Draw.Chemistry.Fragment)">
            <summary>
            Read the list of 3d features that are in this mol file.
            This method is only called if the file contains 3d features.
            </summary>
            <param name="m"></param>
            <param name="atomsInMolfileOrder"></param>
            <param name="reader">The input stream for the mol file.</param>
            <param name="featureCount">The total number of 3d features.</param>
            <param name="fragInfo"></param>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.LinesToRead(System.Int32)">
            <summary> Figure out how many lines n integers will occupy.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.ParsePointList(MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Int32)">
            <summary>
            Read a list of points that describe a query feature.
            Return a pointer to memory that contains the numbers.
            </summary>
            <param name="reader">The input stream for the mol file.</param>
            <param name="n">The number of points to read.</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.ParseAtomListAppendixLine(MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Collections.ArrayList)">
            <summary>List atom appendix line parser
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.ParseLinkAtomAppendixLine(MDL.Draw.Chemistry.IO.MolGenericArrayReader,MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>V2000 link atom appendix parser
            parses line of new link node atom defs and creates 
            SGroup definitions
            returns vector of all of the current (including newly parsed)
            sgroups
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.CleanUpMultiSgroup(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Sgroup,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Generic.List{MDL.Draw.Chemistry.Atom})">
            <summary> Multi sgroup was currently a child of atoms and parent of that atom at the same time
            This was making infinite loop in XML serialization.
            Now, we'll find out repeating count and then destroy extra atoms.(Except the unit atoms)
            </summary>
            <author> ymk
            </author>
            <version> 06-15-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderMolfile.ParseSgroupDescriptionLine(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,MDL.Draw.Chemistry.IO.MolGenericArrayReader)">
            <summary> parse "SDT" line for sgroup fiedl description
            </summary>
            <author> ymk
            </author>
            <version> 03-26-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkPacklib.linesToRead(System.Int32)">
            <summary> Figure out how many lines n integers will occupy.</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkPacklib.parsePointList(MDL.Draw.Chemistry.IO.MolCharArrayReader,System.Int32)">
            <summary> Read a list of points that describe a query feature.
            Return a pointer to memory that contains the numbers.
            </summary>
            <param name="charIn">The input stream for the mol file.
            </param>
            <param name="n">The number of points to read.
            </param>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.SkPack.curItem">
            <summary>current Node we have Created and are working on </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.SkPack.objectMapping">
            <summary>vector which keeps track of index->object mapping for current 'sketch' </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkPack.readBinarySketchFile(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MolByteArrayReader)">
            <summary>
            Reads a sketch file (binary)
            </summary>
            <param name="mol">the molecule to populate</param>
            <param name="in_Renamed">the input stream to read the data from</param>
            <returns>-2: unsupported features, -1 : error; 0: ok</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkPack.cleanupDeferredMappings(MDL.Draw.Nodes.Node)">
            /// <summary>this function goes through all objects in in current objectMapping
            array and checks for special attribute (that we added in this file)
            which means that if had FORWARD references to objects which we had
            to defer assignment of the children for... this routine goes though
            and looks up (now defined) children objects and adds them as children
            </summary>
            <param name="sk"></param>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkPack.cleanUpParenting(MDL.Draw.Nodes.Node)">
            <summary> some sgroups have their own way of looking for child atoms</summary>
            <author>  ymk
            </author>
            <version>  06-13-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkPack.discoverAllSgroupChild(MDL.Draw.Chemistry.Sgroup)">
            <summary> sgroup has only attachment atoms
            Need to find out atoms in between the two attach atoms and make them as children
            </summary>
            <author>  ymk
            </author>
            <version>  06-13-01
            </version>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.parentMolfileReader">
            <summary>parent molfile reader object 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.AdvanceToNextV3000Line(MDL.Draw.Chemistry.IO.MolGenericArrayReader)">
            <summary>advances to next line and makes sure it is a V3000 molfile line
            returns FALSE if it is not..
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ResetToStartOfV3000Line(MDL.Draw.Chemistry.IO.MolGenericArrayReader)">
            <summary>resets to the beginning of the current v3000 line
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000SgroupAtomOrBondList(MDL.Draw.Chemistry.Sgroup,System.Collections.ArrayList,System.Collections.ArrayList,MDL.Draw.Nodes.NodeProperty,MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Boolean)">
            <summary>Parses v3000 "(n n1 ... nn)" list of Atoms/Bonds for sgroup	
            and adds these as children for the specified sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000IndexListToVectorProp(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Nodes.NodeProperty,MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Collections.ArrayList)">
            <summary>Parses v3000 "(n n1 ... nn)" list into an integer *index* list
            into the specified vector property (each item in list has 1 subtracted
            from it to make it a 0 based index)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000SgroupBracketInfo(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Drawing.PointF)">
            <summary>Parses v3000 "(n n1 ... nn)" list of v3000 format sgroup bracket info
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000SgroupDisplayInformation(MDL.Draw.Chemistry.Sgroup,System.String,System.Drawing.PointF)">
            <summary>Parses v2000 "SDD" appendix style line of sgroup display info
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000SgroupBondVector(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Collections.ArrayList,System.Drawing.PointF)">
            <summary>Parses v3000 "(n n1 ... nn)" list of v3000 sgroup bond vector info
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000SgroupAttachmentPoint(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Collections.ArrayList)">
            <summary>Parses v3000 "[SAP=(3 aidx lvidx id)]*" list of v3000 sgroup attachment point info (SAP field)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000ListToIntArray(MDL.Draw.Chemistry.IO.MolGenericArrayReader)">
            <summary>Parses v3000 "(n n1 ... nn)" list into an int array
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ParseV3000Feature3DListOfBasisObjects(MDL.Draw.Chemistry.Feature3D,System.Collections.ArrayList,System.Collections.ArrayList,MDL.Draw.Chemistry.IO.MolGenericArrayReader)">
            <summary>Parses v3000 "(n n1 ... nn)" list of 3D Basis objects
            and add them as CHILDREN of the passed in Feature3D
            feature.
            - Integers are ATOMS indices
            - Items starting with OBJ3D_BASISPREFIX are 3D feature indices 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ReadCollection(System.String,MDL.Draw.Chemistry.IO.MolGenericArrayReader,MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            
            <summary> read STEABS collection line
            </summary>
            <author> ymk
            </author>
            <version> 03-01-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ReadSTEABSGroup(MDL.Draw.Chemistry.IO.MolGenericArrayReader,MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,MDL.Draw.Chemistry.Fragment)">
            
            <summary> read STEABS collection line
            </summary>
            <author> ymk
            </author>
            <version> 03-01-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ReadSTERELGroup(MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Int32,MDL.Draw.Chemistry.StereoGroup.StereoGroupType,MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,MDL.Draw.Chemistry.Fragment)">
            
            <summary> read STEREL collection line
            </summary>
            <author> ymk
            </author>
            <version> 03-01-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.GetHighlightInfoString(MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            
            <summary> read highlight information from molfile and save it into Vectors
            </summary>
            <author> ymk
            </author>
            <version> 09-28-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.GetHighlightedObjectsVector(MDL.Draw.Chemistry.IO.MolGenericArrayReader,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            
            <summary> read highlight information from molfile and return vector of the objects
            </summary>
            <author> ymk
            </author>
            <version> 02-24-03
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.ReadV3000Rxnfile(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MolGenericArrayReader,MDL.Draw.Chemistry.IO.MoleculeIO.CTReadReport@)">
            <summary> Read V3000 Rxn file
            </summary>
            <author> ymk
            </author>
            <version> 09-28-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.AddAbsGroup(MDL.Draw.Chemistry.Molecule)">
            <summary> Add "abs" stereo group to all stereo centers within passed molecule
            </summary>
            <author> ymk
            </author>
            <version> 03-29-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MoleculeReaderV3000Molfile.AddImplicitAndGroup(MDL.Draw.Chemistry.Molecule)">
            <summary> Create implicit AND group to all stereo bond without stereogroup associated.
            </summary>
            <author> ymk
            </author>
            <version> 02-19-03
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.GenerateMolfileString(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary> Generate a molfile as a string.
            This is only intended as a place holder for more general
            functionality.
            uses local system end of line 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.GenerateMolfileString(MDL.Draw.Chemistry.Molecule,System.String,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary> Generate a molfile as a string.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.WriteStereoGroupPurityToDataSgroup(MDL.Draw.Chemistry.Molecule)">
            <summary> If there was stereogroup with purity defined, store the purity info as data sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.GenerateReactionFileString(MDL.Draw.Chemistry.Molecule,System.String)">
            <summary> Generate a REACCS style rxn mol file as a string
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.GenerateSimpleMolfileString(MDL.Draw.Chemistry.Molecule)">
            <summary> Generate a v2000 mol file string.
            support RG file format
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.GenerateSimpleMolfileString(MDL.Draw.Chemistry.Molecule,System.String)">
            <summary> Generate a v2000 mol file string.
            support RG file format
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.GenerateCTAB(MDL.Draw.Chemistry.Molecule,System.String)">
            <summary> Generate a CTAB block.
            NOTE: It does NOT have "$M	LOG" at the end. It does NOT have "$M	END" at the end.
            we do them in the GenerateSimpleMolfileString()
            IMPORTATNT : molecule could be Fragment if it's RGFile
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.RemoveRgroupMembers(System.Collections.ArrayList,MDL.Draw.Chemistry.Molecule)">
            <summary> Remove atoms , bonds or sgroups which is in Rgroup definition
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.RemoveRgroupMemberSgroups(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,MDL.Draw.Chemistry.Molecule)">
            <summary> Remove atoms , bonds or sgroups which is in Rgroup definition
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.MolfileWriter.FindChildren(MDL.Draw.Chemistry.Fragment,MDL.Draw.Nodes.NodeProperty)">
            <summary> find children of given types from child fragments of frag
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.RosdalWriter">
            <summary>Rosdal
            Routines adapted from C version of CTMAKE.C (obtained from beilstein)
            which will take an Molecule and produce a ROSDAL string
            representing the molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.AddChildRgroupsToVector(MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList)">
            <summary> Helper method that goes through atom children of a fragment and adds
            rgroups defined in that fragment (and in included rgroup frags) to component vector.
            </summary>
            <author>  jbo
            </author>
            <version>  2-28-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.AddRgroupNumsToArray(MDL.Draw.Chemistry.Fragment,System.Collections.ArrayList,System.Boolean[])">
            <summary> Recursive implementation of above call.</summary>
            <author>  jbo
            </author>
            <version>  2-28-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.MakeBSDString(MDL.Draw.Chemistry.Molecule,System.String,System.Boolean)">
            <summary> Creates a BSD string from an Molecule.
            NOTE:  This was kludged together in a hurry.  We might want to reconsider
            how this was done.
            </summary>
            <param name="ct"> An Molecule
            </param>
            <param name="options">A string of the form "#+&lt;0,0&gt;,#-&lt;0,0&gt;,#=&lt;0,0&gt;,#U&lt;0,0&gt;" as defined
            by the BSD options string convention.  These options will be applied
            to the whole molecule.  When in doubt, use null.
            </param>
            <param name="ignoreAAmap">true if atom-atom mappings should be ignored, else false
            </param>
            <author>  jbo
            </author>
            <version>  05-13-00
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.MakeBSDString(MDL.Draw.Chemistry.Molecule,System.String,System.Boolean,System.Boolean)">
            <summary> Creates a BSD string from an Molecule.
            NOTE:  This was kludged together in a hurry.  We might want to reconsider
            how this was done.
            </summary>
            <param name="ct"> An Molecule
            </param>
            <param name="options">A string of the form "#+&lt;0,0&gt;,#-&lt;0,0&gt;,#=&lt;0,0&gt;,#U&lt;0,0&gt;" as defined
            by the BSD options string convention.  These options will be applied
            to the whole molecule.  When in doubt, use null.
            </param>
            <param name="ignoreAAmap">true if atom-atom mappings should be ignored, else false
            </param>
            <param name="doCleanUp">true if CleanUpReaction() should be done.
            </param>
            <author>  jbo
            </author>
            <version>  05-13-00
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.GetAtomAtomMappingText(MDL.Draw.Chemistry.Molecule)">
            <summary> Returns the BSD format @MAPPING statement or empty string if there is no mapping.</summary>
            <author>  jbo
            </author>
            <version>  2-20-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.ResetAtomNumberHashtable(MDL.Draw.Chemistry.Fragment,System.Collections.Hashtable)">
            <summary> Clears atomNum and resets it with new atom id's for the fragment.</summary>
            <author>  jbo
            </author>
            <version>  1-30-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.MakeRxnSpecificAtomProperties(MDL.Draw.Chemistry.Fragment,System.Collections.Hashtable)">
            <summary> Creates the extra atom/bond reaction properties that follow the rosdal string
            in BSD format.
            </summary>
            <author>  jbo
            </author>
            <version>  1-30-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.MakeBondChangeSymbols(MDL.Draw.Chemistry.Fragment,System.Collections.Hashtable)">
            <summary> Creates the extra bond reaction properties that follow the rosdal string
            in BSD format.
            </summary>
            <author>  jbo
            </author>
            <version>  1-30-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.MakeQueryOptionsString(MDL.Draw.Chemistry.Molecule)">
            <summary> Creates the query options string using the given molecule.
            The properties of Molecule that are used to create query properties are:
            Molecule.MULTICOMPONENT_COMPOUNDS
            Molecule.RING_CLOSURE
            Molecule.ISOTOPES
            Molecule.CHARGES
            Molecule.RADICALS
            Molecule.SUBSTITUTION_ASDRAWN
            Molecule.TAUTOMERS
            Molecule.SEPARATE_FRAGMENTS
            Molecule.STEREO_SEARCH
            </summary>
            <author>  jbo
            </author>
            <version>  3-20-00
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CtMakeCompData(MDL.Draw.Chemistry.Molecule,MDL.Draw.Nodes.Node,System.Int32,System.Text.StringBuilder)">
            <summary>**********************************************************</summary>
            <summary>**************** Komponentendaten aufbauen ***************</summary>
            <summary>**********************************************************</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CtCat(System.Text.StringBuilder,System.Text.StringBuilder,System.String,System.String)">
            <summary>Concatinate a value onto the specified buffer
            if the value is NOT an empty string
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CtMakeFragment(MDL.Draw.Chemistry.Molecule,MDL.Draw.Nodes.Node,System.Int32,MDL.Draw.Chemistry.Fragment,System.Int32,System.Int32,System.Collections.ArrayList,System.Text.StringBuilder,System.Int32)">
            <summary>**********************************************************</summary>
            <summary>*************dd Fragment erzeugen **************************</summary>
            <summary>**********************************************************</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CtMakeAtomData(MDL.Draw.Chemistry.Molecule,System.Int32,System.Int32,MDL.Draw.Chemistry.Atom,System.Text.StringBuilder,System.Int32)">
            <summary>Generates the rosdal substring for the specified atom</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CtIsBondedH(MDL.Draw.Chemistry.Atom)">
            <summary>Returns TRUE if atom bonded to H</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CtMakeBondData(MDL.Draw.Chemistry.Molecule,System.Int32,System.Boolean,MDL.Draw.Chemistry.Bond,System.Text.StringBuilder,System.Collections.Hashtable)">
            <summary>Generate the ROSDAL substring for the specified bond</summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.AddAtomListToVector(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary> Converts the atom list to a string and adds it to the vector.
            NOTE:  String is of the form:  "A2=(1;2N;3O)"
            NOTE:  AtomList Number is equal to the position of the list in the vector.
            </summary>
            <author>  jbo
            </author>
            <version>  2-24-00
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.ConvertLinkNodesToRGroups(MDL.Draw.Chemistry.Molecule)">
            <summary> Convert ct molecule with linknodes into a ct molecule with rgroups.
            NOTE:  Doesn't work if there are more than two outside atoms.
            NOTE:  If the outside atom to inside atom bond order > 1, it will
            be converted to 1.
            NOTE:  Works for single or multiple inside atoms.
            </summary>
            <author>  jbo
            </author>
            <version>  1-31-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CreateRgroupAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom)">
            <summary> Helper method that creates an Rgroup label atom to replace insideAtom.
            NOTE: doesn't do the replacement
            </summary>
            <author>  jbo
            </author>
            <version>  2-1-01
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.RosdalWriter.CreateRgroupMembers(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,System.Collections.ArrayList,System.Collections.ArrayList,System.Int32)">
            <summary> Helper method that creates rgroup member fragments.
            NOTE: Assumes that there are 2 outsideAtoms.  The bondOrder across the
            
            Otherwise we would have to assemble all combinations -- which we don't.
            </summary>
            <author>  jbo
            </author>
            <version>  2-1-01
            </version>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.SkcWriter">
            <summary>
            Summary description for SkcWriter.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateSkcStream(MDL.Draw.Chemistry.Molecule)">
            <summary>
            entry point for writing to a skc file
            note that the returned memory stream is not closed, so you should close it after use.
            please use GenerateSkcByteArray instead.
            </summary>
            <param name="mol"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateSkcByteArray(MDL.Draw.Chemistry.Molecule)">
            <summary>
            entry point for writing to a skc file
            </summary>
            <param name="mol"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateSkcStream(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary>
            entry point for writing to a skc file
            note that the returned memory stream is not closed, so you should close it after use.
            please use GenerateSkcByteArray instead.
            </summary>
            <param name="mol"></param>
            <param name="molPrefs">object with settings used in file writing</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateSkcByteArray(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary>
            entry point for writing to a skc file
            </summary>
            <param name="mol"></param>
            <param name="molPrefs">object with settings used in file writing</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateTgfStream(MDL.Draw.Chemistry.Molecule)">
            <summary>
            entry point for writing to a tgf file
            note that the returned memory stream is not closed, so you should close it after use.
            please use GenerateTgfByteArray instead.
            </summary>
            <param name="mol"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateTgfByteArray(MDL.Draw.Chemistry.Molecule)">
            <summary>
            entry point for writing to a tgf file
            </summary>
            <param name="mol"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateTgfStream(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary>
            entry point for writing to a tgf file
            note that the returned memory stream is not closed, so you should close it after use.
            use GenerateTgfByteArray instead
            </summary>
            <param name="mol"></param>
            <param name="molPrefs">object with settings used in file writing</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SkcWriter.GenerateTgfByteArray(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary>
            entry point for writing to a tgf file
            </summary>
            <param name="mol"></param>
            <param name="molPrefs">object with settings used in file writing</param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.SketchProperty">
            <summary>SkSymbolTables </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.SkSymbolTables">
            <summary>MTSkSymbolTables </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.SkSymbolTables.skPackPropTbl">
            <summary>
            property table.
            Each line contains the property, xxx(unused here), and a fxn number  (some kind of category, used in SkUnpack)
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.SkSymbolTables.skObjPropSymTable">
            <summary>
            table to map the values of the objects to their names.  e.g. 0x02 to rectangle
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.SkSymbolTables.skPackPropIndirectionArray">
            <summary>
            table to access the properties and their functions.
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.SmilesException">
            <summary>*
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SmilesException.#ctor(System.String)">
            <summary>*
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.IO.SmilesIO">
            <summary>*
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SmilesIO.GetLastError">
            <summary> static public String GetLastError()
            Gets a string representing the last error encountered.
            Note: error is set both by the smiles2mol and mol2smiles. You may get the result of the other one as each synchronizes independantly...
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SmilesIO.MoleculeToSmiles(MDL.Draw.Chemistry.Molecule)">
            <summary>
            convert Molecule to Smiles String
            </summary>
            <param name="mol">the molecule to convert</param>
            <returns>a smiles string</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SmilesIO.SmilesToMolecule(System.String)">
            <summary>
            Convert a SMILES string to a molecule.
            </summary>
            <param name="insmiles">the SMILES string to convert</param>
            <returns>molecule that matches the procided SMILES string</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.SmilesIO.SmilesToMolfileString(System.String)">
            <summary>
            Convert a SMILES string to a molfile string.
            </summary>
            <param name="insmiles">The SMILES string to convert</param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Foundation.Chemistry.IO.StarAtomTransformer">
            <summary>
            This utility class is intended to allow the transformation of *Atom templates into something that Cheshire
            can use to calculate molweight, formula and compositions of sequences using *Atoms or PseudoAtoms.
            
            There is only one public static method, CreateTransformed(Molecule startWith) which should return a
            copy of the Molecule passed in with the required changes for Cheshire applied.
            
            The changes are the addition (if necessary) of the persistant collections that describe the leaving groups
            and the primary residue.
            
            The Primary Residue is XMLD/Residue and should contain at least one Sgroup and it it contains more than
            one Sgroup, these should all have the same set of Atoms and Bonds
            
            The Leaving groups fall into three categories :
            
            Left (identified by XMLD/LGRP_L)
            Right (identified by XMLD/LGRP_R)
            Protecting (identified by XMLD/PROTECT_n where n is an integer, beginning with 0)
            
            Each of these should contain exactly one Sgroup. There may be zero protecting groups.
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Foundation.Chemistry.IO.StarAtomTransformer.FindSgroupContainingAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom)">
            This is a help function to make finding the appropriate Sgroup for a leaving group easy
        </member>
        <member name="M:MDL.Draw.Foundation.Chemistry.IO.StarAtomTransformer.AddToCollection(MDL.Draw.Chemistry.Molecule,MDL.Draw.Nodes.Node,System.String,System.String)">
            This is a help function to add to the collection if it does exist or create it and add
            to it if it does not.
            
            This is really just to remove duplicated code.
        </member>
        <member name="M:MDL.Draw.Foundation.Chemistry.IO.StarAtomTransformer.CreateTransformed(MDL.Draw.Chemistry.Molecule)">
            This utility method is the real purpose of the class, look to the class
            definition for the rationale.
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.V3000MolfileWriter.lineStart">
            <summary>The characters to Append to the end of line on dos. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.GenerateMolfileString(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.String,MDL.Draw.Nodes.NodeProperty,System.Boolean,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary>
            Generate a molfile as a string.
            This is only intended as a place holder for more general functionality.
            </summary>
            <param name="molecule">The molecule that is to be encoded.</param>
            <param name="molPrefs">object with settings used in file writing</param>
            <param name="collection"></param>
            <param name="collectionName"></param>
            <param name="collectionType"></param>
            <param name="isSeparateCollection"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.GenerateMolfileString(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.String,MDL.Draw.Nodes.NodeProperty,System.Boolean,System.String,System.Boolean,MDL.Draw.Chemistry.IO.MoleculePrefs)">
            <summary>Generate a molfile as a string.
            This is only intended as a place holder for more general
            functionality.
            </summary>
            <param name="molecule">The molecule that is to be encoded.</param>
            <param name="collection"></param>
            <param name="collectionName"></param>
            <param name="collectionType"></param>
            <param name="isSeparateCollection"></param>
            <param name="lineEndWithout"></param>
            <param name="makeClone"></param>
            <param name="molPrefs">object with settings used in file writing</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.GenerateReactionFileString(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.String,MDL.Draw.Nodes.NodeProperty,System.Boolean,System.String)">
            <summary> Generate a REACCS style rxn mol file as a string
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.GenerateSimpleMolfileString(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.String,MDL.Draw.Nodes.NodeProperty,System.Boolean)">
            <summary> Generate a v2000 mol file string.
            support RG file format
            </summary>
            <author> ymk
            </author>
            <version> 02-23-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.GenerateCTAB(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.String,MDL.Draw.Nodes.NodeProperty,System.Boolean,System.String)">
            <summary> Generate a CTAB block.
            NOTE: It does NOT have "$M	LOG" at the end. It does NOT have "$M	END" at the end.
            we do them in the GenerateSimpleMolfileString()
            IMPORTATNT : molecule could be Fragment if it's RGFile
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteAtomBlock(System.Collections.ArrayList,System.Collections.Hashtable,System.Text.StringBuilder,System.Int32,System.String)">
            <summary> Writes atom Bolock
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteBondBlock(System.Collections.ArrayList,System.Collections.Hashtable,System.Collections.Hashtable,System.String)">
            <summary> Writes bond Block
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteSgroupBlock(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.Collections.Hashtable,System.Collections.Hashtable,System.String)">
            <summary> Writes sgroup Block
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteFeature3DBlock(System.Collections.ArrayList,System.Collections.Hashtable,MDL.Draw.Chemistry.Molecule,System.String)">
            <summary> Writes 3D obj block
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteCollectionBlock(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList,System.String,MDL.Draw.Nodes.NodeProperty,System.Boolean,System.String)">
            <summary> This is collection block inside the CTab
            </summary>
            <author> ymk 
            </author>
            <version> 11-08-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteCollection(System.String,MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Rgroup,System.String)">
            <summary> This will be maily for fragment highlighting.
            Will be called for REACTANTS, PRODUCTS, MEMBERS.. HILITE AND RGROUPS
            </summary>
            <author> ymk
            </author>
            <version> 11-07-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.WriteCollectionRgroups(MDL.Draw.Chemistry.Molecule,System.String)">
            <summary> This will be maily for fragment highlighting.
            Will be called for REACTANTS, PRODUCTS, MEMBERS.. HILITE AND RGROUPS
            </summary>
            <author> ymk
            </author>
            <version> 11-07-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.RemoveRgroupMemberSgroups(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,MDL.Draw.Chemistry.Molecule)">
            <summary> Remove atoms , bonds or sgroups which is in Rgroup definition
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.RemoveRgroupMembers(System.Collections.ArrayList,MDL.Draw.Chemistry.Molecule)">
            <summary> Remove atoms , bonds or sgroups which is in Rgroup definition
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.RemoveRgroupMembers(System.Collections.ArrayList)">
            <summary> Remove atoms , bonds or sgroups which is in Rgroup definition
            </summary>
            <author> ymk
            </author>
            <version> 02-23-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.UpdateSuperSgroupBondList(MDL.Draw.Chemistry.Sgroup)">
            <summary> Currently, our super sgroup does not always have up-to-date children bond list
            update children bond list before we write to molfile
            </summary>
            <author> ymk
            </author>
            <version> 03-30-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.IO.V3000MolfileWriter.FindChildren(MDL.Draw.Chemistry.Fragment,MDL.Draw.Nodes.NodeProperty)">
            <summary> find children of given types from child fragments of frag
            </summary>
            <author> ymk
            </author>
            <version> 06-26-01
            
            </version>
        </member>
        <member name="F:MDL.Draw.Chemistry.IO.V3000StringBuffer.curLineLen">
            <summary>length of current line 
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.Relation">
            <remarks/>
        </member>
        <member name="F:MDL.Draw.Chemistry.Relation.parentId">
            <remarks/>
        </member>
        <member name="F:MDL.Draw.Chemistry.Relation.childrenId">
            <remarks/>
        </member>
        <member name="T:MDL.Draw.Chemistry.NamespaceDoc">
            <summary>
            Contains the IStructureHandle interface.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.NoStruct.Translate(System.Double,System.Double)">
            <summary>Translate this object. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.NoStruct.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Rotates the arrow about the centerOfRotation (within the XY-plane).
            NOTE:  Only does 2D rotation.  The axis is defined by center and 
            positive normal to XY plane containing atom.
            </summary>
            <param name="centerOfRotation">The point that defines the x,y coords about which arrow is rotated
            </param>
            <param name="theta">Angle of rotation in radians.
            </param>
            <author> jbo (copied from MTAtom by ymk
            </author>
            <version> 11-11-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceInitFromExternalPTable(System.String)">
            <summary>
            initializes a ptable from a file name
            </summary>
            <param name="s">filename of the ptable. ptable.dat for example</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceGetAtomSymbolFromType(System.Int32)">
            <summary>returns the symbol for the specified atom type 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceGetChargeSymbol(System.Int32)">
            <summary>return a string for the specified charge 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.PTable.AttachmentLabels">
            <summary> Symbols used for displaying attachment points.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.GetAttachmentLabel(System.Int32)">
            <summary>Get the string that represents an attachment point. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.PTable.RadicalSymbols">
            <summary> Symbols used for displaying radical states of atoms.
            For radical state 2, we should probably use unicode Middle dot
            "\u00B7"
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.GetRadicalSymbol(System.Int32)">
            <summary>returns the radical symbol string for the specified radical 
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.PTable.ValenceSymbols">
            <summary> Symbols used for displaying valence states of atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.GetValenceSymbol(System.Int32)">
            <summary>returns the default valence symbol for the specified valence 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceAtomTypeCalcMass(System.Int32)">
            <summary>returns standard mass for specified element no, as integer 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceAtomTypeCalcIsoMin(System.Int32)">
            <summary>return Isotope min. value *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceAtomTypeCalcIsoMax(System.Int32)">
            <summary>return Isotope max. value *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceAtomTypeCalcRowNum(System.Int32)">
            <summary>return row number *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceAtomTypeCalcColNum(System.Int32)">
            <summary>return col number *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.AtomCalcPtGroup(MDL.Draw.Chemistry.Atom)">
            <summary>return main group number, quick and dirty, for template atch 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.AtomWillBeSPhybrid(MDL.Draw.Chemistry.Atom,System.Int32)">
            <summary>returns true if atom is sp-hybridized with addition of one more bond/atch 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceAtomTypeCalcValences(System.Int32)">
            <summary>---------------------------------------------------------------------------
            AtomTypeCalcValences
            Returns the number of valences (0 to 4) and the valence values for the
            specified element (0 to NElements).  Returns 0 for invalid elements or
            elements with "any" valence.  Returns -1 for unused valences or valences of
            invalid elements.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceFreeValence(System.Int32,System.Int32)">
            <summary> Return the number of free valences that a specified element has
            given the current valence.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceLeastOverValence(System.Int32,System.Int32)">
            <summary> Return the smallest number of over valences that a specified element has
            given the current valence.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.PTable.InstanceGetAtomTypeVectorFromSymbol(System.String)">
            <summary>find every atoms starts with sym. return vector of those types
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.ReactionArrow.OTYPE">
            Reaction arrow (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.ReactionArrow.LAYOUT">
            Reaction arrow - flag that reaction needs layout (from MTChemProperties )
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.Translate(System.Double,System.Double)">
            <summary>Translate this object. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Rotates the arrow about the centerOfRotation (within the XY-plane).
            NOTE:  Only does 2D rotation.  The axis is defined by center and 
            positive normal to XY plane containing atom.
            </summary>
            <param name="centerOfRotation">The point that defines the x,y coords about which arrow is rotated
            </param>
            <param name="theta">Angle of rotation in radians.
            </param>
            <author> jbo (copied from MTAtom by ymk
            </author>
            <version> 11-11-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.PointBehindArrow(MDL.Draw.Utils.Point3d)">
            <summary>Does the point lie behind the arrow. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.CleanUpReaction">
            <summary>
            The bahavior of this method is CHANGED!
            It simply put information on each fragment whether it's on reactant or product side.
            It does not do any rearrangement like it did before.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.CleanUpReaction(MDL.Draw.Chemistry.Molecule)">
            <summary>The bahavior of this method is CHANGED!
            It simply put information on each fragment whether it's on reactant or product side.
            It does not do any fragment rearrangement that it used to do before.
            </summary>
            <param name="mtm"> It can be used if part of the editor structure should be used for this method.
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.RearrangeReaction(MDL.Draw.Chemistry.Molecule)">
            <summary>Makes sure all the reactants, products, and plus signs are in the proper structure.
             Sorts by position with respect to the arrow start coordinate.  This will rearrange 
             structure (in case translation of reactants or products was used to change things from
             products to reactants).
             It also groups fragments within multi-fragment components.</summary>
            <param name="mol">It can be used if part of the editor structure should be used for this method.</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.GetReactant(System.Int32)">
            <summary> Return the specified reactant fragment.
            NOTE:This should be used after the reaction is rearranged. (Call ReactionArrow.RearrangeReaction() first)
            Structure rearrangement will take care of fragment grouping for multi-fragment components and give correct counts.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.GetProduct(System.Int32)">
            <summary> Return the specified product fragment.
            NOTE:This should be used after the reaction is rearranged. (Call ReactionArrow.RearrangeReaction() first)
            Structure rearrangement will take care of fragment grouping for multi-fragment components and give correct counts.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.GetReactionComponent(System.Int32)">
            NOTE:This should be used after the reaction is rearranged. (Call ReactionArrow.RearrangeReaction() first)
            Structure rearrangement will take care of fragment grouping for multi-fragment components and give correct counts.
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.GetFragmentVector(System.Int32)">
            <summary> Return the vector of fragments.
            id = 0 is the reactants, id = 1 is the products.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.GetReactionPlusVector(System.Int32)">
            <summary> Return the vector of fragments.
            id = 0 is the reactants, id = 1 is the products.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.GetProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>Overload of super's getProperty() method that checks for special
            'interned' properties
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.SetProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary>Overload of super's setProperty() method that checks for special
            'interned' properties
            </summary>
            <author> jbo (taken from MTAtom)
            </author>
            <version> 5-13-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionArrow.RemoveMapping">
            <summary>
            removes all mappings on the molecule that contains this reaction arrow.
            it will work as expected only if molecule contains only a single reaction arrow.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.ReactionArrow.StartCoordinate">
            <summary>Get or set the coordinate of the start of the arrow. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.ReactionArrow.EndCoordinate">
            <summary>Get or the coordinate of the end of the arrow. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.ReactionArrow.ReactantCount">
            <summary> Return the number of reactants in this reaction arrow.
            NOTE:This should be used after the reaction is rearranged. (Call ReactionArrow.3Reaction() first)
            Structure rearrangement will take care of fragment grouping for multi-fragment components and give correct counts.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.ReactionArrow.ProductCount">
            <summary> Return the number of products in this reaction arrow.
            NOTE:This should be used after the reaction is rearranged. (Call ReactionArrow.RearrangeReaction() first)
            Structure rearrangement will take care of fragment grouping for multi-fragment components and give correct counts.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.ReactionArrow.Xyz">
            <summary>
            get is overridden to return the center of the arrow.
            set is now overrriden and generally should not be called.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.ReactionPlus.OTYPE">
            Reaction plus (Chemical Object Type) 
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionPlus.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionPlus.Translate(System.Double,System.Double)">
            <summary>Translate this object. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionPlus.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Rotates the arrow about the centerOfRotation (within the XY-plane).
            NOTE:  Only does 2D rotation.  The axis is defined by center and 
            positive normal to XY plane containing atom.
            </summary>
            <param name="centerOfRotation">The point that defines the x,y coords about which arrow is rotated
            </param>
            <param name="theta">Angle of rotation in radians.
            </param>
            <author> jbo (copied from MTAtom by ymk
            </author>
            <version> 11-11-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionPlus.GetProperty(MDL.Draw.Nodes.NodeProperty)">
            <summary>Overload of super's getProperty() method that checks for special
            'interned' properties
            </summary>
            <author> jbo
            </author>
            <version> 5-13-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionPlus.SetProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary>Overload of super's setProperty() method that checks for special
            'interned' properties
            </summary>
            <author> jbo (taken from MTAtom)
            </author>
            <version> 5-13-00
            
            </version>
        </member>
        <member name="P:MDL.Draw.Chemistry.ReactionPlus.Xyz">
            <summary>
            alias for coordinate
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.ReactionSupport">
            <summary> ReactionSupport.java
            This class provides a set of static methods for perceiving reactions
            and other related actions.
            All methods require a molecule.
            </summary>
            <author> mikeh
            </author>
            <version> 1.0
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionSupport.GetObjectLocation(MDL.Draw.Chemistry.ReactionArrow,MDL.Draw.Chemistry.ChemObject)">
            <summary> Find if an object (atom or bond) is a member of product or reactant
            ReactionArrow.CleanUpReaction() needs to be called before using this method.
            ObjectReactionType is based on location. If center of parent fragment of obj is behind the arrow, it's reactant.
            Otherwise, it's product. It does not support multi-line reaction.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.ReactionSupport.GetArrow(MDL.Draw.Chemistry.Molecule)">
            <summary> get the arrow from the molecule, if no reaction return null
             </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Rgroup.MAX_RGROUPS">
            max number of rgroups that can be present in any molecule 
        </member>
        <member name="F:MDL.Draw.Chemistry.Rgroup.OTYPE">
            RGroup Number info object (Rgroup) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Rgroup.ATTACHMENTCOUNT">
            RGroup Number Info - The number of attachment points for Rgroup "Rx=") 
        </member>
        <member name="M:MDL.Draw.Chemistry.Rgroup.Translate(System.Double,System.Double)">
            <summary>We need to translate any bracket coords associated with 
            this sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Rgroup.AddAttachmentPointsToFrag(MDL.Draw.Chemistry.Fragment,System.Int32,MDL.Draw.Chemistry.Atom)">
            <summary> Adds/deletes attachment points to/from the fragment to leave
            it with the given number of attachment points.
            NOTE:  Currently won't give an atom more than 2 attachment points.
            </summary>
            <param name="frag"></param>
            <param name="numAttachmentPoints"> The total number of attachment points for the whole
            fragment.
            </param>
            <param name="specifiedAtom">If specifiedAtom != null then if attachment points 
            need to be sprouted, they will be sprouted from it 
            instead of the first atom.  If points need to be 
            deleted, then they will be deleted from specifiedAtom
            first (if it has any attachment points).
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Rgroup.AddFragmentToRgroup(MDL.Draw.Chemistry.Rgroup,MDL.Draw.Chemistry.Fragment)">
            <summary> Add the given fragment to the given Rgroup Definition ("R1 = ") group.
            If the fragment is already a member of an Rgroup Definition group, remove
            it from the other group first.
            </summary>
            <param name="rgroup">The rgroup to add the fragment to.
            </param>
            <param name="frag">The fragment to add to the rgroup.
            </param>
            <author> jbo
            </author>
            <version> 12-08-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Rgroup.DeleteRgroupDef(MDL.Draw.Chemistry.Rgroup)">
            <summary> Delete the rgroup definition and all references to it (labels).  It does not delete Atom rgroup labels.
            </summary>
            <author> jbo
            </author>
            <version> 01-17-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Rgroup.DeleteRgroup(MDL.Draw.Chemistry.Rgroup)">
            <summary> Delete the rgroup definition and all references to it (labels) including atom rgroup labels. </summary>
            <author>  jbo
            </author>
            <version>  01-17-00
            </version>
        </member>
        <member name="P:MDL.Draw.Chemistry.Rgroup.OccurrenceString">
            <summary>
            Get/Set occurrence string from its RgroupLogicItem child
            Get the LAST logic item (As the last one is the one survives in server side)
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Rgroup.RestH">
            <summary>
            Get RestH from its last RgroupLogicItem child
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Rgroup.IfThenNumber">
            <summary>
            Get If/Then Number from its last RgroupLogicItem child
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Rgroup.AttachmentCount">
            <summary> Get or Set the number of attachment points the members of this rgroup should have.
            set: The number of attachment points the members of this rgroup should have.  
            get: The number of attachment points the members of this rgroup should have.  Returns zero if this has not been defined.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Rgroup.Number">
            <summary> Get or Set the rgroup number for this rgroup definition.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Rgroup.IsPartOfIfThen">
            <summary>
            Return true if there is any related RgroupLogicItem that does not have If/Then
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupFragmentInfo.OTYPE">
            RGroup Top-level info object (MTFragment Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupFragmentInfo.LAYOUT">
            RGroup Fragment Info - Needs Layout flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicInfo.OTYPE">
            RGroup Top-level logic object 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicItem.OTYPE">
            RGroup Logic Info (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicItem.RGROUPNUMBER">
            RGroup Info - Rgroup Number 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicItem.IFTHENRGROUPNUMBER">
            RGroup Info - If Then Rgroup Number 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicItem.RESTH">
            RGroup Info - Rest H 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicItem.OCCURENCE">
            RGroup Info - Occurence 
        </member>
        <member name="F:MDL.Draw.Chemistry.RgroupLogicItem.FREQUENCY">
            RGroup Info - Frequency 
        </member>
        <member name="T:MDL.Draw.Chemistry.RGroupSupport">
            <summary>RGroupSupport.cs
            This class provides a set of static methods for dealing with
            OBJECTTYPE_RGROUP_INFO objects and getting rgroups and rgroup members
            All methods require a molecule.
            </summary>
            <author> tim
            </author>
            <version> 1.0
            *
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.RGroupSupport.GetCore(MDL.Draw.Nodes.Node)">
            <summary> Return the core fragment
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.RGroupSupport.GetRgroupNum(MDL.Draw.Nodes.Node,System.Int32)">
            <summary> Return the Rgroup Number object with the specified Rgroup number
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.RGroupSupport.GetRGroupFromIndex(MDL.Draw.Nodes.Node,System.Int32)">
            <summary> Return the Rgroup with the specified index
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.RGroupSupport.GetFragmentVectorFromIndex(MDL.Draw.Nodes.Node,System.Int32)">
            <summary> Return the vector of fragments for the specified rgroup index
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.RGroupSupport.GetFragmentVectorFromRGroupNum(MDL.Draw.Nodes.Node,System.Int32)">
            <summary> Return the vector of fragments fir the specified rgroup number
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.Ring.OTYPE">
            Ring (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Ring.PROP_AROMATIC">
            boolean property describing if ring is aromatic *
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.RingCenter">
            <summary> Calculate the coordinate center of the ring.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.IsRingAromatic">
            <summary>Convenience method that returns true if aromatic property is set on ring.
            -- jbo
            NOTE:  This should not assign properties to the ring or bonds.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.TestAndSetAromatic(System.Collections.Hashtable)">
            <summary> 
            </summary>
            <param name="ringIsChecked">should be a hashtable with every ring as an index.
            The values are MDL.Draw.Chemistry.Molecule.CHECKED_AROMATIC
            Molecule.UNCHECKED_AROMATIC
            Molecule.CHECKING_AROMATIC
            and are used to keep track of where the algorithm is in the process of evaluating aromaticity.
            If this is the first call to testAndSetAromatic() then allthe values should be UNCHECKED_AROMATIC.
            An example of appropriate use can be found at Molecule.makeRingsAromatic()
            If ringIsChecked is null then the process will do the best it can, but may enter into an infinite loop
            Works with 5, 6 or 7 member rings and does the 'MDL' definition of aromaticity.
            </param>
            <author> jbo
            
            </author>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.IsOtherRingAromatic(MDL.Draw.Chemistry.Bond,System.Collections.Hashtable)">
            <summary> Helper method for testAndSetAromatic()
            </summary>
            <param name="bond">the bond in this ring that you want to test (to see if it has
            another ring fused to it)
            </param>
            <param name="ringIsChecked"></param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.AzuleneTest(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Bond,System.Int32)">
            <summary> Helper method for testAndSetAromatic().
            Used when we have a 5 member ring and a 7 member ring together (basically, it looks like azulene).
            Bond b1: the first of a pair of single bonds
            Bond b2: the second of a pair of single bonds
            int numAtomsInOtherRing: the number of atoms in the other ring to check, This is so it checks the correct one
            and not the ring it is currently on.
            </summary>
            <author> jk
            </author>
            <version> 6-26-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.IsAlternating(MDL.Draw.Chemistry.Ring,MDL.Draw.Chemistry.Bond)">
            <summary> Helper for azuleneTest()
            Tests if the bonds alternate from single to double skipping the bond that is passed in
            To be used with 5 and 7 member rings
            @authod jk
            </summary>
            <version> 6-25-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.SetAromatic">
            <summary> Make the ring and all its bonds aromatic, but only if it's
            a five, six, or seven membered ring.
            </summary>
            <author> jbo
            </author>
            <version> 6-20-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.GetRingSystem(MDL.Draw.Chemistry.Ring,System.Int32,System.Int32)">
            <summary> Returns a vector of rings that are all in one system.
            NOTE: Should only be called after molecule.findRings() has been called.
            </summary>
            <param name="startSize">don't include rings with fewer than startSize atoms
            </param>
            <param name="stopSize">don't include rings with more than stopSize atoms
            </param>
            <param name="startingRing"></param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.SetAromaticBonds">
            <summary> Sets the AROMATIC bond property.
            NOTE:  setAromaticBonds() no longer does aromaticity test before setting bonds.
            NOTE:  isRingAromatic() no longer sets bond properties because
            of problems that this causes during rendering.  This method should be
            used to set the bond properties, but it should NOT be used during the rendering
            process.
            </summary>
            <author> jbo
            </author>
            <version> 8-22-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.AddToFragment">
            <summary> Adds this ring to the fragment parent of the first atom
            in the ring (which should be the same parent of all the atoms.
            </summary>
            <author> jbo
            </author>
            <version> 8-23-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Rings definitely care if they lose a child.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Ring.LoseWillToLiveAfterLosingChild(System.Boolean)">
            <author> jbo
            </author>
            <version> 6-26-02
            
            </version>
        </member>
        <member name="P:MDL.Draw.Chemistry.Ring.Xyz">
            <summary> Override MTChemObject's getXYZ() method
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Ring.AverageRingBondLength">
            <summary> Calculate average bond length of the ring
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Sgroup2Frag">
            <summary>
            make a fragment that contains a _copy_ of the atoms and bonds in the abbreviation
            there is also a sgroup with the atoms in sgroup and crossing bonds 
            bonds outside the sgroup are not in the fragments. bonds inside the sgroup are added in the fragment.
            atoms at the end of crossing bonds are added to the fragment but not the sgroup
            this is then used when the sgroup is contracted to detect if it has changed.
            </summary>
            <returns>a fragment with the sgroup content</returns>
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.OTYPE">
            Sgroup (Chemical Object Type) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.TYPE">
            SGroup Type 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.SUBTYPE">
            SGroup Sub-Type 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.NUMBER">
            Sgroup Number 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.EXPANDEDFLAG">
            Expanded Flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.FLIPPEDFLAG">
            Flip Flag
            It is by default false and we do not save the default state (to prevent it getting into the molfile)
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.SUPERATOMCLASS">
            Sequence Class 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.SEQUENCEID">
            Sequence ID 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.PSEUDOATOMCODE">
            3-letter code used for psuedo atom name encoding for abbreviations 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.ABBREVIATIONREPRESENTATIONTYPE">
            lchen, Jan. 9, 2006: Abbreviaton's representation type: = STARATOM, or PSEUDOATOM, 
            FULLCTAB (full connection table).
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DISPLAYNAME">
            DisplayName as defined in the standard abbreviation file 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.THREELETTERDISPLAY">
            Specifies whether of not the "AA" type abbreviation (Amino acids) use 3-letter display or not 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.SUPERATOMATTACHMENTPOINT">
            Superatom Attachment Point
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.TEXT">
            SGroup Text 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BRACKETPOINTLIST1">
            SGroup Bracket Point 1 List 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BRACKETPOINTLIST2">
            SGroup Bracket Point 2 List 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BRACKETPOINTLIST3">
            SGroup Bracket Point 3 List (V3000) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BRACKETWIDTH">
            SGroup Bracket Width 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BRACKETSTYLE">
            SGroup Bracket Style 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.CONNECTIVITY">
            SGroup Connectivity 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.COMPONENTORDER">
            SGroup Component Order 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.MACCSLABEL">
            SGroup MACCS label 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BONDVECTORBOND">
            SGroup Bond Vector Bond 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.BONDVECTORCOORDLIST">
            SGroup Bond Vector Coord List 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATATEXT">
            SGroup Data Text 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.QUERYLINE">
            SGroup Data Query Operator 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATAOPERATOR">
            SGroup Data Query Operator 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.FIELDDESCRIPTION">
            SGroup Field Description 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.FIELDTYPE">
            SGroup Field Type 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.FIELDUNIT">
            SGroup field unit 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATACOORD">
            SGroup Data Coord 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATARELATIVEPLACEMENTFLAG">
            SGroup Data Relative Placement Flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATARENDERFLAG">
            SGroup Data Render Flag 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATATAGCHAR">
            SGroup Data Tag Character 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.DATAALIGNMENT">
            SGroup Data Alignment 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.CROSSINGBONDLIST">
            SGroup Crossing Bond List 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.HEADCROSSINGBONDLIST">
            SGroup Head Bracket Crossing Bond List 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.MULTIPLE_GROUP_MULTIPLIER">
            SGroup Multiple Group Multipler (v3000) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.MULTIPLE_GROUP_VARIABLE_REPEAT">
            SGroup Multiple Group Multipler (v3000) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.LINKNODE_MAX_VALUE">
            SGroup Link Node Max Value (M LIN (v2000)/LINKNODE (v3000) style link node) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.LINKNODE_MIN_VALUE">
            SGroup Link Node MIN Value (M LIN (v2000)/LINKNODE (v3000) style link node) 
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.ATTACH_DATA">
            SGroup Attach Data to Object
        </member>
        <member name="F:MDL.Draw.Chemistry.Sgroup.NEST_LEVEL">
            Specifies the hierarchy of sgroups 
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Abbreviation should be gone if all atoms are gone.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Translate(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>We need to translate any bracket coords associated with 
            this sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.RemoveBracketsInfo">
            <summary>Updates "SUP" sgroup's bracket display info and draw bracked and label for expanded state
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Flip(System.Double,System.Double)">
            <summary>Flips whole sgroup including brackets
            NOTE:It does not flip abbreviation sgroup. Atom flip should take care of abbreviation flip.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Scale(System.Double)">
            <summary>scale method does nothing by default, but Atom and Sgroup
            objects will implement versions that do something
            The scale() method will get called in MTMoleculeRenderer by
            layout routines.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.IsBondInCrossingGroup(MDL.Draw.Chemistry.Bond)">
            <summary>
            Is the bond in a substituted leaving group and a crossing bond?
            </summary>
            <param name="b">The bond to check</param>
            <returns>bool value</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.RepositionStructureOnExpandContract(System.Boolean,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Reposition whole structure when this abbrev is expanded/contracted.
            Do not reposition the atoms inside the abbreviation. but reposition atoms connected to the connecting bonds. Delta value is (coord of abbrev center - coord of the bridge atom).
            </summary>
            <param name="expand">If it's true, this abbreviation is being expanded.</param>
            <param name="labelHeight">Label height.</param>
            <param name="includeCrossAtoms">translate cross atoms</param>
            <param name="rightOnly">translate Right connected atoms only if true</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.GetConnectedPartOfAtoms(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Atom,System.Boolean,System.Boolean)">
            <summary> selectedAtom is one of either atom of pickedBond
            find all atoms on that part of the pickedBond(It does not include the other atom of the picked bond)
            NOTE:if pickedBond is a ring bond, it'll return whole fragment's atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.AverageBasisAtomPos(MDL.Draw.Chemistry.Sgroup)">
            <summary> Calculate the average coordinate of all basis atoms for an sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.ObjectInContractedAbbrev(MDL.Draw.Nodes.Node,System.Boolean)">
            <summary>Static utility function for determining if an Node is part
            of a contracted sgroup object (contracted with the contracted sgroup)
            NOTE:It will NOT include the connecting bond.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.BondInContractedAbbrev(MDL.Draw.Chemistry.Bond)">
            <summary>Static utility function for determining if a Bond object is part
            of a contracted sgroup object, OR if it's children atoms are part of
            a contracted sgroup object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.AbbrevNestedInContractedAbbrev">
            <summary>Static utility function for determining if a super sgroup(abbreviation)
            is nested in another contracted abbreviation.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.IsConnectingBond(MDL.Draw.Chemistry.Bond)">
            <summary>Static utility function for determining if a Bond object is a connecting bond
            from a super sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.HasSameAtoms(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Sgroup)">
            <summary>
            Static function that returns true if sg1 and sg2 has the same set of atom children.        /// 
            </summary>
            <param name="sg1"></param>
            <param name="sg2"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.GetBracketPositions(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Sgroup)">
            <summary>Gets the points of bracket to the specified sgroup between the inside/outside atoms
            passed in
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.GetAttachmentPointSgroupWithLeavingAtom(MDL.Draw.Chemistry.Atom)">
            <summary>
            Return the attachment point that has the leaving atom noted
            </summary>
            <param name="leavingAtom">Atom to check</param>
            <returns>The attachment point Sgroup, or null if no attachment point sgroup has this atom as a leaving atom</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Destroy">
            <summary>	destory all of the children when sgroup is destroyed
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.GentleDestroy">
            <summary>	destory sgroup without destroying abbreviation's atoms
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.CenterAbbrevTo(MDL.Draw.Chemistry.Molecule,System.Double,System.Double)">
            <summary>
            This method is used to move the center of an expanded Sgroup to the center of the original.
            The method in Molecule assumes that you want the whole structure translated and therefore
            puts a bias into the location. This compensates for that and therefore does not cause a
            drift in the structure.
            cct82229
            </summary>
            <param name="toCenter">The Molecule to center</param>
            <param name="x">X location</param>
            <param name="y">Y location</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.IsSequenceAbbreviation">
            <summary>
            Return true if it's abbreviation of type "AA" or "DNA" or "RNA" and is in the currently loaded abbreviations
            otherwise, return false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.ReplaceAbbreviationWithSingleAtom(MDL.Draw.Chemistry.Sgroup,System.String,MDL.Draw.Chemistry.Molecule)">
            <summary>
            Change the given abbreviation to have a single atom with the given atomName inside and contract it.
            NOTE:It'll keep the same abbreviation (this), just replace atoms underneath into a new atom.
            </summary>
            <param name="sgroupIn">sgroup to modify</param>
            <param name="atomName">name of the new atom</param>
            <param name="mol">parent molecule of this. It may be possible that this sgroup has two molecule parents, so we need the explicit argument</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.IsTerminalGroup">
            <summary>
            If this sgroup is a terminal leaving group then return true.
            Otherwise, return false
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.SetProperty(MDL.Draw.Nodes.NodeProperty,System.Object)">
            <summary> set children atom and bond's changed flag true as contracting/expanding "SUP" sgroup
            </summary>
            <author> ymk
            </author>
            <version> 03-21-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.WriteCTV2(System.Int32,MDL.Draw.Chemistry.Sgroup,System.Collections.Hashtable,System.Collections.Hashtable,MDL.Draw.Chemistry.Molecule,System.String)">
            <summary>
            Returns CT Format V2000 Sgroup property line string(per each sgroup)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.UpdateSuperSgroupBondList(MDL.Draw.Chemistry.Sgroup)">
            <summary> Currently, our super sgroup does not always have up-to-date children bond list
            update children bond list before we write to molfile
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.WriteSgroupBlockCTV2(System.Collections.ArrayList,System.Collections.Hashtable,System.Collections.Hashtable,MDL.Draw.Chemistry.Molecule,System.String)">
            <summary>
            Returns CT Format V2000 Sgroup property block string (M STY, M SCN, etc)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.AppendSgroupPropertiesI(System.Text.StringBuilder,System.Collections.ArrayList,MDL.Draw.Nodes.NodeProperty,System.String,System.String,System.String)">
            <summary> Utility function for sgroup writing(CT Format V2000)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.AppendSgroupProperties(System.Text.StringBuilder,System.Collections.ArrayList,MDL.Draw.Nodes.NodeProperty,System.String,System.String,System.String)">
            <summary> Utility function for sgroup wrting (CT Format V2000)
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.WriteCTSuperSgroupLineV2(System.Collections.ArrayList,System.Collections.Hashtable,MDL.Draw.Chemistry.Molecule,System.String)">
            <summary>
            Return CT Format V2000 G XXX line string
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Detach(MDL.Draw.Chemistry.Bond)">
            These Detach() methods are a set of utility functions to
            make this code a bit easier to do, detaching a bond from
            an Sgroup. It is the duty of the caller to dispose of the
            detached item.
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.Attach(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Chemistry.Atom,System.Boolean)">
            These Attach() methods are a set of utility functions to
            make this code a bit easier to do, Attaching a specific
            atom to the Sgroup (allowing for multiple ways of specifying
            the attachment point.
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.CalculateFlippedVector">
            <summary>
            Given a theoretical line between the right and left atom of the sequence sgroup, calculate
            the sum of the displacements for the other atoms in the sgroup assuming that the right is
            to the right and the left to the left to give us a logical horizontal
            </summary>
            <returns>A double with the sum</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.Sgroup.AgeUp(System.Int32)">
            <summary>
            By touching any bonds leaving the Sgroup, you make sure that the bonds are
            properly rendered if the sgroup is altered (i.e. the name changes and lengths have
            to be adjusted).
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Sgroup.AverageBondLength">
            <summary> Calculate the average bond length of the internal bonds of this sgroup.
            NOTE: Returns 0 if there are no internal bonds.
            </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.Sgroup.RepeatPatternFlipped">
            <summary>
            orders the bonds in the crossingbondlist according to the Flip flag value.
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.AttachmentPointSgroup">
            <summary>
            This class represent one unit information of each Attachment Point (SAP line in molfile) in SUP type sgroup.
            It includes attach point atom and leaving atom as children. It also includes ID of leaving group, leaving group polarity.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.AttachmentPointSgroup.GetChildrenOfType(MDL.Draw.Nodes.NodeProperty)">
            <summary>
            We need to override this to make sure that the atoms are in the
            correct order as there are dependancies upon order are all over the code.
            
            This will correct it if it is out of the correct order.
            
            Originally I put this in the Atoms call, but realized that some people do
            not universally use that convenience method to look up the atoms, so I
            wanted to prevent a possible problem with that, this puts a slightly
            higher overhead, but is safer
            </summary>
            <param name="TypeName">The Type Name that you are trying to get</param>
            <returns>The ArrayList of values</returns>
        </member>
        <member name="M:MDL.Draw.Chemistry.AttachmentPointSgroup.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> It should be gone if all atoms are gone.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.StereoGroup.LostWillToLiveAfterLosingChild(MDL.Draw.Nodes.Node)">
            <summary> Subclasses of MTObject can decide whether they will keep
            existing based on the loss of a child object.
            
            </summary>
            <param name="lostChild">The child object that was removed.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Chemistry.StereoGroup.GetGroupNumberList(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.StereoGroup.StereoGroupType)">
            *
        </member>
        <member name="F:MDL.Draw.Chemistry.GraphicsObject.POLY_SMOOTHED">
             <summary>
            PolySmoothed. Property used on polygons and Spline to indicate the rendering should be drawn smoothed.
             We currently don't use it but persist it between reading and writing.
             </summary>
        </member>
        <member name="P:MDL.Draw.Chemistry.GraphicsObject.ObjectCenter">
            <summary>
            return center point of graphicsobject
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.GraphicsArc.END_POINTS">
             <summary>
            object coords
             </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.GraphicsCircularArc.CIRC_ARC_POINTS">
             <summary>
            circular arc points
             </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.OleObj">
             <summary>
             This is the initial object used to read/write OLE objects in sketches.
             
             The current implementation is suitable only for read/write, the DataBuffer contains
             the data as read from the Sketch file, the final implementation will need to parse out
             the appropriate information from this data. It is probably wise to retain this so that
             cloning will work as it is until we have a finalized version.
             
             See the SketchMetafile object for more information
            
             </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.SketchMetafile">
             <summary>
             This is the initial object used to read/write Metafiles in sketches.
             
             The current implementation is suitable only for read/write, the DataBuffer contains
             the data as read from the Sketch file, the final implementation will need to parse out
             the appropriate information from this data. It is probably wise to retain this so that
             cloning will work as it is until we have a finalized version.
            
             </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.SketchMetafile._dataLength">
            <summary>
            Length of the DataBuffer data
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.SketchMetafile._dataBuffer">
            <summary>
            The raw data of the metafile as stored in the sketch file
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.SketchMetafile._objType">
            <summary>
            The object type used for writing (kept here in a protected so that the OleOobj can
            override.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.SketchMetafile.ImportMetadata(System.Byte[],System.Int64)">
            <summary>
            Used in reading the data from the Sketch file
            </summary>
            <param name="buffer">A byte array of the data</param>
            <param name="length">The lenght of the data in the byte array to retain</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.SketchMetafile.Write(MDL.Draw.Chemistry.IO.SkcWriter,System.Collections.ArrayList)">
            <summary>
            Used in writing the data to the Sketch file.
            </summary>
            <param name="w">The writer</param>
            <param name="al">The relevant collections (not used directly here)</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.SketchMetafile.CopyProperties(MDL.Draw.Nodes.Node)">
            <summary>
            Include the DataLength and the DataBuffer in the cloning
            </summary>
            <param name="copyFrom">The original from which the clone was created</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.OleObj.ImportMetadata(System.Byte[],System.Int64)">
            <summary>
            Used in reading the data from the Sketch file
            </summary>
            <param name="buffer">A byte array of the data</param>
            <param name="length">The lenght of the data in the byte array to retain</param>
        </member>
        <member name="M:MDL.Draw.Chemistry.OleObj.Write(MDL.Draw.Chemistry.IO.SkcWriter,System.Collections.ArrayList)">
            <summary>
            Used in writing the data to the Sketch file.
            </summary>
            <param name="w">The writer</param>
            <param name="al">The relevant collections (not used directly here)</param>
        </member>
        <member name="T:MDL.Draw.Chemistry.GraphicsRectangle">
            <summary>
            Summary description for GraphicsRectangle.
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.GraphicsRoundedRectangle">
            <summary>
            Summary description for GraphicsRectangle.
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.GraphicsRoundedRectangle.CorrectCurve(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="curve"></param>
            <returns>correct curve value</returns>
        </member>
        <member name="F:MDL.Draw.Chemistry.GraphicsRoundedRectangle.ROUNDED_RECT_CURVE">
             <summary>
            Rounded rect curve
             </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.GraphicsPolygon">
            <summary>
            Summary description for GraphicsPolygon.
            </summary>
        </member>
        <member name="T:MDL.Draw.Chemistry.TextAlignType">
            <summary>
            Enumeration for the type of text alignment used for text in a sketch.
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.TextAlignType.Empty">
            <summary>
            no aligment
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.TextAlignType.Center">
            <summary>
            center alignment
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.TextAlignType.Left">
            <summary>
            left alignment
            </summary>
        </member>
        <member name="F:MDL.Draw.Chemistry.TextAlignType.Right">
            <summary>
            right aligment
            </summary>
        </member>
        <member name="M:MDL.Draw.Chemistry.GraphicsSkText.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
            <summary>
            do not turn the text but applies the rotation to the center of the text.
            </summary>
            <param name="centerOfRotation">point around which to rotate</param>
            <param name="theta">angle of rotation</param>
        </member>
        <member name="T:MDL.Draw.Foundation.Interfaces.IMyRichBaseFactory">
            <summary>				
            Summary description for IMyRichBaseEdit.
            </summary>
        </member>
        <member name="T:MDL.Draw.Foundation.Interfaces.IMyRichBaseEdit">
            <summary>
            Summary description for IMyRichBaseEdit.
            </summary>
        </member>
        <member name="T:MDL.Draw.StructureConversion.NamespaceDoc">
            <summary>
            Contains the StructureConverter class.
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.PROPERTY_NORMAL">
            <summary>normal property flag  </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.PROPERTY_TRANSIENT">
            <summary>transient properties are not serialized  </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.PROPERTY_TEMPORARY">
            <summary>temporary properties do not set the MTObject 'changed' flag  </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.PROPERTY_ANY">
            <summary>ANY flag is fine (used when creating props on fly, and you WANT existing flags  </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.RegisteredProps">
            <summary>'global' list of all registered properties 
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.PropertyName">
            Instance member variables
            <summary>string name of this property 
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.IsTransient">
            <summary>transient properties are not serialized 
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.IsTemporary">
            <summary>temporary properties do not trigger MTObject 'change' flag 
            </summary>
        </member>
        <member name="F:MDL.Draw.Nodes.NodeProperty.KeyValue">
            <summary>key value for this property for use in property hash tables 
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.NodeProperty.#ctor(System.String,System.SByte)">
            <summary>Constructor takes string name of the property being created, and
            a byte arg which specifies any special 'flag' attributes for this
            object property, see PROPERTY_xxxx constants in this class
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.NodeProperty.#ctor(System.String,System.SByte,System.Int32)">
            <summary>Constructor takes string name of the property being created, and
            a byte arg which specifies any special 'flag' attributes for this
            object property, see PROPERTY_xxxx constants in this class
            ADDS the precomputed hash code as an arg.
            </summary>
        </member>
        <member name="M:MDL.Draw.Nodes.NodeProperty.ToString">
            <summary>provide a toString class which will return the property name
            </summary>
        </member>
        <member name="T:MDL.Draw.Undo.IUndoableEdit">
            <summary>
            Summary description for UndoableEdit.
            </summary>
        </member>
        <member name="M:MDL.Draw.Undo.UndoManager.TrimForLimit">
            <summary>
            Reduce the number of queued edits to a range of size limit,
            centered on indexOfNextAdd.  
            if limit is zero or less, then there is no limit and do not reduce number of edits.
            </summary>
        </member>
        <member name="M:MDL.Draw.Undo.DrawUndoManager.BeginResetCacheBlock(MDL.Draw.Nodes.Node)">
            <summary>
            /// When undoing, this will request the object to resynchronize its cached data. for example a bond caches its atoms for fast access     
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MDL.Draw.Undo.DrawUndoManager.EndResetCacheBlock(MDL.Draw.Nodes.Node)">
            <summary>
            When redoing, this will request the object to resynchronize its cached data. for example a bond caches its atoms for fast access
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:MDL.Draw.StructureConversion.StructureConverter">
            <summary>
            Provides export and import functions to translate 
            representations of a structure.</summary>
            <remarks>
            <ul><li>To convert from one string representation of a molecule or reaction 
            to <b>one</b> other string representation of the same molecule or reaction, 
            use the StructureConverter <b>static</b> methods.</li>
            <li>To convert from one string representation of a molecule or reaction 
            to <b>multiple</b> string representations of the same molecule or reaction, 
            create an instance of the StructureConverter, and use its 
            <b>get and set</b> methods.</li>
            <li>To get the value of any of the following properties,  
            (<see cref="P:MDL.Draw.StructureConversion.StructureConverter.MolfileString"/>, <see cref="P:MDL.Draw.StructureConversion.StructureConverter.SketchData"/>, 
            <see cref="P:MDL.Draw.StructureConversion.StructureConverter.Smiles"/>, <see cref="P:MDL.Draw.StructureConversion.StructureConverter.StructureHandle"/>, or 
            <see cref="P:MDL.Draw.StructureConversion.StructureConverter.Metafile"/>), 
            you must first set the value of any one of these same properties. In other words, setting any one of them, 
            sets all of them.</li>
            <li>See also the StructureType enum in the MDL.Draw.HeadlessRenderer</li>
            <li>Biopolymer: For queries, use <see cref="M:MDL.Draw.StructureConversion.StructureConverter.ConvertMolfileStringToSubsequenceQuery(System.String)"/></li>
            </ul>
            </remarks>
            <example><code>
            // convert a Chime string to a molfile string
            myMolfileString = StructureConverter.ChimeStringToMolfileString(myChimeString)
            // convert a molfile, such as "benzene.mol", to a Chime string
            myChimeString = StructureConverter.MolfileStringToChimeString(new StreamReader(fileName).ReadToEnd())
            </code></example>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.MolfileStringToChimeString(System.String)">
            <summary>
            Static utility method that encodes the passed in molfile string to a 
            Chime-encoded molfile (inline) string that can be read by both Symyx Chime Pro 
            and Symyx Chime.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.ChimeStringToMolfileString(System.String)"/>
            </summary>
            <param name="molfileString">String form of the contents of a molfile.</param>
            <returns>An encoded Chime string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.MetafileToSketchArray(System.Drawing.Imaging.Metafile)">
            <summary>
            Returns a byte array that represents the sketch data from a metafile comment section. 
            </summary>
            <param name="mf">a metafile that contains a comment section with a <c>mdlsk</c> (Symyx sketch data). 
            Typically from clipboard or exported from ISIS Draw</param>
            <returns>a byte array representation of the chemical structure.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.MetafileToChimeString(System.Drawing.Imaging.Metafile)">
            <summary>
            Returns a chimestring that represents the sketch data from a metafile comment section. See also <c>Renderer.Metafile</c>.
            </summary>
            <param name="mf">a metafile that contains a comment section with a <c>mdlsk</c> (Symyx sketch data). 
            Typically from clipboard or exported from ISIS Draw</param>
            <returns>a chime string representation of the chemical structure.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.GetEnhMetaFileBits(System.IntPtr,System.UInt32,System.IntPtr)">
            <summary> 
            CreateCompatibleDC 
            </summary> 
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.ChimeStringToMolfileString(System.String)">
            <summary>
            Static utility method that decodes the passed-in Chime 
            string and converts it to a molfile data string.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.MolfileStringToChimeString(System.String)"/>
            </summary>
            <param name="chimeString">An inline "Chime" string.</param>
            <returns>A molfile data string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.SmilesStringToMolfileString(System.String)">
            <summary>
            Static utility method that converts the passed-in SMILES 
            string to a molfile data string.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.MolfileStringToSmilesString(System.String)"/>
            </summary>
            <param name="smilesString">A SMILES string.</param>
            <returns>A molfile data string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.IUPACNameToMolfileString(System.String)">
            <summary>
            Static utility method that converts the passed-in IUPAC 
            name to a molfile data string.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.MolfileStringToIUPACName(System.String)"/>
            </summary>
            <param name="name">An IUPAC name.</param>
            <returns>A molfile data string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.MolfileStringToSmilesString(System.String)">
            <summary>
            Static utility method that converts the passed-in molfile data 
            string to a SMILES string.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.SmilesStringToMolfileString(System.String)"/>
            </summary>
            <param name="molfileString">A molfile data string.</param>
            <returns>A SMILES string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.MolfileStringToIUPACName(System.String)">
            <summary>
            Static utility method that converts the passed-in molfile data 
            string to an IUPAC name.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.IUPACNameToMolfileString(System.String)"/>
            </summary>
            <param name="molfileString">A molfile data string.</param>
            <returns>An IUPAC name, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.ChimeStringToSmilesString(System.String)">
            <summary>
            Static utility method that converts the passed-in Chime
            string to a SMILES string.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.SmilesStringToChimeString(System.String)"/>
            </summary>
            <param name="chimeString">A CHIME string.</param>
            <returns>A SMILES string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.SmilesStringToChimeString(System.String)">
            <summary>
            Static utility method that converts the passed-in SMILES 
            string to a Chime string.
            <seealso cref="M:MDL.Draw.StructureConversion.StructureConverter.ChimeStringToSmilesString(System.String)"/>
            </summary>
            <param name="smilesString">A SMILES string.</param>
            <returns>A Chime string, or null if error.</returns>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.GetBSDString(System.String,System.Boolean)">
            <summary>
            Gets a BSD string from converter object.
            <param name="options">A string of the form "#+&lt;0,0&gt;,#-&lt;0,0&gt;,#=&lt;0,0&gt;,#U&lt;0,0&gt;" as defined
            by the BSD options string convention.  These options will be applied
            to the whole molecule.  When in doubt, use null.</param>
            <param name="ignoreAAmap"><c>true</c> if atom-atom mappings should be ignored.</param>
            <returns>A BSD string.</returns>
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureConversion.StructureConverter.ConvertMolfileStringToSubsequenceQuery(System.String)">
            <summary>
            Returns a molfile string that is suitable for a subsequence query.
            See the description of <c>Renderer.MolfileStringForSubsequenceQuery</c> and <c>Renderer.ChimeStringForSubsequenceQuery</c>.
            </summary>
            <param name="s">molfile string</param>
            <returns>a molfile string modified for a subsequence query</returns>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.MolfileString">
            <summary>
            Gets or sets the molfile data string to or from the <c>StructureConverter</c> object.
            </summary>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.CDX">
            <summary>
            Sets the CDX data to the StructureConverter object. 
            Note: CDX data is for input only. 
            Warning: Certain features of CDX format do not export to other formats.
            </summary>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.StructureHandle">
            <summary>
            Gets or sets the <c>StructureHandle</c>, a placeholder for the molecule or reaction, 
            to or from the StructureConverter object. See also the <c>MDL.Draw.HeadlessRenderer.SaveMoleculeAsImage</c> method 
            and the <c>MDL.Draw.HeadlessRenderer.StructureType</c> enum.
            </summary>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.Smiles">
            <summary>
            Gets a SMILES file from the StructureConverter object, 
            and sets a SMILES file to the StructureConverter object.</summary>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.RosdalString">
            Gets a Rosdal string from the StructureConverter object.
            Note that the Rosdal data is for input only.
            <returns>A Rosdal string.</returns>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.SketchData">
            <summary>
            Sets the <c>sketchfile</c> data to the StructureConverter object.
            Note: <c>sketchfile</c> data is for input only. 
            <b>Warning</b>: Certain display features of sketchfiles do not export 
            to mofiles and rxnfiles.</summary>
        </member>
        <member name="P:MDL.Draw.StructureConversion.StructureConverter.Metafile">
            <summary>
            Sets the <c>sketchfile</c> data embedded into the Metafile to the <c>StructureConverter</c> object.
            Note: <c>Metafile</c> is for input only. See also <c>Renderer.Metafile</c>.
            <b>Warning</b>: Certain display features of sketchfiles do not export 
            to mofiles and rxnfiles.</summary>
        </member>
        <member name="T:MDL.Draw.Utils.Abbreviations.Abbreviation">
            <summary>
            This class is used to load the information for an abbreviation
            in the std_abbrev_defs.xml file. It then exposes the information
            in the file for the application to use. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Abbreviations.Abbreviation.#ctor(System.String,System.Xml.XmlElement)">
            Constructor to create the object from the current element, setting the molType so
            information will not be lost when someone gets only the Abbreviation.
        </member>
        <member name="T:MDL.Draw.Utils.Abbreviations.AbbreviationToolbarContents">
            <summary>
            Summary description for AbbreviationToolbarContents.
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Abbreviations.DuplicateAbbreviationForm">
            <summary>
            Summary description for DuplicateAbbreviationForm.
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Abbreviations.DuplicateAbbreviationForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Abbreviations.DuplicateAbbreviationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Abbreviations.DuplicateAbbreviationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Abbreviations.StandardAbbreviationLoader">
            <summary>
            Summary description for StandardAbbreviationLoader.
            </summary>
        </member>
        <member name="T:MDL.Draw.CheshireScripts">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Format.#ctor(System.String)">
            
            <summary> Formats the number following printf conventions.
            Main limitation: Can only handle one format parameter at a time
            Use multiple Format objects to format more than one number
            </summary>
            <param name="s">the format string following printf conventions
            The string has a prefix, a format code and a suffix. The prefix and suffix
            become part of the formatted output. The format code directs the
            formatting of the (single) parameter to be formatted. The code has the
            following structure
            <ul>
            <li> a % (required)</li>
            <li> a modifier (optional)
            <dl>
            <dt> + <dd> forces display of + for positive numbers</dd></dt>
            <dt> 0 <dd> show leading zeroes</dd></dt>
            <dt> - <dd> align left in the field</dd></dt>
            <dt> space <dd> prepend a space in front of positive numbers</dd></dt>
            <dt> # <dd> use "alternate" format. Add 0 or 0x for octal or hexadecimal numbers. Don't suppress trailing zeroes in general floating point format.</dd></dt>
            </dl>
            </li>
            <li> an integer denoting field width (optional)</li>
            <li> a period followed by an integer denoting precision (optional)</li>
            <li> a format descriptor (required)
            <dl>
            <dt>f <dd> floating point number in fixed format</dd></dt>
            <dt>e, E <dd> floating point number in exponential notation (scientific format). The E format results in an uppercase E for the exponent (1.14130E+003), the e format in a lowercase e.</dd></dt>
            <dt>g, G <dd> floating point number in general format (fixed format for small numbers, exponential format for large numbers). Trailing zeroes are suppressed. The G format results in an uppercase E for the exponent (if any), the g format in a lowercase e.</dd></dt>
            <dt>d, i <dd> integer in decimal</dd></dt>
            <dt>x <dd> integer in hexadecimal</dd></dt>
            <dt>o <dd> integer in octal</dd></dt>
            <dt>s <dd> string</dd></dt>
            <dt>c <dd> character</dd></dt>
            </dl>
            </li>
            </ul>
            </param>
            <exception>IllegalArgumentException if bad format </exception>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Print(System.IO.StreamWriter,System.String,System.Double)">
            
            <summary> prints a formatted number following printf conventions
            </summary>
            <param name="s">a PrintStream
            </param>
            <param name="fmt">the format string
            </param>
            <param name="x">the double to print
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Print(System.IO.StreamWriter,System.String,System.Int64)">
            
            <summary> prints a formatted number following printf conventions
            </summary>
            <param name="s">a PrintStream
            </param>
            <param name="fmt">the format string
            </param>
            <param name="x">the long to print
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Print(System.IO.StreamWriter,System.String,System.Char)">
            
            <summary> prints a formatted number following printf conventions
            </summary>
            <param name="s">a PrintStream
            </param>
            <param name="fmt">the format string
            </param>
            <param name="x">the character to 
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Print(System.IO.StreamWriter,System.String,System.String)">
            
            <summary> prints a formatted number following printf conventions
            </summary>
            <param name="s">a PrintStream, fmt the format string
            </param>
            <param name="fmt">format string
            </param>
            <param name="x">a string that represents the digits to print
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Atoi(System.String)">
            
            <summary> Converts a string of digits (decimal, octal or hex) to an integer
            </summary>
            <param name="s">a string
            </param>
            <returns>the numeric value of the prefix of s representing a base 10 integer
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Atol(System.String)">
            
            <summary> Converts a string of digits (decimal, octal or hex) to a long integer
            </summary>
            <param name="s">a string
            </param>
            <returns>the numeric value of the prefix of s representing a base 10 integer
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Atof(System.String)">
            
            <summary> Converts a string of digits to an double
            </summary>
            <param name="s">a string
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Form(System.Double)">
            
            <summary> Formats a double into a string (like sprintf in C)
            throws IllegalArgumentException if bad argument
            </summary>
            <param name="x">the number to format
            </param>
            <returns>the formatted string 
            </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Form(System.Int64)">
            
            <summary> Formats a long integer into a string (like sprintf in C)
            </summary>
            <param name="x">the number to format
            </param>
            <returns>the formatted string 
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Form(System.Char)">
            
            <summary> Formats a character into a string (like sprintf in C)
            </summary>
            <param name="c">the value to format
            </param>
            <returns>the formatted string 
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Format.Form(System.String)">
            
            <summary> Formats a string into a larger string (like sprintf in C)
            </summary>
            <param name="s">the value to format
            </param>
            <returns>the formatted string 
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Utils.GreekAlphabet.FindGreekLetter(System.String)">
            <summary> Searches string for occurance	of Greek letter	using UGLY
            KLUDGED	molfile	encoding.  (e.g. ".alpha.",	".beta", etc.)
            </summary>
            <param name="text">The string to be	searched.
            </param>
            <returns>The index of the initial '.' of the symbol	or -1 if no	Greek letter found.
            </returns>
            <author> jbo
            </author>
            <version> 11-15-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.GreekAlphabet.FindGreekLetter(System.String,System.Int32)">
            <summary> Searches string for occurance	of Greek letter	using UGLY
            KLUDGED	molfile	encoding.  (e.g. ".alpha.",	".beta", etc.)
            </summary>
            <param name="text">		  The string to	be searched.
            </param>
            <param name="startIndex"> The index	in the string to start the search at.
            </param>
            <returns>The index of the initial '.' of the symbol	or -1 if no	Greek letter found.
            </returns>
            <author> jbo
            </author>
            <version> 11-14-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.GreekAlphabet.IsGreekLetterName(System.String)">
            <summary> Returns true if text represents a	Greek letter.
            E.g. "alpha", "beta", "GAMMA", ...
            </summary>
            <param name="text">	String to be tested.
            </param>
            <returns>True if text represents a Greek letter.
            </returns>
            <author> jbo
            </author>
            <version> 11-14-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.GreekAlphabet.NameToUnicode(System.String)">
            <summary> Returns a	unicode	string for the Greek letter	name.
            E.g. "alpha", "beta", "GAMMA", ...
            </summary>
            <param name="text">	String to be tested.
            </param>
            <returns>The unicode string	for	the	given Greek	letter symbol
            or null	if the text	does not represent a Greek letter.
            </returns>
            <author> jbo
            </author>
            <version> 11-14-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.GreekAlphabet.ReplaceSymbolWithUnicode(System.String)">
            <summary> Searches a string	and	replaces all Greek symbols (of the form	".alpha.")
            with their unicode equivalent.
            </summary>
            <author> jbo
            </author>
            <version> 11-15-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.GreekAlphabet.ReplaceSymbolWithUnicode2(System.String)">
            <summary> Searches a string	and	replaces all Greek symbols (of the form	".alpha.")
            with their unicode equivalent.
            </summary>
            <author> jbo
            </author>
            <version> 11-15-00
            
            </version>
        </member>
        <member name="T:MDL.Draw.Utils.KeyState">
             <summary>
             KeyState is a utility struct to parse KeyState property of DragEventArgs
             and QueryContinueDragEventArgs.
             
             </summary>
             <example><c>
             protected override void OnDragOver(DragEventArgs e)
            	{
            		KeyState keyState = new KeyState (e.KeyState);
            
            		if (keyState.Shift)
            			e.AllowedEffect = DragDropEffects.Move;
            		else if (keyState.Ctrl)
            			e.AllowedEffect = DragDropEffects.Copy;
            		else
            			e.AllowedEffect = DragDropEffects.Scroll;
            		}
            	</c></example>
        </member>
        <member name="M:MDL.Draw.Utils.KeyState.#ctor(System.Int32)">
            <summary>
            Construct a KeyState from an int variable.
            </summary>
            <param name="keyState">
            Presumably the KeyState property from a DragEventArgs object</param>
        </member>
        <member name="M:MDL.Draw.Utils.KeyState.#ctor(MDL.Draw.Utils.KeyState)">
            <summary>
            Copy constructor.
            </summary>
            <param name="keyState"></param>
        </member>
        <member name="P:MDL.Draw.Utils.KeyState.State">
            <summary>
            Gets/sets the current state.
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.LicenseKey">
            <summary>
            Summary description for LicenseKey.
            This class holds the code for getting setting and validating licenses.
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.LicenseKey.license">
            <summary>
            cache for the license so we don't need to read the registry continuously
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.LicenseKey.Lock">
            <summary>
            lock so that we can define atomic section for getting the license and the number of days 
            left in trial for example.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.#ctor">
            <summary>
            to make sure nobody gets an instance of this class.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.SetLicense(System.String)">
            <summary>
            sets the license key passed in to the registry in the current user section.
            Key is validated and only a valid key will be set to the registry.
            </summary>
            <param name="licensekey">sting containing the encrypted license key</param>
            <returns>true if successful, false if key was not valid.</returns>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.GetLicenseKey">
            <summary>
            get the license key from the registry. if the key is not present, create a trial one (30 days trial)
            and set it to the registry then return it.
            We first check the local machine for a key.
            if it fails, try the current user.
            </summary>
            <returns>the license key</returns>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.GetLicense">
            <summary>
            get the license as a value of the License enum.
            The license is read from the registry then checked.
            The value is cachjed for fast retrievial.
            </summary>
            <returns>license value</returns>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.MakeClearTextKey(System.String,System.String,System.String,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            returns the clear text key with the passed in values.
            </summary>
            <param name="programname"></param>
            <param name="edition"></param>
            <param name="version"></param>
            <param name="creationdate"></param>
            <param name="trialend"></param>
            <param name="customer"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.GetLicenseFields(System.String)">
            <summary>
            returns an array of strings representing the data fields in the encrypted license key passed.
            </summary>
            <param name="licensekey"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.GetLicenseField(System.String[],System.String)">
            <summary>
            gets the value of one field
            </summary>
            <param name="fields">array of fields from GetLicenseFields</param>
            <param name="fieldname">name of field to search</param>
            <returns>field value or null if the field is not present</returns>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.ValidateAndGetEdition(System.String)">
            <summary>
            validates a license key and returns a value of type License
            For trials the dates are checked and the number of days till the end of trial is computed.
            </summary>
            <param name="licensekey">the encrypted license key</param>
            <returns>License : valid or expired trial, EE, SE, Embedded.</returns>
        </member>
        <member name="F:MDL.Draw.Utils.LicenseKey.random">
            <summary>
            used for the seeder
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.LicenseKey.GetRandomSeed">
            <summary>
            Returns a 3 character long string of printable characters.
            </summary>
        </member>
        <member name="P:MDL.Draw.Utils.LicenseKey.DaysToEndOfTrial">
            <summary>
            returns the number of days till the end the trial.
            This is computed during validation of the key.
            if trial is expired, value is -1.
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.LicenseKey.License">
            <summary>
            types of licenses.
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Point3d">
            <summary>
            This class is the point class use by ChemObjects and CanvasObjects
            Point3d provides basic set of 3d point operators/methods
            A class for manipulating two and three dimensional points (vectors).	
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Point3d.x">
            <summary> The object space coordinates of this point. </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Point3d.y">
            <summary> The object space coordinates of this point. </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Point3d.z">
            <summary> The object space coordinates of this point. </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Point3d.xs">
            <summary> The screen coordinates of the transformed object space coordinates. </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Point3d.ys">
            <summary> The screen coordinates of the transformed object space coordinates. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.#ctor">
            <summary> Default constructor.
            The x, y and z coordinates are set to 0.0 </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary> Constructor which allows the x, y, and z coordinates to be specified.</summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.#ctor(System.Double,System.Double)">
            <summary> Construct a 2D point with specified x and y coordinates. The z coordinates is set to 0.0 </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.#ctor(System.Double)">
            <summary> Construct a 3D point with equal x, y and z coordinates.
            This is useful for initialising 3D bounding boxes and such like.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.#ctor(MDL.Draw.Utils.Point3d)">
            <summary> Construct a 3D point from the coordinates of another Point3d. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.#ctor(System.Drawing.Point)">
            <summary> Construct a 3D point from the screen coordinates pt. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Clone">
            <summary>Clone method. return a new point3d with same x,y,z,xs,ys </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Set(System.Double,System.Double,System.Double)">
            <summary> Set the x, y and z coordinates of this Point3d.
            Screen coordinates are not affected. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Set(System.Double)">
            <summary> Set the x, y and z coordinates to the same value.
            Screen coordinates are note affected. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Set(MDL.Draw.Utils.Point3d)">
            <summary> Set the x, y and z coordinates to the values from another Point3d. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Zero">
            <summary> Set the x, y and z coordinates to 0.0
            Screen space coordinates are not affected.</summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.SetScreen(System.Int32,System.Int32)">
            <summary> Set the xs, yz screen coordinates.
            Object space coordinates are set to zero.</summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Add(MDL.Draw.Utils.Point3d)">
            <summary> Add the x, y and z coordinates from another Point3d to the
            coordinates of this point.</summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Subtract(MDL.Draw.Utils.Point3d)">
            <summary> Subtract the x, y and z coordinates from another Point3d from the
            coordinates of this point. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Translate(System.Double,System.Double)">
            <summary> translates x and y coordinates the specified amounts </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Translate(System.Double,System.Double,System.Double)">
            <summary> translates x, y and z coordinates the specified amounts
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Negate">
            <summary> Negate the x, y and z coordinates of this point.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Min(MDL.Draw.Utils.Point3d)">
            <summary> Find the vector minimum of the x, y and z coordinates of this point
            and another Point3d.
            This x coordinates is set to the minimum of our x coordinate and the
            x coordinate of the other Point3d.  The same is applied to the y and
            z coordinates. This is useful for accumulating bounding box values.
            </summary>		
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Max(MDL.Draw.Utils.Point3d)">
            <summary> Find the vector maximum of the x, y and z coordinates of this point
            and another Point3d.
            This x coordinates is set to the maximum of our x coordinate and the
            x coordinate of the other Point3d.  The same is applied to the y and
            z coordinates. This is useful for accumulating bounding box values.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Mid(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary> Construct a point with the x, y and z coordinates equal to the
            midpoint of two other Point3ds.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.LC(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Single)">
            <summary>Construct a point with the x, y and z coordinates equal to the
            linear combination of two other Point3ds.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Normalise">
            <summary> Make the position vector of this point have unit length.
            That is, divide x, y and z by Math.sqrt(x*x + y*y + z*z).
            If the divisor is zero no change is made.</summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Dot(MDL.Draw.Utils.Point3d)">
            <summary>
            Dot
            </summary>
            <param name="p">a point</param>
            <returns>this.x * p.x + this.y * p.y + this.z * p.z;</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.UnitVector(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            returns a unit vector from p1 to p2 
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.UnitVector(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generate a unit vector from point a to b.
            If points are too close, return vertor (1,1)
            </summary>
            <param name="xa">x of firt point</param>
            <param name="ya">y of first point</param>
            <param name="xb">x of second point</param>
            <param name="yb">y of second point</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Vector(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            Make a vector from p1 to p2.
            </summary>
            <param name="p1">point 1</param>
            <param name="p2">point 2</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.NormalToLine(MDL.Draw.Utils.Point3d)">
            <summary>
            Construct a unit vector that is perpendicular to
            the vector described by p.  
            If p is the null vector then (1.,1.,.1) is returned.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.NormalToLine(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generate a line perpendicular to the line described by the set of
            points xa,ya xb,yb.  The line is made to be of length len.
            The generated vector always points to the right as we look from
            above at the direction from a to b.	
            </summary>
            <param name="xa">x of first point</param>
            <param name="ya">y of first point</param>
            <param name="xb">x of second point</param>
            <param name="yb">y of second point</param>
            <param name="len">length</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.PlaneEquation(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary> Evaluate the plane equation for the specified vectors.
            The result is the Distance above the plane defined by origin and normal.
            If normal is not a unit vector then the signed value simply indicates
            if the point is above or below the plane.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Cross(MDL.Draw.Utils.Point3d)">
            <summary>
            Return cross product with p.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.AlmostEquals(MDL.Draw.Utils.Point3d)">
            <summary>
            Return true if points is 'almost' equal, ie their distance is less than 1e-5
            </summary>
            <param name="pt">other point</param>
            <returns>true if points equals</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Distancesq(System.Double,System.Double)">
            <summary>
            square of the distance. when we only care about comparing distances, this saves a square root call.
            </summary>
            <param name="xx">x coordinate of the other point</param>
            <param name="yy">y coordinate of the other point</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Equals(System.Object)">
            <summary>
            Return true if points equal ie same point or same x, y and z.
            </summary>
            <param name="b">other point</param>
            <returns>true if points equals</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.GetHashCode">
            <summary>
            hash code of a point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Scale(System.Double)">
            <summary>
            scale a point: multiply each coordinate by len.
            </summary>
            <param name="len"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.ScaleTo(System.Double)">
            <summary>Scales vector so that its length becomes len. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Distance(System.Double,System.Double)">
            <summary>
            distance between this point and the point at (xx,yy)
            </summary>
            <param name="xx">x coordinate of the other point</param>
            <param name="yy">y coordinate of the other point</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.DistanceXY(MDL.Draw.Utils.Point3d)">
            <summary>
            distance between this point and the point at (xx,yy)
            </summary>
            <param name="pt">other point</param>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Distance(MDL.Draw.Utils.Point3d)">
            <summary>
            distance between this point and the point p
            </summary>
            <param name="p">other point</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.DistanceFlat(MDL.Draw.Utils.Point3d)">
            <summary>
            flat distance between this point and the point p
            </summary>
            <param name="p">other point</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Distancesq(MDL.Draw.Utils.Point3d)">
            <summary>
            square of the distance. when we only care about coparing distances, this saves a square root call.
            </summary>
            <param name="p">other point</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Distance(System.Int32,System.Int32)">
            <summary>
            Screen coordinates distance
            </summary>
            <param name="xx">x screen coordinate</param>
            <param name="yy">y screen coordinate</param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Utils.Point3d.SmallNumber">
            <summary>Are all the components of this vector 0.  </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Angle(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary> Given:  2 points:  anchor and branch that make a triangle with this
            normal:    a point normal to the plane containing the triangle
            Method: Calculates the angle needed to rotate anchor onto branch
            about the normal/this axis.  The normal is simply included to
            provide directionality so that angle values are returned between
            0 and 360 degrees.
            *
            branch  |\
            | \ a
            c|  \
            |)__\
            this   b   anchor
            </summary>
            <returns> The angle between anchor and branch in degrees. </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Angle(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary> Given:  2 points:  anchor and branch
            that make a triangle with this
            Method: Calculates the angle (in degrees) needed to rotate 
            anchor onto branch.
            *
            branch  |\
            | \ a
            c|  \
            |)__\
            this   b   anchor
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.AngleInRadians(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary> Given:  2 points:  anchor and branch
            that make a triangle with this
            Method: Calculates the angle (in radians) needed to rotate 
            anchor onto branch.
            *
            branch  |\
            | \ a
            c|  \
            |)__\
            this   b   anchor
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Angle(MDL.Draw.Utils.Point3d)">
            <summary>
            Angle between two vectors
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.NormalToPlane(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            Constructs a normal to the plane at this.
            Given:  2 points that together with this define a plane
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.DistanceToPlane(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            return distance from point to the plane specified by point v1 and normal vector
            </summary>
            <param name="point"></param>
            <param name="v1"></param>
            <param name="normalToPlane"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.SnapToAngle(System.Double)">
            <summary> Make this point lie on a multiple of the specified angle.
            The angle is specified in radians. </summary>
            <param name="angle">angle in radians</param>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.Rotate(MDL.Draw.Utils.Point3d,System.Double)">
             <summary> Return a vector that is p rotated around the origin by angle. </summary>
            <param name="p"></param>
             <param name="angle">angle in radians</param>
             <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.GetCircleCenterXY(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            
            </summary>
            <param name="a">point</param>
            <param name="b">point</param>
            <param name="c">point</param>
            <returns>center point of escribed circle around (a,b,c) (in 0XY plane), or
            null if this task hasn't solution</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.GetSignedAreaOfTriangle(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>		
            sign of returned Area indicates location (left or right) of c point relative to [a,b] segment
            </summary>
            <param name="a">point</param>
            <param name="b">point</param>
            <param name="c">point</param>
            <returns>signed value of the area of triangle ABC</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.getAngle(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            fint angle between two vectors in 3D
            </summary>
            <returns>angle in radians (0,Pi)</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.FindLinesIntersection(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            
            </summary>
            <returns>lines intersection point in XY plane</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.getAngle(System.Double,System.Double)">
            <summary>
            </summary>
            <param name="cos_val">cosinus value</param>
            <param name="sin_val">sinus value</param>
            <returns> angle value in radians</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.roundAngle(System.Double)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns>value in [-pi,pi]</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.ClosestDistancePointLine(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            closest distance from point to the line specified by two points - p1 and p2
            </summary>
            <param name="point"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.DistancePointLine(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
             Find distance from a point to a bounded line
            </summary>
            <param name="p">point from which the distance is calculated</param>
            <param name="a">first point of a bounded line</param>
            <param name="b">second point of a bounded line</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Point3d.DistanceLineLine2d(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
             Find distance between two bounded lines in 2D
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.Utils.Point3d.Length">
            <summary>
            distance between origin and this point.
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.DrawUtil.Encoding">
            <summary>
            character encoding being used across mdldraw in molfiles. 
            can be changed by the SketchStringEncoding preference.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.RadiansToDegrees(System.Double)">
            <summary>Convert an angle specified in radians to degrees. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.IsZero(System.Double)">
            <summary> Is passed double argument close to 0 in value. </summary>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.CbRt(System.Double)">
            <summary> Return the cube root of the argument.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.CubicRoots(System.Double[],System.Double[])">
            <summary> Find the roots of the cubic equation.
            *
            </summary>
            <param name="c">The cubic equation to solve.
            </param>
            <param name="s">The roots of the equation.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.EigenValues(System.Double[][],System.Double[],System.Double[][])">
            <summary> Find the eigen values and vectors of a 3x3 matrix.
            *
            </summary>
            <param name="m">The matrix whose eigen values and vectors are to be found.
            </param>
            <param name="values">The eigen values of the matrix.
            </param>
            <param name="vectors">The eigen vectors of the matrix.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.InertiaTensor(System.Double[][],System.Int32,System.Double[],System.Double[][])">
            <summary> Calculate the inertia tensor of a set of points.
            *
            </summary>
            <param name="p">The array of points to find the inertia tensor for.
            </param>
            <param name="np">The number of points in the array.
            </param>
            <param name="centre">The center of the points (returned).
            </param>
            <param name="v">The inertia tensor of the points (returned).
            
            </param>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.StringToColor(System.String)">
            <summary> Converts a string representation of a color to a java color
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.ColorToString(System.Drawing.Color)">
            <summary> Converts a Color to a string. 
            NOTE:  Not included in ColorUtil because ColorUtil may be too big
            to carry forward.
            </summary>
            <author> jbo
            </author>
            <version> 1-17-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.StringToBoolean(System.String)">
            <summary> Converts a string to a boolean.
            *
            </summary>
            <author> jbo
            </author>
            <version> 10-21-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.DeleteUserKey(System.String)">
            <summary>
            throws an exception if the key is not there.
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.GetInstallDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.GetDeployDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.GetInstallDirectoryFileOrFolder(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.GetIsolatedStore">
            <summary>
            It returns an IsolatedStorage - isolated by user/Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.DrawUtil.LoadImage(System.String,System.Reflection.Assembly,System.String)">
            <summary> Load an image from a resource in the specified Assembly.
            </summary>
        </member>
        <member name="P:MDL.Draw.Utils.DrawUtil.OpenEyeLicense">
            <summary>
            the open eye key is in the registry.
            It's stored encrypted with csinline and prepended with two characters to confuse hackers.
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.CWaitCursor">
            <summary>
            The class CWaitCursor is for more asy setting the wait cursor,
            and later restoring the original cursor along the long operation.
            The method Dispose will restore the original cursor; 
            you can use the 'using' statement to ensure that the cursor is restored
            regardless on eny exception thrown etc. Code could be like this:
            
              using (new CWaitCursor(this))
              {
                DoLongOperation();
              }
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.CWaitCursor.Dispose">
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
        </member>
        <member name="M:MDL.Draw.Utils.CWaitCursor.Dispose(System.Boolean)">
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CTipHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CMsgHook">
            <summary>
            The class CMsgHook, intended for hookup of IWin32Window object.
            Otherwise has basically the same functionality as CHwndMessageHook
            /////////////////////////////////////////////////////////////
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CHwndMessageHook">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.Win32">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.Win32.CBN_ERRSPACE">
            Combo Box Notification Codes
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.Win32.SB_HORZ">
            Scroll Bar Constants
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.Win32.SIF_RANGE">
            SCROLLINFO Constants
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.Win32.IsWindow(System.IntPtr)">
              API functions
            
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.Win32.GetWndScrollInfo(System.IntPtr,System.Int32,MDL.Draw.Utils.Win32Util.Win32.SCROLLINFO_API@,System.UInt32)">
            <summary>
            utility method - getting scroll info
            </summary>
            <param name="hwnd"></param>
            <param name="nBar"></param>
            <param name="lpScrollInfo"></param>
            <param name="nMask"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.Win32.GetWndScrollInfo(System.Windows.Forms.IWin32Window,System.Int32,MDL.Draw.Utils.Win32Util.Win32.SCROLLINFO_API@,System.UInt32)">
            <summary>
            utility method - getting scroll info
            </summary>
            <param name="IWnd"></param>
            <param name="nBar"></param>
            <param name="lpScrollInfo"></param>
            <param name="nMask"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.Win32.RectAPI2Rectangle(MDL.Draw.Utils.Win32Util.Win32.RECT_API)">
            <summary>
            utility method - conversion of Win32 API RECT to rectangle
            </summary>
            <param name="rc"></param>
            <returns>a newly created Rectangle object</returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.Win32.GetWindowRect(System.IntPtr)">
            <summary>
            utility method - Win32 API GetWindowRect encapsulation
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.Win32.GetFocusedControl">
            <summary>
            Get the control which currently has input focus
            </summary>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.Win32.MOUSEHOOKSTRUCT">
            <summary>
            the structure used by WH_MOUSE system hook
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.Win32.KBDLLHOOKSTRUCT">
            <summary>
            the structure used by WH_KEYBOARD_LL system hook
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CHwndMessageHook.disposed">
            Track whether Dispose has been called.
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CHwndMessageHook.nextHook">
            the next hook in the chain
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CHwndMessageHook.pRealHook">
            the actual native hook doing the job
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CHwndMessageHook.hookedHwnd">
            the window hooked
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.Dispose">
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.Dispose(System.Boolean)">
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.IsHooked">
            <summary>
             Returns TRUE if hooked to window, FALSE otherwise
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.HookWindow(System.IntPtr)">
            <summary>
            Subclass a window. Hook(null) to unhook (automatic on WM_NCDESTROY)
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.OnHookup(System.Object)">
            <summary>
            Auxiliary helper called from HookWindow. 
            Nothing really done here ( but the derived class can override it ).
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.OnUnhook(System.Object)">
            <summary>
            Auxiliary helper called from HookWindow. 
            Nothing really done here ( but the derived class can override it ).
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Convert the coordinates from client to screen.
            Auxiliary helper; can be used by the derived class.
            </summary>
            <param name="hwnd"></param>
            <param name="pt"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.ClientToScreen(System.Drawing.Point@)">
            <summary>
            Convert the coordinates from client to screen.
            Auxiliary helper; can be used by the derived class.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.WndFromPoint(System.Drawing.Point)">
            <summary>
            Get window (HWND) from point.
            Auxiliary helper; can be used by the derived class.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.ControlFromPoint(System.Drawing.Point)">
            <summary>
            Get NET control from point.
            Auxiliary helper; can be used by the derived class.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.HookWindowProc(System.Windows.Forms.Message@)">
            <summary>
            The virtual method, usually overwritten by the derived class 
            Delegates the processing to the next hook ( if there is any),
            otherwise calls the 'real hook' DefWndProc.
            
            In case the derived class overwrites this method,
            it MUST call the base class processing as well;
            ( otherwise the messages don't get processed by the 'real hook'
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.CallHookWindowProc(System.Windows.Forms.Message@)">
            <summary>
            Auxiliary implementation helper, created only for purpose of CMyNativeHook 
            ( so it is able to call protected ( but not internal ) CHwndMessageHook.HookWindowProc
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.SubclassWindow(System.IntPtr,MDL.Draw.Utils.Win32Util.CMyNativeHook)">
            <summary>
            auxiliary implementation helper
            </summary>
            <param name="hwnd"></param>
            <param name="pNativeHook"></param>
            <returns>true on success, false on failure </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.ChainHook(System.IntPtr,MDL.Draw.Utils.Win32Util.CMyNativeHook)">
            <summary>
            auxiliary implementation helper
            </summary>
            <param name="hwnd"></param>
            <param name="pNative"></param>
            <returns> true on success, false on failure </returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.UnChainHook">
            <summary>
            auxiliary implementation helper
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CHwndMessageHook.UnSubclassWindow">
            <summary>
            auxiliary implementation helper
            </summary>
            <returns>true on success, false on failure </returns>
        </member>
        <member name="P:MDL.Draw.Utils.Win32Util.CHwndMessageHook.HookedHWND">
            Returns the the hooked window (if any), or null.
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CMsgHook.hookedIWin32">
            The interface of IWin32Window window hooked
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHook.xWMCMD_ID(System.UInt32,System.IntPtr)">
            <summary>
            Auxiliary helper, that may be used by derived classes.
            Returns the dialog-control id for the specific message command ( WM_COMMAND )
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHook.xWMCMD_CMD(System.UInt32,System.IntPtr)">
            <summary>
            Auxiliary helper, that may be used by derived classes.
            Returns the dialog-control notification code for the specific 
            message command ( WM_COMMAND )
            If the message is from an accelerator, this value is 1. 
            If the message is from a menu, this value is 0.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHook.xWMCMD_WND(System.UInt32,System.IntPtr)">
            <summary>
            Auxiliary helper, that may be used by derived classes.
            Returns the dialog-control handle (HWND) for the specific
             message command ( WM_COMMAND )
            </summary>
        </member>
        <member name="P:MDL.Draw.Utils.Win32Util.CMsgHook.HookedWindow">
            <summary>
            Returns the the hooked window interface (if any), or null.
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.g_nTipTimeMsec">
            initial global: msec wait before showing tip
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.g_nTipTimeAfterMouse">
            initial global; when nonzero, show the tooltip again g_nTipTimeAfterMouse miliseconds after it is canceled by mouse click
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.m_bDrawSelHighlighted">
            global; draw highlighted text by different color when true
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.pWndTip">
            the tip window
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.nCurItem">
            index of current item
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.bRequiresSystemMouseHookCall">
            Says whether the member requires the call of OnMouseMove 
            from the system hook function.
            By default is false, the derived class can change in its constructor.
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.arrayOfAll">
            Array of all instances (used for enumeration in system-hook MouseProc ).
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.mouse_hook">
             The system hook of type WH_MOUSE
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CTipHandler.ll_keyboard_hook">
             The system hook of type WH_KEYBOARD_LL
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.#ctor">
            <summary>
             constructor
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.MouseHookMessageProc(System.Int32,System.IntPtr,System.IntPtr)">
            
             A delegate to handle the mouse messages that are about to be pumped to the application.
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.LowLevelKeyboardProc(System.Int32,System.IntPtr,System.IntPtr)">
            
             A delegate to handle the low-level keyboard events
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.Init(System.Windows.Forms.Control,System.Drawing.Font)">
            <summary>
            Initialize - Install hook and create (invisible) tip window.
            </summary>
            <param name="ctrl"></param>
            <param name="pFont"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.Done">
            <summary>
            Uninstall 
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.HookedControl">
            <summary>
            Get the the hooked control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.GetCurItem">
            <summary>
            Returns the current item
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.MeasureDisplayStringWidth(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            Implementation helper ( to be called by derived classes ).
            Provides better (more exact) result than Graphics.MeasureString
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.InvokeToShowTooltip(System.Drawing.Point,System.UInt32)">
            <summary>
            Auxiliary helper. Nomen Est Omen.
            </summary>
            <param name="ptClientCoord"></param>
            <param name="nms"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.HookWindowProc(System.Windows.Forms.Message@)">
            <summary>
            Subclass window proc; overwrites the CMsgHook behaviour
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.GetParentForTipCreation">
            <summary>
            virtual method getting the parent for TipWindow
            Derived class can overwrite.
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.CreateTipWindow(System.Drawing.Font)">
            <summary>
            virtual method creating the tip window. 
            Override that when you want to use tip window different from CPopupText.
            </summary>
            <param name="pFont"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.DestroyTipWindow">
            <summary>
            virtual method destroying the tip window. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.IsRectCompletelyVisible(System.Drawing.Rectangle)">
            <summary>
            Determine if given rectangle is completely visible withing the hooked control ( listbox etc.)
            is virtual method you can overwrite.
            </summary>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.OnMouseMove(System.Drawing.Point)">
            <summary>
            abstract method you have to overwrite. Point ptInScreen is in screen coord.
            </summary>
            <param name="ptInScreen"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.ItemFromPoint(System.Drawing.Point,System.UInt32@)">
            <summary>
            abstract method you have to overwrite. Point pt is in client coord.
            </summary>
            <param name="pt"> Point pt is in client coord. </param>
            <param name="nSubItem"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.OnGetItemInfo(System.Drawing.Point,System.Boolean,System.UInt32@,System.Drawing.Rectangle@,System.String@)">
            <summary>
            Abstarct fn you have to overwrite (i.e. implement ).
            Given the point in client coordinates it returns the output arguments.
            </summary>
            <param name="pt"> Input arg. Position of mouse (in clien't coordinate) 
            </param>
            
            <param name="bFontInControl"> Input arg.  Either we are computing the item's rectangle in the control (so bFontInControl = TRUE),
            or we are computing the size of rectangle of the final tooltip (so bFontInControl = FALSE),
            ( As the font in the control and font in the tooltip may be different,
            so the resulting rectange of the tooltip might have different size, 
            the method needs to know about what rectange we are asking.)
            </param>
            
            <param name="nSubItem">Subitem of the item (will be used for the case of ListCtrl tooltips, where subitem == column.
            But in most cases (ListBox, ComboBox) it will be always simply zero. 
            </param>
            
            <param name="rc">
            The resulting rectange of the item, respective of the tooltip ( see bFontInControl )
            </param>
            
            <param name="s"> 
            The text of the item, respective of the tooltip ( see bFontInControl )
            </param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CTipHandler.SetTipWindowFont(System.Drawing.Font)">
            <summary>
            public method, set the font of the tip window
            </summary>
            <param name="pFont"></param>
        </member>
        <member name="P:MDL.Draw.Utils.Win32Util.CTipHandler.RequiresSystemMouseHookCall">
            <summary>
             Get the value of bRequiresSystemMouseHookCall. Implementation helper.
            </summary>
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.lbHook">
            <summary>
            The internal combobox listbox window hook
            We could use the simple HWND here to keep the window handle, 
            however it is convenient to use CMsgHook, as it is automatically sets 
            its hooked window handle to null on WM_NCDESTROY.
            </summary>/// 
        </member>
        <member name="F:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.editHook">
            <summary>
            The hook of the edit control
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.GetComboBox">
            get the subclassed combobox window (if there is any)
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.GetListBoxPartHandle">
            <summary>
            Get the hooked window listbox part of the combobox (if there is any).
            This method works only after the listbox part is actually hooked 
            (see the code CComboBoxTipHandler::HookWindowProc and GetListBoxOfCombo for details).
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.GetComboType">
            Returns CBS_SIMPLE, CBS_DROPDOWN or CBS_DROPDOWNLIST. Returns zero in case of error.
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.HookWindow(System.Windows.Forms.IWin32Window)">
            <summary>
            Overriding the method of the base class
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.GetTipTimeMsec">
            <summary>
            Overriding the property of the base class.
            For the combobox we want to show the tooltips faster...
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.OnMouseMove(System.Drawing.Point)">
            <summary>
            Overriding the method of the base class
            </summary>
            <param name="ptInScreen"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.ItemFromPoint(System.Drawing.Point,System.UInt32@,System.Drawing.Rectangle@)">
            <summary>
            implement. helper, called from the other overriden ItemFromPoint
            </summary>
            <param name="pt">Input arg. Position of mouse (in client's coordinate)</param> 
            <param name="nSubItem">Output arg.</param>
            <param name="rc">Output arg.</param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.ItemFromPoint(System.Drawing.Point,System.UInt32@)">
            <summary>
            Overriding the method of the base class
            </summary>
            <param name="pt"></param>
            <param name="nSubItem"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.OnGetItemInfo(System.Drawing.Point,System.Boolean,System.UInt32@,System.Drawing.Rectangle@,System.String@)">
            <summary>
            Overriding the method of the base class
            </summary>
            <param name="pt"> Input arg. Position of mouse (in client's coordinate) 
            </param>
            
            <param name="bFontInControl"> Input arg.  Either we are computing the item's rectangle in the control (so bFontInControl = TRUE),
            or we are computing the size of rectangle of the final tooltip (so bFontInControl = FALSE),
            ( As the font in the control and font in the tooltip may be different,
            so the resulting rectange of the tooltip might have different size, 
            the method needs to know about what rectange we are asking.)
            </param>
            
            <param name="nSubItem">Subitem of the item (will be used for the case of ListCtrl tooltips, where subitem == column.
            </param>
            
            <param name="rc">
            The resulting rectange of the item, respective of the tooltip ( see bFontInControl )
            </param>
            
            <param name="s"> 
            The text of the item, respective of the tooltip ( see bFontInControl )
            </param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.CInternalListHook.#ctor(MDL.Draw.Utils.Win32Util.CComboBoxTipHandler)">
            constructor
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.CInternalListHook.GetListBox">
            get the hooked window listbox 
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.CInternalListHook.IsScrolling">
            is the listbox scrolling ?
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.CInternalListHook.StartRecordScrolling">
            implemetation helper, called from HookWindowProc
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.CInternalListHook.EndRecordScrolling">
            implemetation helper, called from HookWindowProc
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CComboBoxTipHandler.CInternalListHook.HookWindowProc(System.Windows.Forms.Message@)">
            internal hook fn
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CListBoxTipHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CListBoxTipHandler.OnMouseMove(System.Drawing.Point)">
            <summary>
            Overriding the method of the base class
            </summary>
            <param name="ptInScreen"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CListBoxTipHandler.ItemFromPoint(System.Drawing.Point,System.UInt32@)">
            <summary>
            Overriding the method of the base class. Point pt is in client coord.
            </summary>
            <param name="pt"></param>
            <param name="nSubItem"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CListBoxTipHandler.GetItemInfo(System.UInt32,System.UInt32,System.Boolean,System.Drawing.Rectangle@,System.String@)">
            implementation helper, called from OnGetItemInfo
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CListBoxTipHandler.OnGetItemInfo(System.Drawing.Point,System.Boolean,System.UInt32@,System.Drawing.Rectangle@,System.String@)">
            <summary>
            Overriding the method of the base class
            </summary>
            <param name="pt"> Input arg. Position of mouse (in clien't coordinate) 
            </param>
            
            <param name="bFontInControl"> Input arg.  Either we are computing the item's rectangle in the control (so bFontInControl = TRUE),
            or we are computing the size of rectangle of the final tooltip (so bFontInControl = FALSE),
            ( As the font in the control and font in the tooltip may be different,
            so the resulting rectange of the tooltip might have different size, 
            the method needs to know about what rectange we are asking.)
            </param>
            
            <param name="nSubItem">Subitem of the item (will be used for the case of ListCtrl tooltips, where subitem == column.
            </param>
            
            <param name="rc">
            The resulting rectange of the item, respective of the tooltip ( see bFontInControl )
            </param>
            
            <param name="s"> 
            The text of the item, respective of the tooltip ( see bFontInControl )
            </param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CMyNativeHook">
            <summary>
            auxiliary class used for CHwndMessageHook 
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CMsgHookMap">
            <summary>
            auxiliary class used for CHwndMessageHook 
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHookMap.Add(System.IntPtr,MDL.Draw.Utils.Win32Util.CHwndMessageHook)">
            <summary>
            internal implementation helper; does the 'real' hookup of IWnd
            </summary>
            <param name="hwnd"></param>
            <param name="pMsgHook"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHookMap.Remove(MDL.Draw.Utils.Win32Util.CHwndMessageHook)">
            <summary>
            internal implementation helper; removes 'real' hookup
            </summary>
            <param name="pMsgHook"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHookMap.RemoveAll(System.IntPtr)">
            <summary>
            Remove all the hooks for a window
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHookMap.LookupNativeHook(System.IntPtr)">
            <summary>
            Find native hook associated with window handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CMsgHookMap.Lookup(System.IntPtr)">
            <summary>
            Find first hook associated with window
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Utils.Win32Util.CPopupTooltip">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CPopupTooltip.OnTimer(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Timer popped: display myself and kill timer
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CPopupTooltip.ShowDelayed(System.Int32)">
            <summary>
            Show window with delay. No delay means show now.
            </summary>
            <param name="msec"></param>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CPopupTooltip.Cancel">
            <summary>
            Cancel text: kill timer and hide window
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CPopupTooltip.MDL#Draw#Utils#Win32Util#IPopupText#get_Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.CPopupTooltip.MDL#Draw#Utils#Win32Util#IPopupText#set_Size(System.Drawing.Size)">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Utils.Win32Util.CPopupTooltip.Margins">
            <summary>
             Margins ( actualy are not supported yet ... )
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.WindowsSystemHook.Dispose">
            Implement IDisposable.
        </member>
        <member name="M:MDL.Draw.Utils.Win32Util.WindowsSystemHook.Dispose(System.Boolean)">
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
        </member>
    </members>
</doc>
