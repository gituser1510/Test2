<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MDL.Draw.Editor</name>
    </assembly>
    <members>
        <member name="T:MDL.Draw.Interfaces.IPopupMenu">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.EnableWindowMenu(System.Boolean)">
            <summary>
            find the window menu and set its enabled flag according to the parameter.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="F:MDL.Draw.Editor.DrawApp.RenditorTranslation">
            <summary>
            translation that was applied to the molecule when the renditor started the editor.
            This translation will be reversed on the way back unless someone clears the translation
            this happen when the whole structure is reset.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.CopyJournalPreferences">
            <summary>
            This method copies the contents of the Journal Settings directory to the
            users Preferences directory, making them read/only. If the file is already there
            no copy is done if the existing file is not older than the file in the Journal
            Settings directory.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.#ctor(MDL.Draw.Editor.DrawApp)">
            <summary>
            creates a new instance of Draw based on the xml config of another instance of MDLDraw.
            Do not merge the addins again.</summary>
            <param name="drawapp">an instance of MDLDraw</param>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.AddWindow">
            <summary>
            Use this instance to find the configuration and create a new 
            instance window of drawapp initialized with the same config and add
            the new instance to our internal arraylist of instances.
            
            This new instance participates in the list of window instances.
            
            The returned instance still needs a Show() call before it becomes
            visible.
            </summary>
            <returns>a new instance of DrawApp, ready to be made visible.</returns>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.#ctor(MDL.Draw.Interfaces.IRenditor,System.IO.Stream)">
            <summary>
            Creates a new instance of DrawApp.
            The configuration xml defaults to a config file that is sourced from the editor assembly itself and is not configurable.
            There are some ways to use a different xml:
            
            if the renditor exists and its UseLocalXMLConfig is true, or if the registry stash contains the key RenditorUseLocalXMLConfig 
            and the value is \"Always\" or "Implicit\" and the stream is null :
            initialize the editor with the xml from the Application directory AccelrysDraw-net.xml
            if it's not one of these cases and s is not null use s.
            otherwise, use the default as explained above.
            </summary>
            <param name="r"></param>
            <param name="s"></param>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.ClearPopup">
            Empties the popup menu 
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.AddPopupMenuItem(System.ComponentModel.Component,System.String,System.Boolean,System.Boolean)">
            Adds an item to the popup menu
            @param item JComponent item to be added
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.AddSubmenuToPopup">
            <summary>
            This method should be called AFTER all menu item is added through addPopupMenuItem()
            This method adds the submenu (atomSubTitle..) to the popup so that it appears at the end
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.ProcessSubmenuForPopup(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            called by AddSubmenuToPopup() which checks for null, items > 0, and removes trailing
            separator menu items. for cct58539
            </summary>
            <param name="mItem">the menu item to be added, potentially with a submenu</param>
            <returns>true for success, false for null MenuItem input, or empty submenu.</returns>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.AddSeparatorToPopup">
            Adds a separator in the popupmenu 
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.AddSeparatorTo(System.Windows.Forms.ToolStripMenuItem)">
            Adds a separator in the popupmenu 
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.DisplayPopup(System.Windows.Forms.Control,System.Int32,System.Int32)">
            Displays the popup menu at x/y and associated help in the help panel
            @param xcoord integer of the x coordinate of the popup menu
            @param ycoord integer of the y coordinate of the popup menu
            
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.CloseAllForms">
            <summary>
            set to true during closing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.IsOLEServer(System.Int32)">
            <summary>
            check if this instance is an OLE server for another MDL Draw editor
            </summary>
            <param name="contID">OLE container ID</param>
            <returns>true for success, otherwise - false.</returns>
        </member>
        <member name="M:MDL.Draw.Editor.DrawApp.InsertMDLDrawOLEObject(System.Byte[])">
            <summary>
            insert MDL Draw molecule, created another MDL Draw editor as an OLE server
            </summary>
            <param name="data">sketch byte array</param>
        </member>
        <member name="P:MDL.Draw.Editor.DrawApp.ApplicationForm">
            <summary>
            return the application form
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.DrawApp.Preferences">
            <summary>
            a DisplayPreferences object that can be shared with other editors/renderers.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.DrawApp.IsStandalone">
            <summary>
            was this instance of draw called from a renditor (or Hotlink)?
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.DrawApp.EditorModule">
             <exclude/>
        </member>
        <member name="P:MDL.Draw.Editor.DrawApp.OLEContainerID">
            <summary>
            set OLE container ID
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.DrawApp.OLEServerID">
            <summary>
            add OLE server ID
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.DrawInstanceList">
            <summary>
            A container for DrawApp instances.
            Typical usage is to do something like
                   MDL.Draw.Editor.DrawInstanceList instancelist = new MDL.Draw.Editor.DrawInstanceList();
                   instancelist.Start(draw);
            to create the first instance.
            further instances are created with       
                   drawapp.drawInstanceList.AddInstance(drawapp);             
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawInstanceList.Start(MDL.Draw.Editor.DrawApp)">
            <summary>
            Adds the instance to our array of instances, show the instance and start a message queue.
            We also add ourselves as listener to the closed event to remove the source from the 
            array of drawapp and exit when the array becomes empty.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:MDL.Draw.Editor.DrawInstanceList.Start">
            <summary>
            calls Application.Run()
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.DrawInstanceList.AddInstance(MDL.Draw.Editor.DrawApp)">
            <summary>
            use the instance passed in to find the configuration and create a new 
            instance of drawapp initialized with the same config. add the new instance
            to our internal arraylist of instances.
            this class listens to the the new instance closed event to remove the instance 
            from the array of instances and exit when the array is empty.
            The drawapp drawinstancelist field is set to the drawionstacelist object (this)
            </summary>
            <param name="instance">a drawapp to use as model for creating a new one</param>
            <returns>a new instance of DrawApp, ready to be made visible.</returns>
        </member>
        <member name="P:MDL.Draw.Editor.DrawInstanceList.Instances">
            <summary>
            returns a read only wrapper to the instances list 
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.NamespaceDoc">
            <summary>
            Contains the Renditor class (a Renditor is a special Renderer than can launch the editor) 
            and related items.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.EditorReturnedHandler">
            <summary>
            Delegate for event. See 
            <see cref="T:MDL.Draw.Renditor.EditorReturnedEventArgs"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.StructureChangedEventHandler">
            <summary>
            Delegate for event. See 
            <see cref="M:MDL.Draw.Renditor.IRenditorEvents.ComStructureChanged"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.IRenditorEvents">
            <summary>
            Contains the <c>ComStructureChanged</c> method to support hosting a Renditor in an HTML page.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.IRenditorEvents.ComStructureChanged">
            <summary>
            A method that can be used to track a change to a structure 
            in a Renditor that is hosted in an HTML page. 
            See the Demo Renditor Event example, which is 
            <c>RenditorEvent.htm</c> inside the <c>IE</c> subdirectory 
            of the <c>Examples</c> directory.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.Renditor">
             <summary>The Renditor is a special Renderer  
             that allows the end-user to transfer a structure to and from Symyx Draw's 
             structure Editor.</summary>
             <remarks>
             <ul><li>To specify whether this Renditor can launch the editor, 
             use <see cref="P:MDL.Draw.Renditor.Renditor.EditingEnabled"/>. You can also customize the Renditor's right-click menu with 
             <see cref="P:MDL.Draw.Renditor.Renditor.ClearingEnabled"/>, <see cref="P:MDL.Draw.Renderer.Renderer.CopyingEnabled"/>, and <see cref="P:MDL.Draw.Renderer.Renderer.PastingEnabled"/>. 
             (The right-click menu uses the .NET 2.0 <c>ContextMenuStrip</c> class.)</li>
             <li>To specify a non-default XML file to configure this 
             Renditor, use <see cref="F:MDL.Draw.Renditor.Renditor.XMLConfig"/></li>
             <li>To get and set the name of this Renditor for display in the Editor, use 
             <see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/></li>
             <li>To specify to which Editor this Renditor transfers to, use 
             <see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/></li>
             <li>To set two Renditors to share the same Preferences property, see the example below.</li>
            	<li>To programmatically launch the Editor, use 
             <see cref="M:MDL.Draw.Renditor.Renditor.FireEditor"/></li>	
             <li>To add functionality when the end-user clicks the Transfer button, use 
             <see cref="M:MDL.Draw.Renditor.Renditor.DrawDone"/> in your specialization of the Renditor</li> 
             <li>To disable (or enable) the Chemistry check warning to end-users while transfering 
             the structure from the editor to the renditor, use <see cref="P:MDL.Draw.Renditor.Renditor.StructureValidation"/></li>
             <li>To make the Editor modal, place the Renditor in a modal form. 
             (Symyx Draw, by default, is a modeless application. 
             There is no API to make the Symyx Draw editor modal. 
             However, if the form that contains the Renditor that invokes the Editor is modal, 
             then the Editor will also be modal.)</li>
             <li>Note: To determine if the Editor returned because it was cancelled, use <see cref="F:MDL.Draw.Renditor.EditorReturnedEventArgs.Validated"/></li> 
             </ul></remarks>
             <example>
             This example sets two Renditors to have the same Preferences property. 
             <code>
             namespace Example {
               public partial class TwoRenditorsSharingPreferences : Form {
                 public TwoRenditorsSharingPreferences () {
                   InitializeComponent();
                   MDL.Draw.Renditor.Renditor r1 = new MDL.Draw.Renditor.Renditor();
                   r1.Dock = DockStyle.Left;
                   MDL.Draw.Renditor.Renditor r2 = new MDL.Draw.Renditor.Renditor();
                   r2.Dock = DockStyle.Right;
                   r2.Preferences = r1.Preferences;
                   Controls.Add(r1);
                   Controls.Add(r2); 
                 }
               }
             }
             </code>
            </example>
        </member>
        <member name="T:MDL.Draw.Interfaces.IRenditor">
            <summary>
             This interface is implemented by Renditor and is used for any action by any object that needs to launch 
             Draw and get the molecule when Done is pressed.
             </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.CancelEditor">
            <summary>
            Cancels the request for editing so that control returns to this renditor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.XMLConfig">
            <summary>
            The XMLConfig file that configures this Renditor. Default: <c>null</c>
            </summary>
            <remarks><ul><li>Setting a value on this property is optional.</li>
            <li>To specify an xml file that configures this Renditor, set a value
            before loading the Renditor.</li>
            <li>For other ways to set the XML Configuration file, including by command line, see 
            Symyx Draw Configuration Guide > Symyx Draw Configuration Tasks > Setting the XML Configuration File.</li>
            </ul>
            The following example code assumes you are using <c>System.IO</c></remarks>
            <example>
            <code>// Specify the XML configuration file to use
            StreamReader sr = new StreamReader(@"c:\test.xml");
            renditor.XMLConfig = sr.BaseStream;</code>
            </example>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.EditorTag">
            <summary>
            Enables you to assign a tag to a particular Editor, so that you can assign 
            one or more Renderers to transfer to that particular Editor.
            </summary>
            <remarks><ul><li>Setting a value on this property is optional.</li>
            <li>By default, each Renderer has its own Editor instance.</li>
            <li>If you want to set the EditorTag, do so immediately after creating 
            the Renditor, or else call the constructor that has the EditorTag parameter.</li>
            <li>Once the EditorTag has been set, do not reset it during runtime.</li>
            </ul></remarks>
            <example><code>
            myRenditor1.EditorTag = 1;
            myRenditor2.EditorTag = 2;
            myRenditor3.EditorTag = 2;
            myRenditor4.EditorTag = "mySpecialEditor";</code></example>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor._showHatched">
             <summary>
            use when painting. if true will paint a hatched pattern on top of renditor to show that it is currently being edited.
             </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor._editMenu">
            <summary>
            context menu item for edit
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor._clearMenu">
            <summary>
            context menu item for clear
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.#ctor(System.String)">
            <summary>
            Constructor that takes a <see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/> argument for this Renditor.
            </summary>
            <param name="name">renditor name</param>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.#ctor(System.String,System.Object)">
            <summary>
            Constructor that takes a <see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/> argument and an 
            <see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/> argument for this Renditor.
            </summary>
            <param name="name"><see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/></param>
            <param name="editortag"><see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/></param>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.#ctor(System.String,System.Object,System.String)">
            <summary>
            Constructor that takes a <see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/> argument,
            <see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/> argument and Preferences File argument for this Renditor.
            </summary>
            <param name="name"><see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/></param>
            <param name="editortag"><see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/></param>
            <param name="prefsFileName">preferences file name</param>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.table">
            <summary>
            hashtable to map the tags with the editors.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.oldScalingMode">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.InitDrawApp">
            <summary>Hook to initialize DrawApp in a background thread, added for Base.</summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.contextmenustrip">
            <summary>
            the context menu strip which contains men items for clipboard and editing operations
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.Clear(System.Object,System.EventArgs)">
            <summary>
            Called when the user wants to Clear
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.Edit(System.Object,System.EventArgs)">
            <summary>
            called when the users wants to Edit
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.ShowDraw">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.RestorePreferences">
            <exclude/>	
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.RenditorEvent_StructureChanged(System.Object,System.EventArgs)">
            <summary>
            additional StructureChanged event handler for IE6 clients
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.SetData(MDL.Draw.Chemistry.Molecule)">
            <summary>
            Sets the data in the editor and check whether it needs to translate it. 
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.FireEditor">
            <summary>
            Launches the Editor. For example, a web page button can have a JavaScript callback 
            that starts the Editor without the end-user having to double-click the Renditor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.DrawDone">
            <summary>
            By default does nothing, but a class that specializes the Renditor 
            can use this method to add functionality when the user clicks the Done button.
            (For example, to call an Symyx Cheshire script, assuming you have the full license to Symyx Cheshire.)
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.MDL#Draw#Interfaces#IRenditor#get_Preferences">
             <summary>The Renditor is a special Renderer  
             that allows the end-user to transfer a structure to and from Symyx Draw's 
             structure Editor.</summary>
             <remarks>
             <ul><li>To specify whether this Renditor can launch the editor, 
             use <see cref="P:MDL.Draw.Renditor.Renditor.EditingEnabled"/>. You can also customize the Renditor's right-click menu with 
             <see cref="P:MDL.Draw.Renditor.Renditor.ClearingEnabled"/>, <see cref="P:MDL.Draw.Renderer.Renderer.CopyingEnabled"/>, and <see cref="P:MDL.Draw.Renderer.Renderer.PastingEnabled"/>. 
             (The right-click menu uses the .NET 2.0 <c>ContextMenuStrip</c> class.)</li>
             <li>To specify a non-default XML file to configure this 
             Renditor, use <see cref="F:MDL.Draw.Renditor.Renditor.XMLConfig"/></li>
             <li>To get and set the name of this Renditor for display in the Editor, use 
             <see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/></li>
             <li>To specify to which Editor this Renditor transfers to, use 
             <see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/></li>
             <li>To set two Renditors to share the same Preferences property, see the example below.</li>
            	<li>To programmatically launch the Editor, use 
             <see cref="M:MDL.Draw.Renditor.Renditor.FireEditor"/></li>	
             <li>To add functionality when the end-user clicks the Transfer button, use 
             <see cref="M:MDL.Draw.Renditor.Renditor.DrawDone"/> in your specialization of the Renditor</li> 
             <li>To disable (or enable) the Chemistry check warning to end-users while transfering 
             the structure from the editor to the renditor, use <see cref="P:MDL.Draw.Renditor.Renditor.StructureValidation"/></li>
             <li>To make the Editor modal, place the Renditor in a modal form. 
             (Symyx Draw, by default, is a modeless application. 
             There is no API to make the Symyx Draw editor modal. 
             However, if the form that contains the Renditor that invokes the Editor is modal, 
             then the Editor will also be modal.)</li>
             <li>Note: To determine if the Editor returned because it was cancelled, use <see cref="F:MDL.Draw.Renditor.EditorReturnedEventArgs.Validated"/></li> 
             </ul></remarks>
             <example>
             This example sets two Renditors to have the same Preferences property. 
             <code>
             namespace Example {
               public partial class TwoRenditorsSharingPreferences : Form {
                 public TwoRenditorsSharingPreferences () {
                   InitializeComponent();
                   MDL.Draw.Renditor.Renditor r1 = new MDL.Draw.Renditor.Renditor();
                   r1.Dock = DockStyle.Left;
                   MDL.Draw.Renditor.Renditor r2 = new MDL.Draw.Renditor.Renditor();
                   r2.Dock = DockStyle.Right;
                   r2.Preferences = r1.Preferences;
                   Controls.Add(r1);
                   Controls.Add(r2); 
                 }
               }
             }
             </code>
            </example>
        </member>
        <member name="M:MDL.Draw.Renditor.Renditor.MDL#Draw#Interfaces#IRenditor#set_Preferences(MDL.Draw.Renderer.Preferences.DisplayPreferences)">
             <summary>The Renditor is a special Renderer  
             that allows the end-user to transfer a structure to and from Symyx Draw's 
             structure Editor.</summary>
             <remarks>
             <ul><li>To specify whether this Renditor can launch the editor, 
             use <see cref="P:MDL.Draw.Renditor.Renditor.EditingEnabled"/>. You can also customize the Renditor's right-click menu with 
             <see cref="P:MDL.Draw.Renditor.Renditor.ClearingEnabled"/>, <see cref="P:MDL.Draw.Renderer.Renderer.CopyingEnabled"/>, and <see cref="P:MDL.Draw.Renderer.Renderer.PastingEnabled"/>. 
             (The right-click menu uses the .NET 2.0 <c>ContextMenuStrip</c> class.)</li>
             <li>To specify a non-default XML file to configure this 
             Renditor, use <see cref="F:MDL.Draw.Renditor.Renditor.XMLConfig"/></li>
             <li>To get and set the name of this Renditor for display in the Editor, use 
             <see cref="P:MDL.Draw.Renditor.Renditor.RenditorName"/></li>
             <li>To specify to which Editor this Renditor transfers to, use 
             <see cref="F:MDL.Draw.Renditor.Renditor.EditorTag"/></li>
             <li>To set two Renditors to share the same Preferences property, see the example below.</li>
            	<li>To programmatically launch the Editor, use 
             <see cref="M:MDL.Draw.Renditor.Renditor.FireEditor"/></li>	
             <li>To add functionality when the end-user clicks the Transfer button, use 
             <see cref="M:MDL.Draw.Renditor.Renditor.DrawDone"/> in your specialization of the Renditor</li> 
             <li>To disable (or enable) the Chemistry check warning to end-users while transfering 
             the structure from the editor to the renditor, use <see cref="P:MDL.Draw.Renditor.Renditor.StructureValidation"/></li>
             <li>To make the Editor modal, place the Renditor in a modal form. 
             (Symyx Draw, by default, is a modeless application. 
             There is no API to make the Symyx Draw editor modal. 
             However, if the form that contains the Renditor that invokes the Editor is modal, 
             then the Editor will also be modal.)</li>
             <li>Note: To determine if the Editor returned because it was cancelled, use <see cref="F:MDL.Draw.Renditor.EditorReturnedEventArgs.Validated"/></li> 
             </ul></remarks>
             <example>
             This example sets two Renditors to have the same Preferences property. 
             <code>
             namespace Example {
               public partial class TwoRenditorsSharingPreferences : Form {
                 public TwoRenditorsSharingPreferences () {
                   InitializeComponent();
                   MDL.Draw.Renditor.Renditor r1 = new MDL.Draw.Renditor.Renditor();
                   r1.Dock = DockStyle.Left;
                   MDL.Draw.Renditor.Renditor r2 = new MDL.Draw.Renditor.Renditor();
                   r2.Dock = DockStyle.Right;
                   r2.Preferences = r1.Preferences;
                   Controls.Add(r1);
                   Controls.Add(r2); 
                 }
               }
             }
             </code>
            </example>
        </member>
        <member name="E:MDL.Draw.Renditor.Renditor.EditorReturned">
            <summary>
            Supports event handling for tracking that an Editor has returned.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.UseLocalXMLConfig">
            <summary>
            Set BEFORE the renditor creates an editor.
            If <c>true</c>, the editor is created using the config XML from the local file system.  
            For example, <c>C:\Program Files\Accelrys\Accelrys Draw 4.1\AccelrysDraw-net.xml</c>
            default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.EditingEnabled">
            <summary>
            Specifies whether this Renditor enables editing. 
            If <c>true</c>, the end-user can launch an Editor by 
            double-clicking and also right-click to get a context menu that allows edit 
            and copy. If <c>false</c>, structures can only be rendered. 
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.ClearingEnabled">
            <summary>
            Specifies whether this Renditor enables clearing. 
            If <c>true</c>, the end-user can clear the structure.
            If <c>false</c>, the menu is showed grayed out.
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.StructureValidation">
            <summary>
            Specifies whether structure validation is set <c>On</c> or <c>Off</c>. 
            If <c>On</c>, the Chemistry check warning can display while transfering a structure from the editor to the renditor.
            To disable, write code such as: 
            <code>YourRenditorInstance.StructureValidation = MDL.Draw.Renditor.Renditor.StructureValidatonMode.Off;</code> 
            For possible values, see the <see cref="T:MDL.Draw.Renditor.Renditor.StructureValidationMode"/> enum. Default: <c>On</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.RenditorName">
            <summary>
            The name of this Renditor. 
            Example: The RenditorDemo uses <c>RenditorName</c> 
            in the tooltip of the Editor's <c>Done</c> button: "Transfer to Demo Renditor".
            Default: <c>null</c>
            </summary>
        </member>
        <member name="E:MDL.Draw.Renditor.Renditor.ComStructureChanged">
            <summary>
            Supports event handling for tracking a change to a structure in 
            a Renditor that is hosted in an HTML page.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.TheDrawApp">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renditor.Renditor.RenditorMolecule">
            <summary>
            Returns the Molecule in this Renditor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.Renditor.StructureValidationMode">
            <summary>
            Specifies the constants to use when setting the value of the <see cref="P:MDL.Draw.Renditor.Renditor.StructureValidation"/> property.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.StructureValidationMode.On">
            <summary>
            Displays the structure validation warning on transfer
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.Renditor.StructureValidationMode.Off">
            <summary>
            Does NOT display the structure validation warning on transfer
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.Renditor.FormShowDelegate">
            <exclude/>
        </member>
        <member name="T:MDL.Draw.Renditor.EditorReturnedEventArgs">
            <summary>
            This class enables an application containing a renditor to be notified when the Editor closes and the control returns to the Renditor. 
            See the <see cref="F:MDL.Draw.Renditor.EditorReturnedEventArgs.Validated"/> field and the MDL.Draw.Renditor.EditorReturnedHandler delegate.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.EditorReturnedEventArgs.Validated">
            <summary>
            Indicates whether the control returns to the Renditor because the user 
            validated (<c>true</c>) the structure (and chose to transfer back to the Renditor) or 
            cancelled (<c>false</c>) the operation (chose to close the Editor without transferring the structure to the Renditor). 
            For example, the end-user might consider the structure in the Editor to be valid (<c>true</c>) and transfer it back to the Renditor. 
            If the end-user cancels the operation (<c>false</c>), the Editor closes without transferring the structure to the Renditor.
            </summary>
        </member>
        <member name="M:MDL.Draw.SplashScreen.SplashScreen.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MDL.Draw.SplashScreen.SplashScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.SplashScreen.SplashScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.ICommandHandler.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            <summary> Implement this method in order to respond to a CommandEventArgs.
            e.g.
            <code>
            public void commandPerformed(CommandEventArgs ce) {
                  String cmd = ce.getCommand();
                  if(cmd.equalsIgnoreCase("textbox1")) {
                     System.out.println("Value = " + ce.getValue());
                  }
                  else if...
               }</code>
            </summary>
            <param name="ce"> the command event
            
            </param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IUpdater.IsUpdateableCmd(System.String)">
            <summary> Returns true if the argument cmd is "undateableCmds" array. Note: Called from XMLControl
            </summary>
            <param name="cmd">String containing command argument
            </param>
            <returns>boolean, true if cmd is "undateableCmds", else false
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Interfaces.IUpdater.AddUpdateableWidget(MDL.Draw.Modules.Widget)">
            <summary> Adds the updateable widget to the classes vector if this widget is "isUpdateableCmds". Note: Called from XMLControl
            </summary>
            <param name="wid">the widget to be added.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IUpdater.RemoveUpdateableWidget(MDL.Draw.Modules.Widget)">
            <summary> Removes the widget from the updateable widgets vector
            </summary>
            <param name="wid">the widget to be removed.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IUpdater.GetUpdateableWidget(System.String)">
            <summary> Returns the widget the argument command belongs to, so the "updateable" components can be updated
            </summary>
            <param name="cmd">String containing the command argument
            </param>
            <returns>the widget
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.Init(System.ComponentModel.Component)">
            <summary>
            called when everything is ready in case the action needs to do more initialization.
            e.g. wants to set the tooltip to the button: needs to wait until button is there.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>Boolean value that is set to stop action event processing to be propagated
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.PerformAction(System.Object,System.EventArgs)">
            <summary>
            shows help and call ActionPerformed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.UpdateableCmds">
            <summary>	Every tool or action should have this updateableCmds array filled in with "command" strings
            to be able to update them.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.UpdateableWidgets">
            <summary> <b>For internal use only</b>
            @exclude
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.IsUpdateableCmd(System.String)">
            <summary> Returns true if the argument cmd is in the updateableCmds array,
            false otherwise.  Method is called from XMLControl.
            </summary>
            <param name="cmd">a string containing the command argument
            </param>
            <returns>boolean, true if the argument cmd is in the updateableCmds array
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.AddUpdateableWidget(MDL.Draw.Modules.Widget)">
            <summary> Adds the updateable widget to the classes vector if this widget
            is "isUpdateableCmds".  Method is called from XMLControl.
            </summary>
            <param name="wid">the Widget
            
            </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.RemoveUpdateableWidget(MDL.Draw.Modules.Widget)">
            <summary> Removes the widget from the updateable widgets vector </summary>
            <param name="wid"> The Widget </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GenericEditorAction.GetUpdateableWidget(System.String)">
            <summary> Returns the widget to which the argument command belongs so that the
            "updateable" components can be updated.
            </summary>
            <param name="cmd">a string containing the argument command
            </param>
            <returns>the widget the argument command belongs to.
            
            </returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.FormattingToolbarFadeOnOffAction">
            <summary>
            action for toggling the fading mode of the formatting toolbar.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FormattingToolbarFadeOnOffAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.FormattingToolbarOnOffAction">
            <summary>
            action for toggling the visibility of the formatting toolbar.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FormattingToolbarOnOffAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            toggle ruler visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FormattingToolbarOnOffAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.GridSettingsAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.InsertAction">
            <summary> Action handler that will insert a specified structure from a file
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.RenameAction">
            <summary> Save a structure to disk with current name if any.
            if no name was specified, same as SaveStructureAs </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.NewTabAction">
            <summary>
            NewTabAction. Creates a new instance of MDLDraw and show it.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ShowSequenceViewAction">
            <summary>
            action for toggling the ShowSequenceView setting
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.InsertInChIStringAction">
            <summary>
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DisplayNEMAStringAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            called when manu is about to become visible.
            Do not set the visivbe flag as because of a bug in .NET it would mess with the display of the menu.
            (it is ok to REMOVE the menuitem from its parent)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.DocumentBorderDisplayAction">
            <summary>
            action for toggling the visibility of the ruler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DocumentBorderDisplayAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            toggle document border display setting
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DocumentBorderDisplayAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ShowStereoConfigAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ShowUrlAction">
            <summary>
            Show URL
            in xml specify the url that this action will browse to when performed.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.GridOnOffAction">
            <summary>
            action for toggling the visibility of the ruler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GridOnOffAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            toggle grid visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.GridOnOffAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.InsertIUPACNameAction">
            <summary>
            Summary description for LoadAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.InsertSMILESAction">
            <summary>
            Summary description for LoadAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.ConfigurableChemInspectorAction">
            <summary>  Run cheshire script listed in queryCheckList (defined inside Class) and display the result.
            The dialog is configured by XML
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ChemistryAction">
            <summary>  Run cheshire on editor molecule and set the output molecule to editor.
            It doesn't have file reading capability
            This class (as well as any other Editor action class) can be added to other action class as a listener.
            Usage in xml :
            <action class="class" 
             tooltip="docString" 
             listener="MDL.Draw.Modules.Editor.Tools.ChemistryAction"
            />
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ChemistryAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets the menuitem enabled property true if there is a suitable structure/selection on the canvas.
            if there is no selection, menuitem is enabled if the structure contains atoms (at least one)
            if there is a selection,  menuitem is enabled if the selection contains some chemistry
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.CheshireAction.ranonce">
            <summary> Run at initialization of the action
            parses "load" and "exec" parameters
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Actions.CheshireAction.ExecString">
            <summary>
            The command that specifies the script(s) to execute.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Actions.CheshireAction.FileName">
            <summary>
            The name of the file that contains 
            the Cheshire script to execute.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ShowCustomModificationBrowser">
            <summary>
            Show Help
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.CustomModificationBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CustomModificationBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CustomModificationBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.DSVisualizerDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DSVisualizerDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DSVisualizerDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SimpleDataSgroupDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SimpleDataSgroupDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SimpleDataSgroupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.AtomValueDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AtomValueDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AtomValueDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.BracketToolDialog2.brackettool">
            <summary>
            the tool that created this dialog 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.BracketToolDialog2.BracketTypeComboBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            when the Bracket type combobox has its value change update the other controls in the dialog.
            for example if it's SRU the SRU text field must be visible but others like the order number should not. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.BracketToolDialog2.UpdateSgroup">
            <summary>
            updates the given Sgroup with the values in the dialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.BracketToolDialog2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.BracketToolDialog2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.BracketToolDialog2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IInitCleanupHolder.Init">
            <summary>
            run when  this tool becomes current tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IInitCleanupHolder.ReInit">
            <summary>
            run when this tool is already active and it is re selected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Interfaces.IInitCleanupHolder.CleanUp">
            <summary>
            run when this tool is about to stop being current tool
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.CalculateAsYouDrawDialog">
            <summary>
            action to display a modeless dialog that updates its fields while the structure is modified.
            it displays informations like ALogP or MolWeight. 
            if the Calculator action (MolValues) is specified and uses a different weights script, that script will also be used by this action
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.CalculateAsYouDrawDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CalculateAsYouDrawDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CalculateAsYouDrawDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ChainTextDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ChainTextDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ChainTextDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ChemCheckDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ChemCheckDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ChemCheckDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.CustomButtonSizeDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CustomButtonSizeDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CustomButtonSizeDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.Init(MDL.Draw.Renderer.Preferences.DisplayPreferences,MDL.Draw.Rendering.MoleculeRenderer.GridType,System.Double,System.Boolean,MDL.Draw.Modules.Editor.EditorModule,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="prefs"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="useStdBondL"></param>
            <param name="editor"></param>
            <param name="drawLines"></param>
            <param name="snap2Grid"></param>
        </member>
        <member name="F:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.GridSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.UseStdBondLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.Snap2Grid">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.DrawLines">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.EditorControl.dialogs.GridSettingsDialog.GridType">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.InChIStringEntryDialog">
            <summary>
            Summary description for AboutBox.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.InChIStringEntryDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.InChIStringEntryDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.InChIStringEntryDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.Create3DDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.Create3DDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.Create3DDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.InChIToStructureProgressForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.InChIToStructureProgressForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.InChIToStructureProgressForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.InformationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.InformationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.InformationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.MsgBoxEx">
            <summary>
            Simple resizable dialog for displaying a message to the user with a "do not show me again"
            checkbox. It is up to the caller to keep track of this.
            Button Options are as follows: 0 == OK + Cancel, 1 == OK Only, 2 == Yes + No
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxEx.#ctor(System.Windows.Forms.Form,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="sText"></param>
            <param name="sCaption"></param>
            <param name="btnOptions">0 = OKCancel, 1 = OKOnly, 2 = YesNo. A future upgrade is to support all MessageBox flavors.</param>
            <param name="showDONotShow">true (default) to display the Do not show me again this dialog checkbox. false to hide the checkbox.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxEx.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxEx.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.MsgBoxEx.Message">
            <summary>
            The text displayed
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.MsgBoxEx.DontWarn">
            <summary>
            true if the user checked the Don't warn me again checkbox.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExSimple">
            <summary>
            Simple resizable dialog for displaying a message to the user on the center of the parent form
            Button Options are as follows: 0 == OK + Cancel, 1 == OK Only, 2 == Yes + No
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExSimple.#ctor(System.Windows.Forms.Form,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="sText"></param>
            <param name="sCaption"></param>
            <param name="btnOptions">0 = OKCancel, 1 = OKOnly, 2 = YesNo. A future upgrade is to support all MessageBox flavors.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExSimple.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExSimple.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExSimple.Message">
            <summary>
            The text displayed
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.RemoveOriginalCoordsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RemoveOriginalCoordsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RemoveOriginalCoordsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.RenameTabDialogBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RenameTabDialogBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RenameTabDialogBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.RgroupLogicDialog1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RgroupLogicDialog1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RgroupLogicDialog1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SequenceCustomModDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceCustomModDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceCustomModDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SequenceModificationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceModificationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceModificationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SequenceZoomDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceZoomDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceZoomDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.StructureResolverDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.StructureResolverDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.StructureResolverDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.StructureResolver.APIFuncs">
            <summary>
            Summary description for APIFuncs.
            </summary>
        </member>
        <member name="T:MDL.Draw.StructureResolver.APIFuncs.User32">
            <summary>
            Windows User32 DLL declarations
            </summary>
        </member>
        <member name="T:MDL.Draw.StructureResolver.APIFuncs.Msgs">
            <summary>
            Windows Event Messages sent to the WindowProc
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.frmAddChemTextType.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmAddChemTextType.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmAddChemTextType.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.frmAutoSaveOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmAutoSaveOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmAutoSaveOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.frmChemTextTypes.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmChemTextTypes.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmChemTextTypes.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.frmServices.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmServices.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmServices.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.frmServiceSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmServiceSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmServiceSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.frmStatus.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmStatus.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.frmStatus.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.StructureResolver.ListBuilder.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.StructureResolver.ListBuilder.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.StructureResolver.ListBuilder.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.TemplateZoomDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.TemplateZoomDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.TemplateZoomDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.WarningBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.WarningBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.WarningBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Gui.Ruler">
            <summary>
            Ruler class.
            class that represents a ruler.
            set 
            Horizontal (true/false)
            the MinPaper and MaxPaper (e.g. 0 and 8.5 (inches))
            the LeftMargin and RightMargin (positive in (e.g. 1 (inch))
            the Min and Max (coordinates of left and right edges of the ruler)
            
            You can use data bindings to update the [Min|Max]Paper, and [Min|Max].
            
            The ruler allows to update the Margins by dragging them with the mouse.
            You can use data bindings to listen to changes on the margins.
            </summary>
        </member>
        <member name="F:MDL.Draw.Gui.Ruler.MarginStep">
            <summary>
            how many steps in a unit. e.g. set to 4 for 1/4 unit steps.
            </summary>
        </member>
        <member name="F:MDL.Draw.Gui.Ruler.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.Ruler.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Gui.Ruler.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.CanvasAdapter">
            <summary>
            Summary description for CanvasAdapter.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.CanvasAdapter.Init">
            <summary>
            run when  this tool becomes current tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.CanvasAdapter.ReInit">
            <summary>
            run when this tool is already active and it is re selected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.CanvasAdapter.CleanUp">
            <summary>
            run when this tool is about to stop being current tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IControlHolder.AddControl(System.ComponentModel.Component,System.String)">
            <summary> Add given control and save it somehow to be used later.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IControlHolder.GetControl(System.String)">
            <summary>Get the control by given command
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IControlHolder.RemoveControl(System.String)">
            <summary> Remove given control. This control won't be available from GetControl once this is called.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.stopMultiLoop">
            <summary>Boolean value that is set to stop MultiTool's loop
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.PushButton">
            <summary>
            pushes button and make sure image is correct.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.IsInEditingObjectMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.dialogWidgets">
            The Hashtable listing of dialog widgets 
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.StopMultiLoop">
            <summary>Boolean value that is set to stop MultiTool's loop
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.pickedAtom">
            <summary>The atom that was picked (or null if no atom was picked). 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.pickedBond">
            <summary>The bond that was picked (or null if no bond was picked). 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.pickedMolecule">
            <summary> The molecule that the picked object belonged to (null if nothing
            has been picked).
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.DeterminePickedObject(MDL.Draw.Rendering.CanvasObject)">
            <summary> Figure out which object got picked.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>For internal use only. Do not use.
            @exclude
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>For internal use only. Do not use.
            @exclude
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>For internal use only. Do not use.
            @exclude
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>For internal use only. Do not use.
            @exclude
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>For internal use only. Do not use.
            @exclude
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.ObjectIsHandled(MDL.Draw.Rendering.CanvasObject)">
            <summary>This handles ALL object types except for those associated with
            fragment objects
            </summary>
            <param name="canvasObject">canvasObject
            </param>
            <returns> true if this tool handles the passed in canvasObject, false otherwise
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.AddMenuClickEventHandler(System.Windows.Forms.ToolStripMenuItem)">
            <summary> Adds actionListener to element of menuItems vector if it's a JMenu(submenu)
            Since they didn't get added at the instantiation time.
            </summary>
            <param name="item">a JMenu object ????
            </param>
            <author>  ymk
            </author>
            <version>  04-26-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.Init">
            <summary> Called when this is made the active action handler on the editor.
            overrides CanvasAdapter.
            Note: Clears menuItems Vector and adds again.
            </summary>
            <author>  jbo
            </author>
            <version>  12-04-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.AddToMenuItems(System.ComponentModel.Component,System.String)">
            <summary>
            Adds trigger value with corresponding menu item widgets as a System.Collections.ArrayList
            </summary>
            <param name="menuItem">menu item widget to be added</param>
            <param name="trigger">String containing the trigger value</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.AddDialogWidget(MDL.Draw.Gui.DialogWidget,System.String)">
            <summary>Adds trigger value with corresponding dialog widgets as a MTVector</summary>
            <param name="dialogWid">the dialog widget to be added
            </param>
            <param name="trigger">String containing the trigger value</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.ClearActiveMenuItems">
            <summary> This method needs to be called before the popupmenu is constructed
            so it can clear out any remaining old items.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.AddToActiveMenuItems(System.ComponentModel.Component,MDL.Draw.Nodes.NodeProperty)">
            <summary>For internal use only. Do not use.
            Adds a menuItem to activeMenuItems vector, then adds vector to the
            PopupMenu.  The menuItems added by this method will be displayed in popupmenu
            by displayMenuItems().
            NOTE: Doesn't change activeMenuItems vector if it's a static menu.
            </summary>
            <param name="menuItem">menuItem?</param>
            <param name="type">type?</param>
            <author>  ymk
            </author>
            <version>  04-25-01
            @exclude
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.DisplayMenuItems(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>For internal use only. Do not use.
            Adds active menuItems to the Popup Menu and displays it.
            NOTE: Doesn't clear and add again if it's just cleared
            (not changed since last display).  We should not Clear PopupMenu or
            display it if this method was called from MultiTool. MultiTool will take
            care of it.
            </summary>
            <param name="xcoord">integer defining the x coordinates to display the menu item</param>
            <param name="ycoord">integer defining the y coordinates to display the menu item</param>
            <param name="isSubTitle"></param>
            <param name="isTitle"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.GetSelectedObjectsOfGivenType(MDL.Draw.Rendering.Canvas,MDL.Draw.Nodes.NodeProperty)">
            <summary> Returns selected objects of a given Object type.
            </summary>
            <param name="canvas">the Canvas object to search for the object type
            </param>
            <param name="type">NodeProperty type of the desired object
            </param>
            <returns> System.Collections.ArrayList of selected objects
            *
            
            </returns>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.UpdateableCmds">
            <summary>	Every tool or action should have this updateableCmds array filled in with "command" strings
            to be able to update them.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.UpdateableWidgets">
            <summary>The updateable widget (has "isUpdateableCmds" property = true)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.IsUpdateableCmd(System.String)">
            <summary> Returns true if the argument cmd is "updateableCmds" array.
            Note: Method is called from XMLControl
            </summary>
            <param name="cmd">a String containing the command argument
            </param>
            <returns><c>true</c> if command is "updateable"
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.AddUpdateableWidget(MDL.Draw.Modules.Widget)">
            <summary> Adds the updateable widget to the classes vector if the widget is "isUpdateableCmds"
            Note: Method is called from XMLControl
            </summary>
            <param name="wid">the widget to add
            </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.RemoveUpdateableWidget(MDL.Draw.Modules.Widget)">
            <summary> Removes the widget from the updateable widgets vector
            </summary>
            <param name="wid">the widget to add
            
            </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.GetUpdateableWidget(System.String)">
            <summary> Returns the widget to which the argument command belongs, so the "updateable" components, can be updated
            </summary>
            <param name="cmd">a String containing the command argument
            </param>
            <returns> the widget to which the argument command belongs
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            <summary> Subclasses of EditorTool should implement this CommandListener interface method in order
            to respond to CommandEvents from child Swing components.
            <pre>
            For Example:
            public void commandPerformed(CommandEventArgs ce) {
            String cmd = ce.getCommand();
            Widget widget = ce.getWidget();
            if(cmd.equals("textbox1")) {
            //action to take when text is typed into textbox1 text box and a return key is pressed
            String textInTextBox1 = ce.getValue();
            } else if(cmd.equals("ok")) {
            //action to take when ok button is pressed...
            } else ...
            }
            </pre>
            *
            </summary>
            <param name="ce">CommandEventArgs
            
            </param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.GenericEditorTool.HandledObjectTypes">
            <summary>abstract method which EACH tool which inherits us must implement
            to indicate to us WHICH object types it handles
            Each tool must return an ARRAY of acceptable CHILDREN types for
            handled objects,
            OR it can return 'null' to indicate that ALL object types are handled
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAnnotationTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.ObjectIsHandled(MDL.Draw.Rendering.CanvasObject)">
            <summary>This handles ALL object types except for those associated with
            fragment objects
            </summary>
            <param name="canvasObject">canvasObject
            </param>
            <returns> true if this tool handles the passed in canvasObject, false otherwise
            </returns>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BracketTool._sgroup">
            <summary>
            current Sgroup.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.AtomLeadsToAnotherCrossingBond(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Atom,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            
            </summary>
            <param name="bond">bond we are going away from</param>
            <param name="atom">atom we try to see if it leads to a crossing bond</param>
            <param name="CrossingBonds">array of all crossingbonds</param>
            <param name="OutsideAtoms">Outside atoms </param>
            <param name="visited">arraylist of visited bonds to avoid going back to places we've already been</param>
            <param name="tabs">tabs to indent the trace</param>
            <returns>true if this atom leads to a crossing bond.</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.CleanUp">
            <summary>
            when tool becomes inactive (when another tool is selected
            check all sgroups are valid or remove them.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.ValidCrossingBondPosition(MDL.Draw.Chemistry.Bond)">
            <summary>
            an Sgroup cannot have crossing bonds on both sides of a crossing bond of another sgroup
            </summary>
            <param name="bond">the bond to validate</param>
            <returns></returns>
            
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.CanTraverseFromBondToBondInSgroupAvoidingBondsFromOtherSgroups(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Bond,System.Collections.ArrayList,MDL.Draw.Chemistry.Sgroup,System.Collections.ArrayList)">
            <summary>
            check whether it's possible to go from bond1 to bond2 of Sgroup without going through bonds of other Sgroups.
            </summary>
            <param name="bond1"></param>
            <param name="bond2"></param>
            <param name="atomlist">list of atoms aleady traversed</param>
            <param name="sgroup"></param>
            <param name="sgroups"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.ValidCrossingBondForSgroup(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Sgroup)">
            <summary>
            decide whether the clicked bond is a valid position for the current Sgroup 
            or if a new Sgroup needs to be created
            </summary>
            <param name="b">the bond to check</param>
            <param name="sg"> the Sgroup</param>
            <returns>if true, bond would be a valid crossing bond for current Sgroup</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.AtomIsConnectedToCrossingBond(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom)">
            <summary>
            check if atom a1 is connected to a crossing bond away from atom a2
            </summary>
            <param name="sg"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BracketTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>
            mouse released on a bond or an Sgroup  bracket
            </summary>
            <param name="event_Renamed"></param>
            <param name="canvasObject"></param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.BondChooserTool">
            <summary> SingleBondTool.java
            *
            </summary>
            <author> mikeh
            </author>
            <version> 0.1
            
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.bondOrder">
            <summary>Bond order that this tool creates.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.bondTopology">
            <summary>Bond topology that this tool creates.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.multiEndPoints">
            <summary>MultiEndPoitns bonds - new in Direct8, 2011.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.bondStereo">
            <summary>Stereo configuration that this tool creates. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't want to do it.
            So can't write this in EditorTool)
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.xdown">
            <summary>X coordinate where the mouse was pressed. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.ydown">
            <summary>Y coordinate where the mouse was pressed.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.nearRingAtom">
            <summary>The bond that was picked or null. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.newAtom">
            <summary>The new atom that was created or null if we didn't create one yet. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.newBond">
            <summary>The bond that was created or null if we didn't make a bond. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.averageBondLength">
            <summary>The average bond length of the picked molecule. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.atomSnapTolerance">
            <summary> The tolerance that governs when we snap to an atom position.
            This should probably be the same value as the preference size
            for the atom highlight box.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondTool.snapAngle">
            <summary>The snap angle for constraining which direction a bond can go. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor. Creates a single bond tool. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.#ctor(MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor which allows specification of the bond order. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.AddBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Chemistry.Bond.StereoBondTypeEnum,MDL.Draw.Modules.Editor.EditorModule)">
            <summary> Convenience method to add a bond with the appropriate bond order and bond stereo.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.initialiseEditing(System.Windows.Forms.MouseEventArgs)">
            <summary> Common initialisation for picking on the canvas and over a canvas object.
            Resets all of the instance variables and records where the mouse down event occurred.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.setAverageBondLength">
            <summary> Set the average bond length and other editing variables.
            Rewrote to give default averageBondLength if no molecule defined.
            Sets:
            atomSnapTolerance and clickTolerance
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Ends undo block.
            </summary>
            <author>  jbo
            </author>
            <version>  5-3-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondTool.ClickOnBond(MDL.Draw.Chemistry.Bond)">
            <summary>
            when a bond is clicked, changes bond order
            NOTE: THIS METHODS RESETS AND CREATES A NEW UNDO BLOCK BUT DOES NOT CLOSE THE UNDO BLOCK.
            THE UNDO BLOCK MUST BE CLOSE AFTER RETURNING.
            </summary>
            <param name="pickedBond"></param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.BondTool.BondOrder">
            <summary>Get/Set the bond order. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.BondTool.BondTopology">
            <summary>Get/Set the bond order. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.BondTool.MultiEndPoints">
            <summary>Get/Set the MultiEndPoitns bonds. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.BondTool.BondStereo">
            <summary>Get/Set the bond stereo. </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool">
            <summary>
            in inherited classes override metods prefixed with 'sh'
            <remarks>
            algorithm by events:
            1: Mouse Move
               > select currentMarker
               .
            2: Mouse Pressed
               > new MouseInfo
               > check currentMarker and set currentObject (null or existed object)
               .
            3: Mouse Drag
               > if MouseInfo
                   > check currentObject and create outline
               .
            4: Mouse Release
               > if MouseInfo
                   > check currentObject then create new or change existed object
                   > select currentObject
               .
            </remarks>
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.translateTool">
            <summary> Instance of translate tool. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.shCanEdit(MDL.Draw.Rendering.CanvasObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.shIsComplexCreationTool">
            <summary>
            override this method for complex tools like splene tool, requires
            multiple initial points
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.CurrentObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.CurrentMarker">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.MouseInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.NewAtomTool">
            <summary>
            Summary description for AtomTool.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.NewAtomTool.HandledObjectTypes">
            Gets array of handled object types that can be selected.
            @author jbo
            @version 02-28-00
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.SequenceTool">
            <summary>
            SequenceTool - Prototype
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport">
            <summary> This class holds the data and functionality that are needed
            both for TemplateTool ( when it is calling AddTemplateToMolecule), 
            and for the SequenceTool ( when SequenceTool is inserting a residue 
            that does not have two attachment points ).
            Both TemplateTool and SequenceTool are derived from that class.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.fuseAtom">
            <summary> The atom that the template will fuse with when
            the template is added to an atom.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.xdown">
            <summary>X coordinate where the mouse was pressed.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.ydown">
            <summary>Y coordinate where the mouse was pressed.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.isDrag">
            <summary> An even won't be considered a drag until the cursor has been dragged outside
            of the set tolerance.  Once the cursor has been dragged outside the box, then
            it's considered a drag even if the mouse ends up back inside the box.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.isDragging">
            <summary>flag that shows if it's in the middle of moving fragment *
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.bAddedToRgroup">
            <summary>true if the template added to an Rgroup label
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.pickedFragment">
            <summary>canvasObject of fragment that is choosed with control key *
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.templateMolecule">
            <summary> The molecule that this template tool will add. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.molecule">
            <summary>The editor molecule.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.addedTemplate">
            <summary>The resulting molecule of AddTemplateToMolecule.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.translateTool">
            <summary> Instance of translate tool.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> constructor
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.fuseBond">
            <summary> The bond that will be fused when a bond is clicked in the
            template molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.AdjustAllAfterAddingTemplate(MDL.Draw.Chemistry.Molecule,System.Double,System.Double)">
            <summary> Performs functionality specific to the tool. Sequence tool overrides that method.</summary>
            <param name="template">the template for the molecule?</param>
            <param name="canvasX"> The an object space x coordinate. </param>
            <param name="canvasY"> The an object space y coordinate. </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.AddTemplateToMolecule(MDL.Draw.Chemistry.Molecule,System.Double,System.Double)">
            <summary> Add the template to the molecule at a point. </summary>
            <param name="molecule">The canvas Molecule. </param>
            <param name="px">The x-coordinate to move the template to. </param>
            <param name="py">The y-coordinate to move the template to. </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.SproutTemplate(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom)">
            <summary> 
            NOTE:  This currently fuses automatically.
            </summary>
            <returns>The template that gets added to the molecule.
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.AlignTemplateToPoints(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d)">
            <summary> Aligns the template so that the template origin atom aligns with the targetOrigin
            and template atom 2 rotates into target atom 2.  Then the molecule is translated to
            split the difference between the origin spacings and the atom 2 spacings.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.CallOnMouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass the drawing onto the other mouse drag event handler.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.CallOnMouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse up event over the canvas.
            Fuse the previously added template to the molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.FuseTemplateToBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Bond)">
            <summary> Fuse the template to the specified bond. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.OverlapScore(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Molecule)">
            <summary> Returns the number of atoms in mol1 that are less than
            half a bond length from at least one other atom in mol2.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateToolSupport.RemoveExtraAttachmentPointSgroups(MDL.Draw.Chemistry.Molecule)">
            <summary>
            After adding a new template, there are cases where attachment point sgroups
            may be left behind on non-sequence structures and we need to remove these as
            what we really want to leave behind is a simple abbreviation, not a sequence
            </summary>
            <param name="toModify">the Molecule to modify</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass the drawing onto the other mouse drag event handler.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceTool.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceTool.GetConnectedPartOfAtoms(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Atom,System.Boolean)">
            <summary> selectedAtom is one of either atom of pickedBond
            find all atoms on that part of the pickedBond(It does not include the other atom of the picked bond)
            NOTE:if pickedBond is a ring bond, it'll return whole fragment's atoms.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool">
            <summary>
            Summary description for GeneralEditorTool.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.ClickTolerance">
            <summary>The tolerance for a click event. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.newAtoms">
            <summary>The vector of newly generated atoms. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.newBonds">
            <summary>The vector of newly generated bonds. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.newFrags">
            <summary>Vector of fragments that added atoms need to be added to -- jbo 2-8-01 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.xMouseDown">
            <summary>The x-coordinate where the mouse was pressed.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.yMouseDown">
            <summary>The y-coordinate where the mouse was pressed.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.mouseDownMouseEvent">
            <summary> The MouseEvent that generated the mousePressed event.
            We have to store some info about this as mouseReleased events
            do not tell whether any modifiers keys were pressed.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.ResetGeneralEditorTool">
            <summary> Reset all of the editing variables.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.EventWasClick(System.Windows.Forms.MouseEventArgs)">
            <summary> Was an event a click?
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.StoreMouseCoordinates(System.Windows.Forms.MouseEventArgs)">
            <summary> Record the mouse coordinates.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event over a canvas object.
            *
            This starts the process of dragging a new ring.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse press event over the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.RemoveLastGeneratedAtoms">
            <summary> Remove the last set of atoms that were generated.
            Also change the set of new bonds that were generated.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GeneralEditorTool.AddGeneratedPointsAsAtoms(MDL.Draw.Chemistry.Molecule,System.Collections.ArrayList)">
            <summary> Add the newly generated atoms and create bonds as necessary.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SimpleDataSGroupTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SimpleDataSGroupTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SimpleDataSGroupTool.InitDataFieldName(MDL.Draw.Modules.Widget)">
            <summary>Assumes that the given widget is a PALETTEButton object and initiate it.
            Used for DataSgroupTool only
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SimpleDataSGroupTool.InitOperator(MDL.Draw.Modules.Widget)">
            <summary>Assumes that the given widget is a Operator object and initiate it.
            Used for DataSgroupTool only
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SimpleDataSGroupTool.InitListValue(MDL.Draw.Modules.Widget)">
            <summary>Assumes that the given widget is a ListValue object and initiate it.
            Used for DataSgroupTool only
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.EditBasis3DTool.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Highlight only "Point" Feature3D.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.Edit3DObjectTool">
            <summary>
            Displays editing dialog (The same as the create dialog) for the selected 3D object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.EditOleObjectTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            
            </summary>
            <param name="editor"></param>
            <param name="w"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.EditOleObjectTool.AddMenuItemsToPopup(System.Collections.ArrayList,System.EventArgs,MDL.Draw.Rendering.CanvasObject,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.EditOleObjectTool.menuItem_click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.AlignmentOptionsAction.shouldActivate(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.AlignmentOptionsAction.getActualFragmentsCount(System.Collections.ArrayList)">
            <summary>
            skip reactants or products 
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ClearAllAction">
            <summary> Cause a new molecule to replace the currently edited molecule
            This can be undone as opposed to NewMolecule Action which offers to save 
            and then creates a new molecule with a new name. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ClearAllAction.ActionPerformed(System.Object,System.EventArgs)">
            <author>  jbo, fan
            </author>
            <version>   10/03/00
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ClipboardHelper">
            <summary>
            Summary description for ClipboardHelper. This is for the prototype only. Since we also support
            clipboard actions from the Renderer, this code will probably eventually replace the code in
            mdlclipboard-net. As in that project, the metafile creation step by the editor/renderer will
            not be done here.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.ClipboardHelper.MDLSK">
            <summary>
            Clipboard data format for MDLSK, that is, the MDL Sketch file format.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ClipboardHelper.PrepareClipboardData(MDL.Draw.Chemistry.Molecule,System.Drawing.Size,MDL.Draw.Modules.Editor.EditorModule)">
            <summary>
            Prepares our private data objects for transfer to the ATL COM component that serves as an 
            insertable OLE Control for OLE client applications. 
            </summary>
            <returns>an object array of byte arrays (currently size=5), null if no canvas objects are selected.</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ClipboardHelper.BufferedMolfileToString(System.IO.MemoryStream)">
            <summary>
            From net-clipboardaccess clipboard.cs project.
            </summary>
            <param name="ms">memorystream to be read</param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.InsertObjectAction">
            <summary>
            action to insert a Ole Object in the Draw Editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.RulerVisibleOnOffAction">
            <summary>
            action for toggling the visibility of the ruler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.RulerVisibleOnOffAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            toggle ruler visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.RulerVisibleOnOffAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.CopyAction">
            <summary>
            Summary description for CopyAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.CutAction">
            <summary>
            Summary description for CutAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.DeleteAction">
            Deletes all selected objects in canvas
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DeleteAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>This method deletes all selected canvas objects</summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DeleteAction.DeleteSelectedObjects">
            <summary> Finds and deletes all of the selected canvasObjects.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DeleteAction.FindSelectedObjects(System.Collections.ArrayList)">
            <summary> This method will find build a vector of selected objects
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.DoneAction">
            <summary>  Done Action Class
            Button that transfer to application level
            This can have "listener=.." from XML as in other action.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.DoneAction.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>IButtonKeeper Interface *
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.DuplicateAction">
            <summary>
            Summary	description	for	DuplicateAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ExitAction">
            <summary>
            Summary description for ExitAction.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FindPotentialStereoAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>Called when the "Mark stereocenters" menu is accessed.
            This method marks all potential stereocenters with either bonds
            </summary>
            <param name="sender">object that made the event happen</param>
            <param name="action">event object</param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.FitToDocumentAction">
            <summary>
            Summary description for FitToDocumentAction.
            
            This Action enables the capability to select a menu option to fit the currently drawn structure
            to fit to the document on screen.
            
            The menu item should not be enabled if no part of the structure as drawn goes outside of the
            document as currently defined.
            
            The default margin around the structure if it is resized to fit is 5% of the document size on each
            side. This can be overridden by putting in an integer for the margin in the attribute 'margin' in the
            defining XML for the widget. For example, if you want it to be 10%, you would use 'margin="10"'.
            
            The default alignment on the page is in the upper left corner of the document. If you want to override
            this and put it in the other alternative (center), you can use the XML to override 'center="true"'.
            
            The default behavior on atom sizes is to reset them when you fit to page so that we do not carry odd atom
            sizes. To override this behavior use the XML 'c.	preserveAtomLabelSize="true"'.
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FitToDocumentAction.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            This does not need to do anything unusual in the creation of the object, just
            call the base class 
            </summary>
            <param name="editor">Saved to Editor by the base class implementation</param>
            <param name="w">Saved to ActionWidget by the base class implementation</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FitToDocumentAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            This is where all the action occurs. See the description of the class for what it does in a
            broad outline.
            
            With regards to flow, the code checks for something to work on and does nothing if it is
            not present.
            
            The resizing to fit into the document happens first, then translation to be on the page, then
            if either of those were triggered, the resetting of the Atom sizes occurs. 
            </summary>
            <param name="sender">The sender is not used in this case</param>
            <param name="e">The event arguments are not used in this case</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FitToDocumentAction.Init(System.ComponentModel.Component)">
            <summary>
            Do the base initialization and then get the possible XML overrides.
            </summary>
            <param name="c">The component to do the initialization with</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.FitToDocumentAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            Only enable the menu if the structure does not fit in the
            document
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Actions.FitToDocumentAction.MenuItem">
            <summary>
            The MenuItem that this works on, this is used by the IMenuPopupListener to store the
            menu item so that this can be manipulated later.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ImportFASTAFile">
             <summary>
             Summary description for ImportSequenceAction.
             </summary>
            
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ImportPDBFile">
            <summary>
            Summary description for ImportSequenceAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ImportSwissProtFile">
            <summary>
            Summary description for ImportSequenceAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction">
            <summary>
            Summary description for PerceiveSequenceAction
            
            This class takes the current molecule and sequence template
            and tries to percieve new sequence abbreviations from the templates
            currently available.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            This is the initializer for the class, it takes input from
            the xml file and does the proper initialization.
            </summary>
            <param name="editor">The EditorModule</param>
            <param name="w">The Widget</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.InitializeFromWidget(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            Perform specialized initializations.
            
            In this case, get the superatomclass and oneletter
            flags to determine what superatomclass to get the
            abbreviations to load from and the onemode to control
            whether we use one letter sequence names for the
            abbreviations.
            </summary>
            <param name="editor">The EditorModule</param>
            <param name="w">The Widget</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            Perform the perception
            
            1. Get the appropriate toolbar contents based upon the
               _superatomClass.
            2. Load the abbreviations (may use already loaded set).
            3. Create the actual abbreviated structure
            4. Loop through the Sgroups and convert the things that
               Cheshire 3 cannot deal with (the Sgroup Attachment Points).
            5. Convert the new molecule to internal representation
            
            TODO : look into undo/redo
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.ProcessSgroup(MDL.Draw.Chemistry.Sgroup,System.Collections.ArrayList)">
            <summary>
            After getting the molecule back, each Sgroup that is tagged
            with our tag string may need to be processed to deal with
            the Sgroup Attachment Point information. (This may go away
            with Cheshire 4).
            </summary>
            <param name="toProcess">The Sgroup</param>
            <param name="nameList">The list of valid names that we can process</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.GetAttachmentPointSgroups(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Atom)">
            <summary>
            Return the attachment point sgroups that has given attachAtom
            as an attachment point atom.
            
            This is modelled on a similar routine in Sgroup.cs, but we
            need all of the attachment point sgroups, not just the first
            one to allow for the possibility that we have more than one
            at a site.
            </summary>
            <param name="theSgroup">The Sgroup</param>
            <param name="attachAtom">The Atom to do the check at</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.GetAlphaAtomsNotInSgroup(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Atom)">
            <summary>
            The name pretty much describes the routine, find the atoms
            attached to this that are not in the same Sgroup as the atom.
            </summary>
            <param name="theSgroup"></param>
            <param name="fromAtom"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.CreateAbbreviations(MDL.Draw.Chemistry.Molecule)">
            <summary>
            This is the heart of the processing here.
            
            We load it up, run the appropriate script and
            then return the result.
            </summary>
            <param name="fromMol">The molecule to process</param>
            <returns>The molecule after processing</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.CreateAbbreviations(MDL.Draw.Chemistry.Molecule,MDL.Draw.Modules.Editor.EditorModule)">
            <summary>
            This is the heart of the processing here.
            
            We load it up, run the appropriate script and
            then return the result.
            </summary>
            <param name="fromMol">The molecule to process</param>
            <param name="editor">The editor</param>
            <returns>The molecule after processing</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PerceiveSequenceAction.LoadAbbreviations(MDL.Draw.Utils.Abbreviations.AbbreviationToolbarContents,System.String,System.Boolean,MDL.Draw.Modules.Editor.EditorModule)">
            <summary>
            Load the sequence templates in the AbbreviationToolbarContents
            that are not Query Only into Cheshire by first processing them
            to retain the leaving group information and tagging the sequence
            Sgroup with the TAG_STRING so that we can readily locate it later.
            Some of the processing may be removed depending upon changes in
            Cheshire 4 (Sgroup Attachment Point information), but as it is should
            work with Cheshire 3 or 4.
            
            Once the sequence is altered, it is loaded into mdl_sequenceQueryMol
            and the script MDLSequenceAbbreviationAdd() is called to ptu it into
            the array of structures to be used for processing. The name is vital
            unless the Cheshire script is altered to compensate.
            </summary>
            <param name="tbc">AbbreviationToolbarContents to load from</param>
            <param name="superatomClass"></param>
            <param name="oneMode"></param>
            <param name="Editor"></param>
            <returns>Number of sequence templates loaded</returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ImportUniprotFile">
            <summary>
            Summary description for ImportSequenceAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.LoadAction">
            <summary>
            Summary description for LoadAction.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.LoadAction.LoadSKfile(System.Byte[])">
            <summary>
            loads a structure into the editor. The structure is loaded from a byte array which contains a sketchfile.
            Note if array is empty, do not do anything but returns true. This is used from the ole server.
            </summary>
            <param name="skfile">sketcfile as a byte array</param>
            <returns>true if loaded, false if error.</returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.MostRecentlyUsedAction">
            <summary>
            Summary description for Most Recently used action.
            display the file names that were used most recently.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.MostRecentlyUsedAction.GetShortDisplayName(System.String,System.Int32)">
            <summary>
            Truncate a path to fit within a certain number of characters 
            by replacing path components with ellipses.
            
            This solution is provided by CodeProject and GotDotNet C# expert
            Richard Deeming.
            
            </summary>
            <param name="longName">Long file name</param>
            <param name="maxLen">Maximum length</param>
            <returns>Truncated file name</returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.NewStructureAction">
            <summary>
            NewInstanceAction. Creates a new instance of MDLDraw and show it.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.NewStructureAction.NewStructureInSameEditorWindow">
            <summary>
            clear the current structure.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.TabMenuAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            when menu becomes visible, populates its children by quereying the draw application for its instances.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.TabMenuAction.TaggedMenuItem">
            <summary>
            MenuItem with a tag to hold the DrawApp instance it's related to.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.WindowMenuAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            when menu becomes visible, populates its children by quereying the draw application for its instances.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.WindowMenuAction.TaggedMenuItem">
            <summary>
            MenuItem with a tag to hold the DrawApp instance it's related to.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.NextTabMenuAction.myComaprer">
            <summary>
            comparer for the tabs. sort them by their tab location
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.NoStructureAction">
            <summary> Create a "No Structure" by adding a no structure object
            It'll remove existing structure and display noStructureText unless there is a reaction or some rgroups
            in which case we get the hover tool and allow user to drag it where he wants.
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PageSetupAction">
            <summary>
            Summary description for PageSetupAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PrinterSetupAction">
            <summary>
            Summary description for PrinterSetupAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PasteAction">
            <summary>
            Summary description for PasteAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PasteSketchSupport">
            <summary>
            This class is for static method for pasting sketch action
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PrintAction">
            <summary>
            Summary description for PrintAction.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PrintAction.pd_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            only used by mdldraw with an EditorModule
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.PrintPreviewAction">
            <summary>
            Summary description for PrintPreviewAction.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.SaveAsImageAction">
            <summary>
            Summary description for SaveAsImage.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.SaveStructureAction">
            <summary> Save a structure to disk with current name if any.
            if no name was specified, same as SaveStructureAs </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.SaveStructureAction.bWarnMultipleReactionArrows">
            <summary>Display a warning message when the user is about to add multiple arrows to the canvas. 
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.SaveStructureAsAction">
            <summary> Opens a file dialog box and saves a structure to that file.  </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.SaveStructureAsAction.ConvertGraphicalArrowToChemicalArrow(System.String,System.Boolean,MDL.Draw.Chemistry.Molecule)">
            <summary>
            if it's not a reaction and there is a single line that is a graphical arrow, offer to convert it to a chemical arrow
            </summary>
            <param name="text">if text is not null, use the string in the dialog to ask confirmation. if text is null do not ask and perform conversion silently</param>
            <param name="allowothergraphicsobjects">if true allows other graphics objects appart from the line.</param>
            <param name="mol">molecule to convert.</param>
            <returns>false: we asked and user did not want to convert.</returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.SaveSelectedStructureAsAction">
            <summary> Opens a file dialog box and saves selected structure to that file.  </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.SelectAllAction">
            <summary> SelectAllAction class
            *
            Selects all objects in canvas
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.SelectAllAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>Called when the Select All menu is accessed.
            This method selects all canvas objects
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.UndoAction.UndoAction_StateChanged(System.Object,System.EventArgs)">
            <summary>
            When something happen to the molecule that can be undone.
            Enabes undo actions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.AutoMapAction">
            <summary>  Run cheshire "Auto Map" script on editor molecule and set the output molecule to editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.ChemInspectorAction">
            <summary>  Run cheshire script listed in queryCheckList (defined inside Class) and display the result.
            The dialog is configured by XML
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.ChemInspectorAction.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            
            <summary> It is called when swing components of its dialog generates an event 
            and responds to the event.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.CleanAction">
            <summary>  Run cheshire "Clean" script on editor molecule and set the output molecule to editor.
            It doesn't change coordinates of "Absolute" data sgroups and not recommended for structures
            with "Absolute" data sgroups.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction">
            <summary>  Run cheshire calculation and show the result by opening dialog.
            The dialog is configured by XML
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            Constructor. parses widget for "weights" and "weightsscript"
            weights can be set to "all isotopes" "common isotopes" or "custom"
            if weights is set to all isotopes or common isotopes, the weights table is initialized from embedded scripts.
            if weights is set to custom the value of weightsscript is use to load the cheshire script that initializes the weights table.
            To use this custom option, you need to have a licensed cheshire or be using a signed script. 
            </summary>
            <param name="editor"></param>
            <param name="w"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction.TrySubstitution">
            <summary>
            Try and substitute the single atom abbreviations that are used from problematic
            structures (i.e. PEG5000) with alternatives that give us better answers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction.AddWeight(System.String,System.Double)">
            <summary>
            Utility function to add the weight to a string weight of the form
            231.345(5) (error bar format).
            </summary>
            <param name="before">String representation</param>
            <param name="addTo">Double value to add</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction.ComposeAdditionFormula(System.Collections.Hashtable)">
            <summary>
            From a Hashtable composed of atom names as keys and string values of
            integer counts as values, put together the valid formula addition
            </summary>
            <param name="theAtoms">Hashtable with the starting information</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            
            <summary> It is called when swing components of its dialog generates an event 
            and responds to the event.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.MolValuesAction.updateprivatefieldsfromcomboboxvalue(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            updates the instance values for calculating the molecular weight and exact mass from the combobox value.
            </summary>
            <param name="combobox"></param>
            <param name="cmd"></param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.QueryChemInspectorAction">
            <summary>  Run cheshire script listed in queryCheckList (defined inside Class) and display the result.
            The dialog is configured by XML
            NOTE: To add more cheshire script into this ChemInspector,
            1) add the new Cheshire script into queryCheckList list
            2) If the new script needs special implementation, add it into runInspector() method
            (Default behavior is to display the resultString from running the Cheshire script)
            To remove existing script, simply remove it from queryCheckList list.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.QueryChemInspectorAction.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            
            <summary> It is called when swing components of its dialog generates an event 
            and responds to the event.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.ConfigurableQueryChemInspectorAction.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            
            <summary> It is called when swing components of its dialog generates an event 
            and responds to the event.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.RelativeCleanAction">
            <summary>  Run cheshire "Clean" script on editor molecule and set the output molecule to editor.
            It'll change "Absolute" data sgroups into "Relative" data sgroups since Clean does not change
            "Absolute" data sgroups' coordinates. So we change them as "Relative" to render them around parent object.
            If you don't like it, there is "CleanAction" that keeps them as "Absolute" and don't move them.(But display can be ugly)
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.UnMapAction">
            <summary>  Run cheshire "Auto Map Clear" script on editor molecule and set the output molecule to editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.Calcs.ValenceCheckAction">
            <summary>  Run cheshire valence check and show the result by opening dialog.
            The dialog is configured by XML
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.Calcs.ValenceCheckAction.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            
            <summary> It is called when swing components of its dialog generates an event 
            and responds to the event.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.AboutBox">
            <summary>
            Summary description for AboutBox.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.AboutBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.AboutBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.AboutBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog">
            <summary>
            Summary description for AligmentDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.canAlignToLine">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.canSpaceEvenly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.setupRects">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.setupRet">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.panel_preview_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.AligmentDialog_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.AlignmentDialog.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings">
            <summary>
            Summary description for ArrowSettings.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings.ArrowheadLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings.ArrowheadWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.ArrowSettings.ArrowShaftSpace">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.BondLengthDialog">
            <summary>
            Summary description for BondLengthDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.BondLengthDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.BondLengthDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.BondLengthDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog">
            <summary>
            ak 13-dec-2005
            Character Map Dialog
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.ChangeState">
            <summary>
            change current state PURE--FULL of dialog
            PURE: only recent used symbols control visible
            FULL: all controls visible
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.EnableSymbolControls(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.hidesymbols_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.UpdateFont">
            <summary>
            setup font in symbols panel
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.GetRecentUsedSymbols">
            <summary>
            
            </summary>
            <returns>an array of character with the recently used symbols</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.SetRecentUsedSymbols(MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.Character[])">
            <summary>
            
            </summary>
            <param name="s">array of characters to add to the list of symbols</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.fontcombobox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.newBox_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.CurrentSymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.CharacterMapDialog.CurrentFont">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.SymbolLabel">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.RecentSymbolsQueue">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.CloseConfirmationDialog">
            <summary>
            Summary description for CloseConfirmationDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.CloseConfirmationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CloseConfirmationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.CloseConfirmationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.#ctor(System.Boolean,System.Boolean,System.Boolean,MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.CustomColors,System.Drawing.Color)">
            constructor
        </member>
        <member name="M:MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.FindSelectedColorIndex">
             Auxiliary implementation helper.
        </member>
        <member name="P:MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.MainWindow">
            <summary>
            Get/set the main window, that needs to be be temporary disabled,
            when this MyColorPicker invokes ColorDialog for 'More colors'
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.MyMsgHook.HookWindowProc(System.Windows.Forms.Message@)">
            <summary>
            Overwrites the virtual method of base class, to change behaviour of hooked window.
            </summary>
            <param name="m">the mesage</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.ClrPicker.MyColorPicker.MyMsgHook.OnUnhook(System.Object)">
            Auxiliary helper called from HookWindow. Overrwriten to clenup member variable.
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.EditAbbreviationNameDialog">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.EditAbbreviationNameDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.EditAbbreviationNameDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.EditAbbreviationNameDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ExtendedPeriodicTableControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ExtendedPeriodicTableControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ExtendedPeriodicTableControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.ForceSettingDialog">
            <summary>
            Summary description for ForceSettingDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ForceSettingDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ForceSettingDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ForceSettingDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.KeyboardDialogSimple">
            <summary>
            Summary description for KeyboardDialogSimple.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.KeyboardDialogSimple.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.KeyboardDialogSimple.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.ResizingDialog">
            <summary>
            Summary description for loadactionresizing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ResizingDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.LoadExternalSequenceForm">
            <summary>
            Summary description for LoadExternalSequenceForm.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.LoadExternalSequenceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.LoadExternalSequenceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.LoadExternalSequenceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.PasteSketchPropDialog">
            <summary>
            Summary description for PasteSketchPropDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.PasteSketchPropDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PasteSketchPropDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PasteSketchPropDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableDialog">
            <summary>
            Summary description for PeriodicTableDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PeriodicTableDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.PreferencesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PreferencesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.PreferencesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog">
            <summary>
            Summary description for NewAbbrevDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog2">
            <summary>
            Summary description for NewAbbrevDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.RenameAbbreviationDialog2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SaveAsSmilesWarning.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SaveAsSmilesWarning.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SaveAsSmilesWarning.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ScaleSketchDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ScaleSketchDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ScaleSketchDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.TextDialog">
            <summary>
            Summary description for AboutBox.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.TextDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.TextDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.TextDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.TrialDialog">
            <summary>
            Summary description for TrialDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.TrialDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.TrialDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.TrialDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.ValenceWarningForm">
            <summary>
            Summary description for ValenceWarningForm.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ValenceWarningForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ValenceWarningForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ValenceWarningForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Undo.DrawUndoManager2.ReOpenLastUndoBlock(System.String)">
            <summary>
            
            </summary>
            <param name="s">name of edit if there is no undoblock to reopen.</param>
        </member>
        <member name="M:MDL.Draw.Undo.DrawUndoManager2.BeginResetCacheBlock(MDL.Draw.Nodes.Node)">
            <summary>
            When undoing, this will request the object to resynchronize its cached data. for example a bond caches its atoms for fast access     
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MDL.Draw.Undo.DrawUndoManager2.EndResetCacheBlock(MDL.Draw.Nodes.Node)">
            <summary>
            When redoing, this will request the object to resynchronize its cached data. for example a bond caches its atoms for fast access
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:MDL.Draw.Interfaces.IModule">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Interfaces.IModule.InitModule(MDL.Draw.Interfaces.IIntegrator,MDL.Draw.Interfaces.IModule,MDL.Draw.Nodes.Node)">
            <summary>
            Runs after the module has been created with newInstance().
            Other modules may/may not be available at that time
            </summary>
            <param name="integrator">Intergrator object</param>
            <param name="parent">the parent IModule</param>
            <param name="moduleRoot">the root Node of the xml data</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IModule.InitModule2">
            <summary>
            Runs after all modules have been created
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IModule.OKToDoClosing">
            <summary>
            Asks module if it is OK to Close (could be the Yes button).
            The Module gets a chance to save unsaved data.
            When the application is asked to close (such as X button or Alt-F4), each module is notified
            so that a module can prompt the user to save or transfer data. 
            Modules can request closing to be canceled (could be the Cancel button).
            </summary>
            <returns>returns <c>false</c> if the module wants to prevent Closing</returns>
        </member>
        <member name="P:MDL.Draw.Interfaces.IModule.Integrator">
            <summary>
            Returns the instance of Integrator which loaded this 
            module. (was passed in init) 
            </summary>
        </member>
        <member name="P:MDL.Draw.Interfaces.IModule.ParentModule">
            <summary>
            Returns the parent module (was passed in init)
            used when a module is created in a splitter.
            </summary>
        </member>
        <member name="P:MDL.Draw.Interfaces.IModule.Data">
            <summary>
            all modules have to implement this but not all are interested. modules can ignore the data.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.DoPrint(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            paint molecule to paper.
            use example:
            using System.Drawing.Printing;
            PrintDocument pd = new PrintDocument();
            pd.PrintPage+=new PrintPageEventHandler(Editor.DoPrint);
            pd.Print();
            </summary>
            <param name="sender">requester (not used)</param>
            <param name="e"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.GenericEditorModule.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetActiveControl">
            <summary>
            DP: extract current active IMyRichEditCtrl from TextTool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetHostInstaller">
            <summary>
            DP: Get host installer
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.GenericEditorModule.translatedSelection">
            <summary>
            Sets an arraylist of chemistry objects that are being translated.
            Should be called before dragging molecule (for drag and drop) with xml molecule.
            At end of translation this needs to be called with a null value.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.AddTool(MDL.Draw.Modules.Editor.Tools.GenericEditorTool)">
            <summary>
            for use by xmlcontrols. Adds a tool to the internal hashtable of tools so that GetTool will return an instance of the tool when queried with a tool type.
            </summary>
            <param name="tool">the tool to add</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetTool(System.Type)">
            <summary>
            returns a tool that is an instance of this type and was added to the set of editor tools
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetTool(System.Type,System.Boolean)">
            <summary>
            returns a tool that is an instance of this type and was added to the set of editor tools
            </summary>
            <param name="t">type of the tool</param>
            <param name="CreateIfNotFound">if true, will create a new tool instead of returning null  if no such tool already exists</param>
            <returns>new tool or null if type does not represent a tool</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.AddAction(MDL.Draw.Modules.Editor.Actions.GenericEditorAction)">
            <summary>
            for use by xmlcontrols. see addtool.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetAction(System.Type)">
            <summary>
            return an action that is an instance of this type and was added to the set of editor actions
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetAction(System.Type,System.Boolean)">
            <summary>
            return an action that is an instance of this type and was added to the set of editor actions
            </summary>
            <param name="t"></param>
            <param name="CreateIfNotFound">if true, will create a new action instead of returning null if no such action already exists</param>
            <returns>new action or null if type does not represent an action</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.GetToolOrAction(System.Type)">
            <summary>
            return a tool or action that is an instance of this type and was added to the set of editor tools and actions.
            Tries to get a tool first, then an action . if both fail, return null.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.SetDefaultTool(MDL.Draw.Modules.Editor.Tools.GenericEditorTool)">
            <summary>
            Sets the default tool, used by swap tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.SwapTool">
            <summary>
            swap tool from current tool to default tool and back.
            called from  swaptoolaction
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.GenericEditorModule.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.PageSettings">
            <summary>
            page settings
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.GenericTool_Quiet">
            <summary>
            sets /get editor tool. Does not display help.
            used for setting inital tool without updating help and by regular GenericTool accessor.
            </summary>
        </member>
        <member name="E:MDL.Draw.Modules.Editor.GenericEditorModule.GenericToolChange">
            <summary>
            get ot set the current tool.
            When setting a tool, sets the tool as action handler to the drawing panel and call the init method to the tool.
            if there was already a tool installed, removes it and call the old tool cleanup method.
            these are used for example to install tool cursors, etc
            When the tool has been installed, shows the help for that tool.
            </summary>        
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.DrawingPanel">
            <summary>
            control where the data is displayed 
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.Integrator">
            <summary>
            back link to the integrator
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.ApplicationForm">
            <summary>
            Outermost DrawApp Form
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.ParentModule">
            <summary>
            back link to parent module. usually a splitter or the main module
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.GenericEditorModule.FileName">
            <summary>
            full path name of the currently loaded molecule 
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IEditor">
            <summary>
             Interface that permits Add-ins (actions and tools) to integrate with 
             the Symyx Draw Editor.
             </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.Refresh">
            <summary>
            Forces the screen to redraw.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.RefreshStructure">
            <summary>
            Forces the structure to be updated.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.ReplaceMolfileString(System.String)">
            <summary>
            Sets a molfile string that represents the structure in the Editor. 
            Same as <see cref="P:MDL.Draw.Interfaces.IEditor.MolfileString"/> except that the structure retains 
            its scale and center. Use for updating the current structure.
            </summary>
            <remarks>This operation will be undoable if performed in the 
            <see cref="M:MDL.Draw.Interfaces.IAction.ActionPerformed(System.Object,System.EventArgs)"/> or the 
            <see cref="M:MDL.Draw.Interfaces.ITool.ToolInvoked(MDL.Draw.Interfaces.IChemObject,System.Windows.Forms.MouseEventArgs)"/> method. 
            To make this operation undoable if called elsewhere, 
            enclosed it between <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.
            </remarks>
            <param name="molfileString">string that represents the updated molfile</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.AddTextToStructure(System.String,System.Object)">
            <summary>
            Causes the Editor to associate the display text with 
            the selected part of the structure, or with the all of 
            the structure if no part of the structure is selected. This display 
            text is not written to the underlyling molfile or rxnfile.
            An example of display text could be a SMILES string that corresponds 
            to the molecule.</summary>
            <remarks>This operation will be undoable if performed in the 
            <see cref="M:MDL.Draw.Interfaces.IAction.ActionPerformed(System.Object,System.EventArgs)"/> or the 
            <see cref="M:MDL.Draw.Interfaces.ITool.ToolInvoked(MDL.Draw.Interfaces.IChemObject,System.Windows.Forms.MouseEventArgs)"/> method. 
            To make this operation undoable if called elsewhere, 
            enclosed it between <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.
            </remarks>
            <param name="text">text string to display on the canvas</param>
            <param name="tag">an object associated with the text. if the method is called again on the same object the text will be replaced</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.AppendStructureToEditor(System.String)">
            <summary>
            Appends a structure on the editor.
            The structure is loaded and tracks the mouse until user clicks.
            To cancel the operation, press <c>Esc</c>.
            To make this operation undoable, if called elsewhere, 
            enclosed it between <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.
            </summary>
            <param name="molfileString">molfilestring of the structure. 
            (If you have an object of type <c>IStructureHandle</c> instead of a molfilestring, use the other signature of this method.)</param>
            <returns><c>True</c> if the structure was appended</returns>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.AppendStructureToEditor(MDL.Draw.Chemistry.IStructureHandle)">
            <summary>
            Appends a structure on the editor.
            The structure is loaded and tracks the mouse until user clicks.
            To cancel the operation, press <c>Esc</c>.
            To make this operation undoable, if called elsewhere, 
            enclosed it between <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.
            </summary>
            <param name="structure">Use this signature of the method when you have an object of type <c>IStructureHandle</c>. 
            Otherwise, use the signature that takes a molfilestring.</param>
            <returns>bool. true if something was appended, false otherwise</returns>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)">
            <summary>
            Begins the undo block. An undo block makes operations on the current structure 
            undoable. The undo block consolidates logic from the call to 
            <c>BeginUndoBlock</c> 
            until the call to <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.</summary>
            <remarks>The <c>IAction.ActionPerformed</c> and the <c>ITool.ToolInvoked</c>
            methods are automatically wrapped in an Undo block. 
            If your code modifies the current structure in other methods, or if you want 
            a finer-grained Undo sequence, you must explicitly begin and end an Undo block.</remarks>
            <param name="name">Name of the Undo block</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock">
            <summary>
            Ends the undo block.
            </summary>
        </member>
        <member name="P:MDL.Draw.Interfaces.IEditor.MolfileString">
            <summary>
            Gets and sets a molfile string that represents the 
            structure in the Editor. Also resets the scale and center. 
            To update the current structure without 
            resetting its scale and center, use <see cref="M:MDL.Draw.Interfaces.IEditor.ReplaceMolfileString(System.String)"/>.
            </summary>
            <remarks>Setting this property will be undoable if performed in 
            the <see cref="M:MDL.Draw.Interfaces.IAction.ActionPerformed(System.Object,System.EventArgs)"/> or the 
            <see cref="M:MDL.Draw.Interfaces.ITool.ToolInvoked(MDL.Draw.Interfaces.IChemObject,System.Windows.Forms.MouseEventArgs)"/> method. 
            If called elsewhere, the setting of this property will only be undoable 
            if it is enclosed inside the undo block defined by <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> 
            and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.</remarks>
        </member>
        <member name="P:MDL.Draw.Interfaces.IEditor.MoleculeHasContents">
            <summary>
            Returns <c>true</c> if the molecule is not empty. 
            </summary>
            <remarks>An Symyx no-structure returns <c>true</c>.
            A reaction that contains only the arrow returns <c>true</c>.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Interfaces.IEditor.SelectionAsMolfileString">
            <summary>
            Returns a molfile string that represents only those parts 
            of the structure in the Editor that are currently selected. 
            For example, your Add-in might process a molfile that corresponds 
            to the end-user selecting a entire fragment within a multi-fragment 
            structure.</summary>
            <returns>molfile string that represents the selection</returns>
        </member>
        <member name="P:MDL.Draw.Interfaces.IEditor.ApplicationForm">
            <summary>
            Returns the outermost DrawApp Form (the root Form). 
            If your Add-in application defines its own Form, 
            specify its owner to be the root Form of Symyx Draw. 
            For example, <c>myForm.Owner = myEditor.ApplicationForm;</c>
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.FGCOLOR">
            <summary>
            DP: constants for command ID's
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.TEMPLATES">
            Name of the templates directory. 
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.SetAtomColor(System.Drawing.Color,MDL.Draw.Chemistry.AtomicElement)">
            <summary>
            Set the color for a specific atom type.
            note: if color is Color.Empty, the color is removed from the atomic element.
            after upding the atomic element, this method updats the text color for the button
            in the periodic table and in the atom toolstrip.
            </summary>
            <param name="c"></param>
            <param name="ae"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.mruManager">
            <summary>
            manager for most recently used files.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.newStructureAction">
            <summary>
            DP: actions for Main Toolbar
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.textControlModule">
            <summary>
            DP: Text control
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.mtbButtonCut">
            <summary>
            DP: Main toolbar buttons
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.lastToolbarCommand">
            <summary>
            DP: temporary stored command "fgcolor" or "bgcolor"
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.mainToolstrip">
            <summary>
            DP: Main panel
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.lineThicknessMenu">
            <summary>
            DP: line menus
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.colorPickerFG">
            <summary>
            DP: Color pickers, line controls
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.graphicsFGColor">
            <summary>
            DP: base properties for newly created graphic objects
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.ReplaceMolfileString(System.String)">
            <summary>
            Replace the current molecule without rescaling.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.SetCurrentObject(MDL.Draw.Rendering.CanvasObject)">
            <summary>
            It sets parent chemistry object of given canvas object to Editor. The chemistry object can be exported as collection with V3000MolfileStringWithSelectionAsCollection property.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetTopForm(MDL.Draw.Modules.Editor.EditorModule)">
            <summary>
            Get the 'top' Form.
            </summary>
            <param name="editor"></param>
            <returns> The 'top' Form Window. </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetTopForm">
            <summary>
            Get the 'top' Form.
            </summary>
            <returns> The 'top' Form Window. </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.InitModulePostPreferenceLoading">
            <summary>								  
            DP: Init the module after the preference were loaded from file
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.UndoAction_StateChanged(System.Object,System.EventArgs)">
            <summary>								  
            DP: enable/disable undo/redo buttons on Main Toolbar
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.mainToolstrip_DropDown(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.MainToolBar_ButtonClick(System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs)">
            <summary>
            DP: main toolbar button click handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.FontToolBar_ButtonClick(System.Object,System.String)">
            <summary>
            DP: font toolbar button click handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetCurrentToolInPaletteButton(System.Type)">
            <summary>
            I plan to use this method from the Eraser tool to find which lasso tool is currently in use but it don't work yet. 
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetPaletteButton(System.Type)">
            <summary>
            I need to get the button of a specific type 
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetSelectionSize(System.Collections.ArrayList)">
            <summary>
            return a Size object which contains the size of the selection in the current renderer.
            this is used for example when making an image for saving or for the clibpoard metafile.
            </summary>
            <param name="selection">arraylist of chemistry objects.</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.UpdatePasteButton">
            <summary>
            DP: Update 'paste' button state
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetAtomsWithPossibleBondOrderChange(System.Collections.ICollection)">
            <summary>
            This method collects all atoms in a pre-existing list that have at least one bond
            that can have it's bond order reduced to possibly resolve a valence. 
            </summary>
            <param name="checkThese">List of candidate atoms to check</param>
            <returns>List of atoms that have at least one double or triple bond</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetMoleculeWithReducedBondOrder(MDL.Draw.Chemistry.Molecule,System.Collections.ICollection)">
            <summary>
            Given a molecule and a list of atoms with invalid valences, create (if possible) a copy
            with the bond order to these atoms reduced to reduce the valences to valid (on those atoms).
            </summary>
            <param name="mol">The molecule to start with</param>
            <param name="invalidValences">a list of atoms in the molecule</param>
            <returns>A copy with the bond orders reduced if possible or null if it is not possible.</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.DoValenceChange(System.Collections.ICollection)">
            <summary>
            Go through the collection of atoms with invalid valences and present a dialog which
            allows methods to correct the situation.
            
            If the problem can be resolved by reducing the bond orders of the bonds leading to the
            atoms identified, that is given as an option
            
            If there is an Undo available, present that (no guarantee that it will solve the
            problem, but it will in most cases.
            
            There is always an ignore option.
            </summary>
            <param name="invalidValences">The list of atoms that you want to deal with.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetExceededValenceAtoms(MDL.Draw.Nodes.Node)">
            <summary>
            Given a single node (an Atom of Bond), get the atoms that have
            invalid valences
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetExceededValenceAtoms(System.Collections.ICollection)">
            <summary>
            Given a collection of atoms and bonds, get the atoms that have
            invalid valences
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.AdjustStructureToDocument(MDL.Draw.Chemistry.Molecule,System.Boolean,System.Boolean)">
            <summary>
            checks if the structure fits within the view/document bounds.
            if it does, center it on the view/document.
            if not, offers to resize/translate the structure first
            used in LoadAction and InsertAction
            </summary>
            <param name="mol">the structure to add</param>
            <param name="DoTranslation">if false, does not translate structure. For example in insert, where it will be translated anyway.</param>
            <param name="allowcancel">shold we give thne user the choice to cancel the dialog ?</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.MakeAllStructureVisible">
            <summary>
            called during visiblechanged to true.
            if the structure is empty, makes top left corner visible
            if the structure fits, center it.
            if the structure does not fit, zoom out so it all fits.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.AdjustZoomToMakeWholeStructureVisible">
            <summary>
            sets corner of window to corner of document.
            uses scale of 1 unless structure does not fit on window in which case adjust sclae so it fits.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.RemoveOriginalCoords(System.Collections.ArrayList)">
            <summary>
            If there is any operation like atom type change, new atom/bond addition to the given fragment
            and those fragment is a 3D model structure with originalCoords set, prompt a warning and remove the originalCoords from the atoms.
            </summary>
            <param name="fragments">The list of fragments to remove originalCoords from.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.GetDockingArea(System.Windows.Forms.Control)">
            <summary>
            determines the client area of the control. The area of docked controls are excluded
            </summary>
            <param name="c">the control to which to determine the client area</param>
            <returns>returns the docking area in screen coordinates</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.ResetUI">
            <summary>
            resets ui top original setting
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.ResetUI(System.String)">
            <summary>
            resets ui to default or classic settings.
            </summary>
            <param name="mode">how to reset: classic or default</param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.OldOleSize">
            <summary>
            Old size of the ole object. we set it when draw is invoked from an ole object and reset it when we go back to the ole client.
            </summary>
        </member>
        <member name="E:MDL.Draw.Modules.Editor.EditorModule.EditorDataChanged">
            <summary>
            Event invoked from override object Data set. See also delegate EditorDataChangedEventHandler.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.SelectionMolfileIndex">
            <summary>
            It returns a 1-based index number of currentObject. CurrentObject can be set with SetCurrentObject().
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.StructureValidation">
            <summary>
            Specifies whether or not to turn on/off the structure validation(Chemistry check warning) while transfering structure from the editor to renditor box. This property will be used in QueryChemInspectorAction.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.V3000MolfileStringWithSelectionAsCollection">
            <summary>
            It returns a V3000 molfile string with collection of currentObject. 
            If currentObject is null, it returns default molfile string of the Molecule.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.Data">
            <summary>
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.ApiSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.ApiObjectFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.MoleculeHasContents">
            <summary>
            returns true if the molecule is not empty.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.EditorModule.CheshireScriptDirectory">
            set the cheshire script directory.
             call this method immediately after creating the editor
             and BEFORE the cheshire action has a chance to being called.
             e.g.
            	draw = new Draw();
            	// cct files are in a jar on your local or remote file system in a directory.
            	URL cheshiredir1 = new URL("jar:file:/C:/jdraw/20021101/jdraw/cheshire.jar!/myscripts");
            	// or cct are in the same package/directory as the CheshireLocator class. 
            	//Use PackageResource to get a URL to it. 
            	URL cheshiredir = MDL.Draw.Utils.PackageResources.getPackageResource("CheshireLocator.class", examples.CheshireAction.CheshireLocator.class);
            	//finally set the directory url
            	draw.getEditor().setCheshireScriptDirectory(cheshiredir1);
             @param url to the base directory or to a file in that directory.
        </member>
        <member name="T:MDL.Draw.Modules.Editor.EditorModule.EditorDataChangedEventHandler">
            <summary>
            Delegate used in the event EditorDataChanged, to notify the event subscriber(s),
             that the new data ( new molecule ) is being assigned to this module. 
            This happends for instance after File/New and File/Open.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.EditorModule.EdgeOverlay.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.EditorModule.EdgeOverlay.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.CanvasContainer.CanvasObjectToString">
            <summary>
            for QA
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.MoleculeRendererContainer.GetAtomScreenCoordinate(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an atom.
            Atom index is one-based [1;AtomCount]
            </summary>
            <param name="index">index of atom to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.MoleculeRendererContainer.GetBondScreenCoordinate(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an bond.
            Per QA specs, this is the mid-popint of a bond ie middle of two end atoms.
            bond index is one-based [1;BondCount]
            </summary>
            <param name="index">index of bond to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.MoleculeRendererContainer.GetSgroupScreenCoordinate(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an Sgroup.
            Sgroup index is one-based [1;SgroupCount]
            </summary>
            <param name="index">index of Sgroup to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.MoleculeRendererContainer.GetRgroupScreenCoordinateByIndex(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an Rgroup.
            Rgroup index is one-based [1;RgroupCount]
            </summary>
            <param name="index">index of Rgroup to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.MoleculeRendererContainer.GetRgroupScreenCoordinateByNumber(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an Rgroup.
            Rgroup number is the Number property of the Rgroup.
            </summary>
            <param name="number">the rgroup number</param>
            <returns>a point or empty if there is no Rgroup with this number on the structure</returns>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.MoleculeRendererContainer.AtomCount">
            <summary>
            For QA use.
            return the number of atoms currently renderer
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.MoleculeRendererContainer.BondCount">
            <summary>
            For QA use.
            return the number of bonds currently renderer
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.MoleculeRendererContainer.SgroupCount">
            <summary>
            For QA use.
            return the number of sgroups currently renderer
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.MRUManager">
            <summary>
            most recently used entries
            </summary>
        </member>
        <member name="T:MDL.Draw.Utils.ResourceFormatter">
            <summary>
            Provides access to an assembly's string resources
            to use it do something like:
            	textBox1.Text = ResourceFormatter.GetString(listBox1.Text);
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.ResourceFormatter.GetString(System.String)">
            <summary>
            Loads an unformatted string
            </summary>
            <param name="resourceId">Identifier of string resource</param>
            <returns>string</returns>
        </member>
        <member name="M:MDL.Draw.Utils.ResourceFormatter.GetString(System.String,System.Object[])">
            <summary>
            Loads a formatted string
            </summary>
            <param name="resourceId">Identifier of string resource</param>
            <param name="objects">Array of objects to be passed to string.Format</param>
            <returns>string</returns>
        </member>
        <member name="T:MDL.Draw.Utils.ResourceFormatter.ResourceManagerSingleton">
            <summary>
            Singleton responsible for creating an instance of the ResourceManager class
            </summary>
        </member>
        <member name="M:MDL.Draw.Utils.ResourceFormatter.ResourceManagerSingleton.#ctor">
            <summary>
            Class constructor
            </summary>
            <remarks>Private to keep class from being instantiated</remarks>
        </member>
        <member name="M:MDL.Draw.Utils.ResourceFormatter.ResourceManagerSingleton.CreateInstance">
            <summary>
            Static method that creates an instance of the ResourceManager
            </summary>
            <returns>ResourceManager</returns>
        </member>
        <member name="F:MDL.Draw.Utils.ResourceFormatter.ResourceManagerSingleton._instance">
            <summary>
            Store for the Instance property
            </summary>
        </member>
        <member name="P:MDL.Draw.Utils.ResourceFormatter.ResourceManagerSingleton.Instance">
            <summary>
            Instance property
            </summary>
            <value>Read-only access to the ResourceManager instance</value>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.TextControlModule">
            <summary>
            DP: module for all text control related operations.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.ApplyChangedFontName_Appropriate">
            <summary>
            Apply the size in combobox; return true on success.
            For error return false.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.fontSizeComboBox_DropDown(System.Object,System.EventArgs)">
            <summary>
            Font size combo box handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.fontSizeComboBox_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            DP: font size combo box handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.fontSizeComboBox_OnEnterEsc(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            DP: font size combo box handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.fontComboBox_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            DP: font name combo box handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.fontComboBox_OnEnterEsc(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            DP: font name combo box handler
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.DisableTextControls">
            <summary>
            Disable text toolbar and combo-boxes
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.EnableTextControls(System.Boolean)">
            <summary>
            Enable text toolbar and combo-boxes
            <param name="full_text"> if true will display all options, otherwise only basic text controls like bold/italic/underline/color but not alignment or insert symbol</param>
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.UpdateFontNameCombo_Single(MDL.Draw.Rendering.WindowLessRichEdit.IMyRichEditCtrl)">
            <summary>
            DP: Update 'font name' combo-box
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.UpdateFontSizeCombo_Single(MDL.Draw.Rendering.WindowLessRichEdit.IMyRichEditCtrl)">
            <summary>
            DP: Update 'font size' combo-box
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.TextControlModule.UpdateTextButtons_Single(MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHostF)">
            <summary>
            DP: Update text buttons ('bold' etc.) by a given IMyRichEditCtrl
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.TextControlModule.TextControlInitState">
            <summary>
            This class defines the init state for a new text text control
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool">
            <summary> AbbreviationBondTool class
            *
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.xdown">
            <summary>X coordinate where the mouse was pressed. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.ydown">
            <summary>Y coordinate where the mouse was pressed. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.pickedAbbrevAtom">
            <summary>The atom that was picked or null if the canvas was picked. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.newAtom">
            <summary>The new atom that was created or null if we didn't create one yet. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.newBond">
            <summary>The bond that was created or null if we didn't make a bond. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.averageBondLength">
            <summary>The average bond length of the picked molecule. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.atomSnapTolerance">
            <summary> The tolerance that governs when we snap to an atom position.
            This should probably be the same value as the preference size
            for the atom highlight box.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor. Creates an abbreviation bond tool. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.addBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Chemistry.Bond.StereoBondTypeEnum)">
            <summary> Convenience method to add a bond with the appropriate bond
            order and bond stereo.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.initialiseEditing(System.Windows.Forms.MouseEventArgs)">
            <summary> Common initialisation for picking on the canvas and over a
            canvas object.
            *
            Resets all of the instance variables and records where the
            mouse down event occurred.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.setAverageBondLength">
            <summary> Set the average bond length and other editing variables.
            Rewrote to give default averageBondLength if no molecule defined.
            Sets:
            atomSnapTolerance and clickTolerance
            </summary>
            <author> jbo
            </author>
            <version> 4-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.SetAttachmentAtomsAndGroups(MDL.Draw.Chemistry.AttachmentPointSgroup,MDL.Draw.Chemistry.AttachmentPointSgroup)">
            <summary>
            Utility function to reduce code duplication
            </summary>
            <param name="pickedAttach"></param>
            <param name="nearAttach"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.destroyBond(MDL.Draw.Chemistry.Bond,MDL.Draw.Modules.Editor.EditorModule)">
            <summary>
            This is a copy of the DeleteSupport routine of the same name, but we needed to prevent the
            deletion of the atoms if they are not Carbon as this is a special case for out usage (do not
            want to delete single atom abbreviations such as PEG750
            
            Not ideal to copy code, but we do not want to change anything we do not have to at this date.
            </summary>
            <param name="bondChild"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.BondOrder">
            <summary>Get the bond order. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.AbbreviationBondTool.BondStereo">
            <summary>Get/Set the bond stereo. </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IChemObject">
            <summary>
            The base interface that is specialized for specific 
            chemical elements. The specific class of a parameter declared as an
            IChemObject can be queried with the .NET <b>is</b> operator, for example,
            <code>if (chemObject is IAtom)</code>. This interface also provides a method
            to get a molfile representation of the underlying chemical object.
            </summary> 
            <remarks><ul><li>This interface is an abstraction of the valid types of 
            chemical objects that an Add-in can work with. The actual parameter will 
            implement a specialization of the <c>IChemObject</c> interface.</li>
            <li><see cref="T:MDL.Draw.Interfaces.IAtom"/>, <see cref="T:MDL.Draw.Interfaces.IBond"/>, <see cref="T:MDL.Draw.Interfaces.ISgroup"/>, 
            and <see cref="T:MDL.Draw.Interfaces.IMolecule"/> are specializations of <c>IChemObject</c> 
            that correspond respectively to an atom, a bond, an Sgroup, 
            or the entire structure.</li>
            <li>Possible usage scenario and sequence of events: 
            (1) The end-user selects an Add-in tool and then clicks 
            on an atom. 
            (2) An IAtom object is passed as an argument to the 
            <c>ToolInvoked</c> method of <c>ITool</c>. 
            (3) The application checks whether an <c>IAtom</c> object was passed, 
            and, if so, uses <c>IChemObject.MolfileIndex</c>  
            to indentify this atom. 
            (4) The application obtains a 
            molfile representation of the selected item by using either 
            <c>IChemObject.MolfileString</c> or 
            <c>IChemObject.GetMolfileStringWithCollection</c>.
            (5) The application calls a Cheshire script that determines how many Sgroups, 
            if any, are associated with that atom.
            </li></ul></remarks>
        </member>
        <member name="M:MDL.Draw.Interfaces.IChemObject.GetMolfileStringWithCollection(System.String)">
            <summary>
            Returns a V3000 molfile with a persistent collection that contains this <c>IChemObject</c> if the  
            <c>IChemObject</c> is an atom, a bond, or an Sgroup. (However, if this <c>IChemObject</c> is the entire molecule, returns
            the molecule without creating a persistent collection.) You pass in a name for the persistent collection in the format:
            "name/subname". For example, 
            <c>chemObject.GetMolfileStringWithCollection("SymyxDrawCALC1/myCollection")</c>,
            where <c>SymyxDrawCALC1</c> is the name, <c>"/"</c> is the separator, and <c>myCollection</c> is the subname.
            To avoid name collisions, make sure the name is not <c>CCAT</c> or <c>MDL</c>.
            For more information, see the Symyx Cheshire documentation on the <c>C_LABEL</c> property.
            </summary>
            <param name="collectionName">A "name/subname" for the collection, such as <c>"SymyxDrawCALC1/myCollection"</c></param>
            <returns>a V3000 molfile string with this <c>IChemObject</c> collection of an atom, bond, or Sgroup</returns>
        </member>
        <member name="P:MDL.Draw.Interfaces.IChemObject.MolfileString">
            <summary>
            String that represents the molfile, which is V2000 by default, 
            but V3000 if any V3000 features are present.
            </summary>
        </member>
        <member name="P:MDL.Draw.Interfaces.IChemObject.MolfileIndex">
            <summary>
            An identifier of the type of chemical object.
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IAtom">
            <summary>
            A specialization of <see cref="T:MDL.Draw.Interfaces.IChemObject"/> that indicates that the end-user 
            clicked on an atom. Symyx Draw therefore supplies an <c>IAtom</c> instance 
            to the <c>ITool.ToolInvoked</c> method.
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IBond">
            <summary>
            A specialization of <see cref="T:MDL.Draw.Interfaces.IChemObject"/> that indicates that the end-user 
            clicked on a bond. Symyx Draw therefore supplies an <c>IBond</c> instance 
            to the <c>ITool.ToolInvoked</c> method.
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.ISgroup">
            <summary>
            A specialization of <see cref="T:MDL.Draw.Interfaces.IChemObject"/> that indicates that the end-user 
            clicked on an Sgroup. Symyx Draw therefore supplies an <c>ISgroup</c> instance 
            to the <c>ITool.ToolInvoked</c> method.
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IMolecule">
            <summary>
            A specialization of <see cref="T:MDL.Draw.Interfaces.IChemObject"/> that indicates that the end-user 
            clicked on a selection of the entire structure. 
            Symyx Draw therefore supplies an <c>IMolecule</c> instance 
            to the <c>ITool.ToolInvoked</c> method.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AlignTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            
            </summary>
            <param name="editor"></param>
            <param name="w"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AlignTool.AddMenuItemsToPopup(System.Collections.ArrayList,System.EventArgs,MDL.Draw.Rendering.CanvasObject,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AlignTool.menuItem_click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.multiBond_or_chainTool">
            <summary> Instance of MultiBondTool </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.keyboardTool">
            <summary> Instance of Keyboard tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.ringTool">
            <summary> Instance of RingTool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.bondOrderTool">
            <summary> Instance of BondOrderTool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.translateTool">
            <summary> Instance of translate tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.lassoTool">
            <summary> Instance of translate tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.bondTool">
            <summary> Instance of single bond tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.currentTool">
            <summary> The current tool that has been selected by the mouse press event. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.lastReleasedTool">
            <summary>last tool we got a release message from </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.mousePressedEvent">
            <summary> The mouse event that occurred when the mouse was pressed. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.canvasObjectUnderMouseOnClick">
            <summary> The canvas object that was under the mouse when mousePressedEvent
             occurred (or null if the mouse was over the canvas). </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.canvasUnderMouse">
            <summary> The canvas that the mouse event occurred over (null if it
            occurred over a canvas object). </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.isDragging">
            <summary>flag that shows if it's in the middle of moving fragment </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.pickedFragment">
            <summary>canvasObject of fragment that is choosed with control key  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.mouseMovedSinceClick">
            <summary> Is the tool already dragging  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.firstMouseMoveUsedSinceClick">
            <summary>flag that we 'used' the initial mouse move since the click event... </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.popupMenuOnScreenAtLastClick">
            <summary>flag if some of our tools have a popup 'On Screen' when the mousePressed event was received </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.clickX">
            <summary>tracks mouse click/move distance so we can decide on what a 'mouse drag' has to be... </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Despatch a mouse press event to the appropriate handler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Despatch a mouse press event to the appropriate handler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouse drag event over a canvas object by simply passing
            it on to the canvas equivalent.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouse release over a canvas object.
            *
            This is done by simply passing the event on to the canvas method.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse up event over the canvas.
            *
            This is where most of the work is done.
            The actions are determined on the basis of what object
            was initially picked.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> key pressed over object
            </summary>
            <author>  ymk
            </author>
            <version>  03-14-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> key pressed over canvas
            </summary>
            <author>  ymk
            </author>
            <version>  03-14-01
            
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.defaultSelection">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author>  ymk
            </author>
            <version>  01-23-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AllPurposeDrawingTool.CleanUp">
            <summary> Called before the editor switches to from this to a different action handler.
            </summary>
            <author>  ymk
            </author>
            <version>  04-03-02
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.ArrowTool">
            <summary> ArrowTool
            Draws a reaction arrow on the canvas.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ArrowTool.inobject">
            <summary>The type of arrow to add. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ArrowTool.mousePressedEvent">
            <summary>Point where the mouse was pressed. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ArrowTool.arrow">
            <summary>The arrow object we created. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ArrowTool.arrowStart">
            <summary>The position that the arrow is to start at. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ArrowTool.bWarn">
            <summary>Display a warning message when the user is about to add multiple arrows to the canvas. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ArrowTool.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ArrowTool.ObjectExited(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ArrowTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.ArrowTool.HandledObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>		
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.CExplicitTool.NeedsHydrogenLabel(MDL.Draw.Chemistry.Atom)">
            <summary>
            Does this atom need a hydrogen label.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.mapLine">
            <summary> The line object.
            <P>
            If this is not null then there is an object already on the
            canvas that represents the line.</P>
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.curNewMapNum">
            <summary> Track the current mapping number.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.initialPoint">
            <summary> Place where the mouse was pressed.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.firstAtom">
            <summary> First or second atom of mapped pair
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.atomOnReactantOrProduct">
            <summary> Track if atom is on reactant or product
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>
             Called when the mouse button is pressed.
            This method does nothing more than store the initial point
            in case of a mouse drag.
            </summary>
            <param name="e"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Change the line.
            <P>
            As the mouse is dragged the line is changed.
            If there was an existing line object on the canvas, we
            remove it.  As it was added with addXOR the object will
            overdraw itself as it is removed.</P>
            <P>
            Then add the new point to the line and put the object back
            on the canvas.</P>
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging from an atom saves the info for the first atom, 
            then passes onto the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse release over the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouse release over a canvas object.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.isReactionOnDisplay(MDL.Draw.Rendering.MoleculeRenderer)">
            <summary> Check if a valid reaction is on display
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.isAtomOnReactantOrProduct(MDL.Draw.Chemistry.Atom,MDL.Draw.Rendering.MoleculeRenderer)">
            <summary> Find if atom is a member of product or reactant
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.multipleMappingsIsPresent(MDL.Draw.Chemistry.Atom,MDL.Draw.Rendering.MoleculeRenderer,System.Int32,MDL.Draw.Chemistry.ReactionSupport.ObjectReactionType)">
            <summary> Reset flags used for tracking atom and state info
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.FragmentHasAAMapNum(MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Fragment,System.Int32)">
            <summary> Check if fragment contains another mapping equal to current atom's
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.ResetFlags(MDL.Draw.Rendering.Canvas)">
            <summary> Reset flags used for tracking atom and state info
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.getHighestAAMapNum(MDL.Draw.Rendering.CanvasObject)">
            <summary> Find highest atom-atom mapping value currently in use
            *
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomAtomMappingTool.init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.AtomBondHighlightTool">
            <summary> AtomBondHighlightTool
            Clicking on atom makes that atom the highlighted atom.
            Clicking on bond makes that bond the highlighted bond.
            *
            </summary>
            <author> johno
            </author>
            <version> 02-17-00
            
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomBondHighlightTool.oldDate">
            <summary>Used to calculate the time between clicks to determine double click 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomBondHighlightTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor.
            </summary>
            <author> jbo
            </author>
            <version> 01-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomBondHighlightTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
            <author> jbo
            </author>
            <version> 02-17-00
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.AttachmentPointTool">
            <summary> AttachmentPointTool
            Clicking on atom makes that atom as AttachmentPoint.
            Clicking on bond makes that bond as AttachmentPoint.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AttachmentPointTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor.
            </summary>
            <author> jbo
            </author>
            <version> 01-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AttachmentPointTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
            <author> jbo
            </author>
            <version> 02-17-00
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.AttachmentAtomTool">
            <summary> AttachmentAtomTool
            Clicking on atom makes that atom as AttachmentPoint.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.AtomTool">
            <summary>
            Summary description for AtomTool.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.AtomTool.HandledObjectTypes">
            Gets array of handled object types that can be selected.
            @author jbo
            @version 02-28-00
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.AtomTool.ComboboxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomTool.ComboboxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomTool.ComboboxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
            
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomTool.ComboboxForm.AddItemToList(System.String)">
            <summary>
            combo box is made up of:
            initial static list
            last used items
            "More..."
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BeilsteinTool.IsBeilsteinGenericGroupInstance(System.Collections.ArrayList)">
            <summary> check if any atom in the given vector is BeilsteinGenericGroup
            return true if there is at least one BeilsteinGenericGroup
            return false if there is no BeilsteinGenericGroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondOrderTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event over a canvas object.
            *
            </summary>
            <author> jbo
            </author>
            <version> 5-3-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondOrderTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>Cascade mouse released event to the canvas version. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BondOrderTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle the mouse release event.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BondOrderTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiEndAtomTool.lasso">
            <summary> The lasso object.
            If this is not null then there is an object already on the
            canvas that represents the lasso.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiEndAtomTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Called when the mouse button is pressed.
            This method does nothing more than create a new polygon object
            to store the lasso.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiEndAtomTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging across an object just passes onto the canvas.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.BuildingBlockDialog">
            <summary>
            Summary description for BuildingBlockDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.BuildingBlockDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool">
            <summary> BuildingBlockTool.cs
            
            Tool for creating and manipulating rgroup attachment point.
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging across an object just passes onto the canvas.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Changes the cursor back to default.</summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.CleanUp">
            <summary> Clean up the global variables to prepare for the next round.</summary>
            <author>  jbo
            </author>
            <version>  01-14-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.grabAttachmentPoint(MDL.Draw.Rendering.CanvasObject)">
            <summary> Grabs an attachment point and prepares for dragging.  </summary>
            <returns> true iff an attachment point has been clicked on.
            </returns>
            <author>  jbo
            </author>
            <version>  12-10-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.dropAttachmentPoint">
            <summary> Drops an attachment -- either on an appropriate atom or on an illegal position
            in which case it will sprout back on the original atom (originalAttachmentAtom).
            </summary>
            <author>  jbo
            </author>
            <version>  01-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.updateEditorCanvas">
            <summary> Refreshes the editor canvas.  Must be done for changes to be displayed.</summary>
            <author>  jbo
            </author>
            <version>  2-2-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.BuildingBlockTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author>  ymk
            </author>
            <version>  01-23-02
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.ChainTool">
            <summary> ChainTool.java
            *
            Action handler that will add a chain to part of a molecule structure.
            *
            </summary>
            <author> mikeh
            
            </author>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.atomsAddedCount">
            <summary>The last ring size that was generated. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.atomsAddedLabel">
            <summary>The text object that shows the ring size. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.firstAtomCreated">
            <summary>Was the first atom created. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.lastChainAngle">
            <summary>The last angle that the chain was dragged at. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.negateNormal">
            <summary>Are we negating the current normal vector. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.pickedFragment">
            <summary>The fragment that the new atoms and bonds will be added to (jbo 4-4-00)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event over a canvas object.
            *
            This starts the process of dragging a new chain.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse press over the canvas itself.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.StartEditing(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.MoleculeRenderer)">
            <summary> Common initialisation.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.CreateFirstAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Utils.Point3d)">
            <summary> Create the first atom if we clicked over the canvas or
            a non atom canvas object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Dragging causes a ring to be pulled out of the current
            picked atom or bond.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.CalculateChainNormalVector(MDL.Draw.Utils.Point3d)">
            <summary> Figure out if we need to flip the chain normal direction.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.BuildChain(MDL.Draw.Rendering.MoleculeRenderer,MDL.Draw.Utils.Point3d)">
            <summary> Build a section of chain.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse up event.
            We make no distinction about mouse up over the canvas
            or a canvas object, so just make one call the other.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass the drawing onto the other mouseUp event handler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.addAtomsAddedLabel(MDL.Draw.Rendering.MoleculeRenderer,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>Add a label to the drawing that shows the current ring size. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.RemoveAtomsAddedLabel">
            <summary>Blow away an old ring size label. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ChainTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ChainTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.CheshireSupport">
            <summary>  This is a utility class to use Cheshire
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.ColorPopupMenuTool">
            <summary>
            Popup menu tool for graphics shapes
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.ConfigTemplateTool">
            <summary> A configurable template tool.
            XML Format:
            <tool tooltip="Drag molecule onto button to change template."
            class="MDL.Draw.Modules.Editor.Tools.ConfigTemplateTool"
            button="MDL.Draw.Gui.MoleculeButton"
            file="Template Buttons/template2.mol"
            dochelp="%COMMON%T_TEMPICONS.html"
            selectiongroup="true"
            />
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.TemplateTool">
            <summary> Tool handler that will add a template to part of a molecular structure.
            This handler will implement the functionality of templates in ISIS/Draw.
            This includes fusing at atoms, bonds and adding a new bond to the
            template when it is added.
            If no fuseAtom is specified then the first atom in the structure
            is used.
            If no fuseBond is specified then the first bond in the structure
            is used.
            A common extending class is ConfigTemplateTool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateTool.pickedRgroup">
            <summary>The rgroup that was picked (or null if no rgroup was picked).  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateTool.fileName">
            <summary>The name of the file read into TemplateTool to initialize it 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateTool.templateResourceName">
            <summary> The resource name that we obtained the molecule from.
            *
            We really need to store this as we are going to have to load
            the template each time we add it to the current structure.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateTool.keyboardTool">
            <summary> Instance of Keyboard tool.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateTool.addedAromaticRing">
            <summary>true if the template added to molecule is aromatic 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse down event over the canvas.
            *
            </summary>
            <author> jbo
            </author>
            <version> 11-19-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse is pressed on an atom or a bond. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse drag event over the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass the drawing onto the other mouse drag event handler.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse up event over the canvas.
            Fuse the previously added template to the molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass the drawing onto the other mouseUp event handler. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>*******  Change cursor during alt-key pressed  **********
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.CreateTemplateAtAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom)">
            <summary> Creates a copy of templateMolecule aligned with the given atom. </summary>
            <param name="molecule">The canvas Molecule. </param>
            <param name="targetAtom">The atom (in molecule) to add the template to </param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.AddTemplateToFragment(MDL.Draw.Chemistry.Molecule,System.Double,System.Double,MDL.Draw.Chemistry.Atom@)">
            <summary> Add the template to the molecule at a point. </summary>
            <param name="molecule">The canvas Molecule. </param>
            <param name="px">The x-coordinate to move the template to. </param>
            <param name="py">The y-coordinate to move the template to. </param>
            <param name="attachAtom">attachment point atom of the copied template to add attachment point to.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateTool.AddWholeTemplateToMolecule(MDL.Draw.Chemistry.Molecule,System.Double,System.Double)">
            <summary> Add the whole template to the molecule. </summary>
            <returns>The fragment added. </returns>
            <param name="molecule">The canvas Molecule. </param>
            <param name="dx">The canvas x coordinate to move the fusionAtom of the template to. </param>
            <param name="dy">The canvas y coordinate to move the fusionAtom of the template to. </param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.TemplateTool.RGroupTool">
            <summary> Finds or creates an instance of RgroupTool.</summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.DataSgroupDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DataSgroupDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DataSgroupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DataSGroupTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DataSGroupTool.InitDataFieldName(MDL.Draw.Modules.Widget)">
            <summary>Assumes that the given widget is a PALETTEButton object and initiate it.
            Used for DataSgroupTool only
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DataSGroupTool.InitOperator(MDL.Draw.Modules.Widget)">
            <summary>Assumes that the given widget is a Operator object and initiate it.
            Used for DataSgroupTool only
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DataSGroupTool.InitListValue(MDL.Draw.Modules.Widget)">
            <summary>Assumes that the given widget is a ListValue object and initiate it.
            Used for DataSgroupTool only
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.DataSGroupTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.lastSelectedObjects">
            <summary>vector of the objects we selected in last mousedrag event 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging across an object just passes onto the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouse release over a canvas object.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse release over the canvas.
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.removeSelectionMapping(MDL.Draw.Rendering.Canvas)">
            <summary> Remove the mapping on the atoms in the last selection
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.RemoveMapping(MDL.Draw.Rendering.Canvas,MDL.Draw.Chemistry.Atom)">
            <summary> remove the mapping (if any) on the specified atom.
            This is called from the mouseReleased() fonctions.
            If the atom is the only one with this mapping on this side of the reaction
            remove the mapping on all the atoms with this mapping number.
            if there are some other atoms on this side of the reaction with the same
            mapping number, the other atoms are untouched.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteAtomAtomMappingTool.RemoveAAMapNum(MDL.Draw.Rendering.Canvas,System.Int32)">
            <summary> Remove any atom mapping values that equal value passed into function
            *
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.DeleteSupport">
            <summary> DeleteSupport.cs
            *
            Methods to support object deletion in the editor.
            
            </summary>
            <author>  jbo
            
            </author>
            <summary>07-02-02   jbo added deletePlus() to fix problem with leaving fragment behind
            06-06-02    fan remove second atom first so that undo will add first atom first. cct00031168
            02-21-02    ymk added null text for destroyBond()
            04-11-01    ymk Got rid of MTChemProperties and MTObjecTypes.
            Added those fields to corresponding implementation classes.
            03-05-01    jbo methods taken from DeleteTool and DeleteAction
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.DeleteSupport.DestroyNodeChildren(MDL.Draw.Nodes.Node,MDL.Draw.Modules.Editor.EditorModule)">
            <summary> This method will find all of the children types of an object
            and destroy all of the children of each of those types.
            *
            NOTE:  The tool will not delete fragments!!!!!  jbo
            *
            Bonds are the only complication as MDL style is to destroy any
            unconnected atoms that are left after a bond is deleted.
            NOTE:When findGroupParent is true, it goes UP the tree to find any FragmentGroup parent and destroy the whole group
            </summary>
            <author>  jbo
            </author>
            <version>  1-23-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.DeleteSupport.destroyPlus(MDL.Draw.Chemistry.ReactionPlus)">
            <summary> Destroys a reaction plus and its multiple fragment parents.
            </summary>
            <author>  jbo
            
            </author>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.DeleteSupport.DestroyRgroup(MDL.Draw.Chemistry.Rgroup)">
            <summary> Destroys a Rgroup label and the related features as well (attach points, rgroup atom labels, etc)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.DeleteSupport.DestroySkText(MDL.Draw.Chemistry.GraphicsSkText,MDL.Draw.Modules.Editor.EditorModule)">
            <summary> Destroys a GraphicsSkText by destroying all needed objects.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.DeleteTool.currentLassoTool">
            <summary> The current lasso tool that has been selected. 
            (Lasso or Rectagle or Molecule select Tool).
            It'll be updated on every deleteTool selection( from init() )
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.DeleteTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't want to do it.
            So can't write this in EditorTool)
            </summary>
            <author>  ymk
            </author>
            <version>  01-23-02
            </version>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.DeleteTool.HandledObjectTypes">
            <summary> Gets array of handled object types that can be selected.</summary>
            <author>  jbo
            </author>
            <version>  02-28-00
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.EditBondLengthTool">
            <summary>
            Changes selected bond(s) length by moving its atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.EditDataSGroupTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.EditDataSGroupTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.GetContractedSuperParent(MDL.Draw.Nodes.Node)">
            <summary> get contracted super sgroup parent of atom if it has one. return null otherwise.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.SetThreeLetterDisplay(MDL.Draw.Chemistry.Sgroup,System.Boolean)">
            <summary>
            This method interconverts between one letter and multi-letter(noted as 3) display.
            </summary>
            <param name="sgroup">The Sgroup to do the conversion upon.</param>
            <param name="threeLetterValue">A bool determing the state you want to convert it to, false means one letter, true meaning multi.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.CheckAbbreviationsAreValid(MDL.Draw.Chemistry.Molecule)">
            <summary>
            Checks that the abbreviations sgroups are valid. i.e. that all the atoms have bonds between sgroup atoms or to an atom outside through a crossing bond.
            If not it's because the bond has been added and the user has not specified if he wanted the bond to be included in the 
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.GetAlphaAtomsNotInSgroup(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Atom)">
            <summary>
            The name pretty much describes the routine, find the atoms
            attached to this that are not in the same Sgroup as the atom.
            </summary>
            <param name="theSgroup"></param>
            <param name="fromAtom"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.GetAttachmentPointSgroups(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Atom)">
            <summary>
            Return the attachment point sgroups that has given attachAtom
            as an attachment point atom.
            
            This is modelled on a similar routine in Sgroup.cs, but we
            need all of the attachment point sgroups, not just the first
            one to allow for the possibility that we have more than one
            at a site.
            </summary>
            <param name="theSgroup">The Sgroup</param>
            <param name="attachAtom">The Atom to do the check at</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.HasSgroupsOfType(MDL.Draw.Chemistry.ChemObject,System.String)">
            <summary>
            This method ignores data sgroups of type Sgroup.RESIDUE_ATTACHMENT_ORDER
            to allow for these to be properly retained
            </summary>
            <param name="a">Atom to check</param>
            <param name="theType">Type of Sgroup to be screened for</param>
            <returns>Whether or not it has this type of Sgroup</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.InvalidateSGroup(MDL.Draw.Chemistry.Sgroup)">
            <summary>
            This method removed the CanvasObject(s) from the Sgroup, it's atoms
            and bonds.
            
            This is intended to make sure that the display is properly cleaned up
            for these removed items.
            </summary>
            <param name="sgroup">The Sgroup to act upon</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.ContractAbbrev(MDL.Draw.Chemistry.Fragment)">
            <summary> Contract abbreviations
            </summary>
            <author>  lchen
            </author>
            <version>  05-02-11
            </version>
            
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.ContractOrExpandAbbrev(System.Collections.ArrayList,System.Boolean)">
            <summary> update list of connecting bonds of sgroup based on the currend molecule
            contract super sgroup
            if expand is true, we're expanding an abbreviation
            Otherwise, we're contracting.
            </summary>
            <author>  ymk
            </author>
            <version>  03-29-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.GetSuperSgroupParent(MDL.Draw.Nodes.Node)">
            <summary> get super sgroup parent of Node if it has one. return null otherwise.</summary>
            <author>  ymk
            </author>
            <version>  03-28-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ExpandContractAbbreviationTool.GetSuperSgroupParentsWithLeastChildren(System.Collections.ArrayList)">
            <summary> get super sgroup parents of Node. If its has more than one, get the one with least number of atom children
            This is to contract the "innermost" abbreviation when there is nested abbreviation
            </summary>
            <author>  ymk
            </author>
            <version>  12-11-02
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.FlipTool">
            <summary> FlipTool.java
            *
            Flip a fragment or a selection vertically or horizontally by left mouse button.
            Rotate a fragment or selection by right mouse button
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RotateFlipTool.getSelectedPartOfAtoms(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Atom,System.Boolean)">
            <summary> selectedAtom is one of either atom of pickedBond
            find all atoms on that part of the pickedBond
            NOTE:if pickedBond is a ring bond, it'll return whole fragment's atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FlipTool.flipBond(MDL.Draw.Chemistry.Bond,System.Windows.Forms.MouseEventArgs)">
            <summary>*************** functions for flip (right mouse click) *******************************
            </summary>
            <summary> flip either side of the given bond
            It finds out which side to flip by mouse position
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FlipTool.flipPart(MDL.Draw.Chemistry.Bond,System.Collections.ArrayList)">
            <summary> called from flipBond(). flip atoms against midPoint of the given bond
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FlipTool.flip(MDL.Draw.Chemistry.Fragment,MDL.Draw.Modules.Editor.Tools.RotateFlipTool.Mode)">
            <summary> flip the given fragment. (flip atoms for now.)
            flag will show wheather it's vertical or horizontal flip
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FlipTool.flipAtom(MDL.Draw.Chemistry.Atom,MDL.Draw.Modules.Editor.Tools.RotateFlipTool.Mode)">
            <summary> flip a parent fragment of the given atom
            difference from flip(fragment) : this method will use the atoms'coord. as a flip center
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FlipTool.calculateImaginaryLine(MDL.Draw.Chemistry.Atom,MDL.Draw.Modules.Editor.Tools.RotateFlipTool.Mode)">
            <summary> calculate imaginary boundary line for atom flip (furthestAtomX, furthestAtomY)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FlipTool.flipAll(MDL.Draw.Modules.Editor.Tools.RotateFlipTool.Mode,System.Boolean)">
            <summary> Flip the whole molecule
            if centerSpecified is true, use flipCenterPoint,
            use COM of molecule otherwise
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ActionList.xml_serializer">
            <summary>The singleton instance of XML serializer.
            We should avoid creating XmlSerializer just temporary per need,
            since it is expensive, and each instance is a slight memory leak.
            More info http://weblogs.asp.net/cschittko/archive/2004/02/11/71649.aspx
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsArcTool">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsBracketRectTool">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsCircleTool">
            <summary>
            Summary description for GraphicsEllipseTool.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsCircularArcTool">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsCircularArcTool.changeArcPoints(MDL.Draw.Modules.Editor.Tools.GraphicsShapeTool.MouseInfo,MDL.Draw.Rendering.CanvasRectangleMarker.MarkerInfo,MDL.Draw.Utils.Point3d[])">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsLineTool">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsPopupMenuTool">
            <summary>
            Popup menu tool for graphics shapes
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.GraphicsShapeToolold">
            <summary>
            Tool for drawing shapes
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.GraphicsShapeToolold.translateTool">
            <summary> Instance of translate tool. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeToolold.setBoxMode(MDL.Draw.Rendering.CanvasObject,System.Int32,System.Int32,MDL.Draw.Rendering.Canvas)">
            <summary>
            In this Top and Bottom really relate to screen position so NSEW is clearer
            </summary>
            <param name="canvasObject"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeToolold.NeedResize">
            <summary>
            in tool we can press on tracker and then release without dragging, in this case resize not neede
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GraphicsShapeToolold.DoResize(MDL.Draw.Rendering.Canvas,MDL.Draw.Nodes.Node)">
            <summary>
            DoResize
            </summary>
            <param name="canvas"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.GroupUngroupFragmentTool.isEnbled(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.KeyboardDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.KeyboardTool">
            <summary> KeyboardTool class
            Used to change/sprout atom names or abbreviation by keyboard typing
            </summary>
            <author>  jbo, ymk
            </author>
            <version>  03-14-01
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.KeyboardTool.searchStatus">
            <summary>
            seach status.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.KeyboardTool.types">
            <summary>
            Vector of types returned from PTable
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.KeyboardTool.counter">
            <summary>
            increaed /decreased to keep track of undo.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> mouse pressed over canvas: sets selectionTool</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> mouse pressed over object: sets selectionTool</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.KeyPressed(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> key pressed over object</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> key pressed over object</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.KeyPressed(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> key pressed over canvas</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> key released over canvas</summary>
            <author>  ymk
            </author>
            <version>  03-14-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.AddRgroupDefinition(System.Int32,System.Int32,MDL.Draw.Utils.Point3d,MDL.Draw.Chemistry.Molecule)">
            <summary> Add an Rgroup definition ("R1 = ", "R2 = ", ...) to the molecule.</summary>
            <attachmentCount>  The number of attachment points members of rgroup should have. </attachmentCount>
            <summary>                  This should be based on the valence of the Rgroup Atom.
            </summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.UpdateRLogic(MDL.Draw.Chemistry.Molecule,System.Int32)">
             <summary> Should be called after an RgroupLabel is added to an atom.
             If more than one rgroupLabel is defined then the rlogicItem
             is either updated or a new one is defined (depending on mode).
             </summary>
             <param name="mtm"> The molecule.
             </param>
             <param name="rgroupNumber">The rgroup label number just added.
             </param>
            
             <author>  jbo
             </author>
             <version>  12-13-99
             </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.GetOccurenceOfRgroupLabels(MDL.Draw.Chemistry.Molecule,System.Int32)">
            <author>  jbo
            </author>
            <version>  12-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.HandleUndo(MDL.Draw.Chemistry.Molecule)">
            <summary>
            single fail point for Undo finish handling
            </summary>
            <param name="mol">usually the Editor.molecule</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.HandleKeyboardInput(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> handle keyboard inputs (create Dialog, make tree model in a seperate thread,
            set title according to the first key stroke)
            </summary>
            <author>  ymk
            </author>
            <version>  03-14-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.AbbrevPrefInitFrom">
            <summary> 
            Initializes the isExpanded and abbrevDialog.checkBox1.Checked variable 
            from the renderer.Preferences.TypeInAbbreviationInitialDisplay pref. status.
            </summary>
            <author> petrk
            </author>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.AbbrevPrefUpdateEditor">
            <summary> 
            Updates the preference renderer.Preferences.TypeInAbbreviationInitialDisplay
            </summary>
            <author> petrk
            </author>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.AddMolecule(MDL.Draw.Chemistry.Molecule)">
            <summary> Adds the template to the canvas without fusion.
            NOTE:  Uses globals:  molHasBeenAdded, isSprout, selectedAtomsAndAbbreviations, abbrevDialog, lastSgroupsAdded
            </summary>
            <author>  jbo
            </author>
            <version>  3-15-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.AddRgroup(System.Int32)">
            <summary> Adds Rgroup to the molecule
            NOTE: used Globals : molHasBeenAdded, lastSgroupsAdded, selectedAtomsAndAbbreviations, isSprout
            </summary>
            <author>  ymk
            </author>
            <version>  01-11-02
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.FinalizeMoleculeAddition(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.Atom)">
            <summary> Fuses the lastMolsAdded to the canvasMolecule and clears the vector.</summary>
            <author>  jbo
            </author>
            <version>  3-15-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.CreateSGroup(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,System.Collections.ArrayList,MDL.Draw.Chemistry.Molecule)">
            <summary>
            Creates the sgroup associated with the template being added.</summary>
            <param name="template">The molecule or fragment that has been added to the canvas.</param>
            <param name="canvasMol">?</param>
            <param name="targetAtom">?</param>
            <param name="newAtoms">?</param>
            <param name="origTemplate">?</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.AddAtom(System.Int32)">
            <summary> Adds atom to the molecule
            NOTE: used Globals : molHasBeenAdded, lastSgroupsAdded, selectedAtomsAndAbbreviations, isSprout
            </summary>
            <author>  ymk
            </author>
            <version>  03-20-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.InitTemplateStore">
            <summary> Creates templateStore if it isn't already there.
            It's called by separate thread to save time.
            </summary>
            <author>  jbo
            </author>
            <version>  3-15-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.KeyboardTool.GetSelectedAtoms(MDL.Draw.Rendering.Canvas)">
            <summary> The function returns selected atoms in specified canvas</summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.KeyboardTool.abbrevDialog">
            <summary>
            handle to a single keyboard dialog per instance of draw.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.AtomKeyboardTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor.</summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.LassoImplTool">
            <summary> LassoSelect class
            *
            Simple demonstration of creating CanvasActions class as
            a handler for Canvas events.
            This example shows how to create a lasso selection tool.
            All methods return <c>true</c> if they want the picture to be redrawn.
            All of the methods in this example return <c>false</c> because the objects
            that are added are drawn in XOR mode (addXOR).  The main picture
            does not need to be redrawn.
            *
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoImplTool.SelectAllButRings">
            uncomment types when they exist FAN 8/12/03
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoImplTool.lasso">
            <summary> The lasso object.
            If this is not null then there is an object already on the
            canvas that represents the lasso.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoImplTool.lastSelectedObjects">
            <summary>
            vector of the objects we selected in last mousedrag event 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Called when the mouse button is pressed.
            This method does nothing more than create a new polygon object
            to store the lasso.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>mouse pressed over object, pass onto canvas handler 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Change the highlight lasso.
            As the mouse is dragged the highlight lasso is changed.
            If there was an existing lasso object on the canvas, we
            remove it.  As it was added with addXOR the object will
            overdraw itself as it is removed.
            Then add the new point to the lasso and put the object back
            on the canvas.
            </summary>	
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging across an object just passes onto the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Remove the highlight lasso.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MouseReleasedImpl(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> The implementation of mouseReleased(canvas) -- needed so that 
            there won't be any confusion when classes extend this class and
            have their own mouseReleased(canvas) methods.  I know this sounds
            silly, but it happened -- really.  Must be a JRE bug.
            </summary>
            <author>  jbo
            </author>
            <version>  4-11-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoImplTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a release over a canvas object.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.LassoImplTool.HandledObjectTypes">
            <summary> 
            Gets array of handled object types that can be selected.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.Rotater.Rotate(MDL.Draw.Utils.Point3d,MDL.Draw.Rendering.Canvas)">
            <summary>
            rotate all selected objects
            </summary>
            <param name="dragged">current mouse position (in object space)</param>
            <param name="canvas">canvas</param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.LassoTool">
            <summary> LassoTool class
            Uses 
            -LassoImplTool (formerly named LassoTool) to implement lasso select
            -TranslateObjectTool to implement translations.
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.translateTool">
            <summary> Instance of translate tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.selectionTool">
            <summary> Instance of lasso implementation tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.keyboardTool">
            <summary> Instance of Keyboard tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.currentTool">
            <summary> The current tool that has been selected by the mouse press event. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.canvasObjectUnderMouse">
            <summary> The canvas object that was under the mouse when
            mousePressedEvent occurred (or null if the mouse was over the
            canvas).
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.objectUnderMouse">
            <summary>The chem object corresponding to the canvasObjectUnderMouse 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.LassoTool.isDragged">
            <summary>State where the mouse isn't being dragged.  </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> mouse pressed over object: sets selectionTool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>   mouse pressed over object:
            if atom or bond, then select (prepare to drag)
            if selected atom or bond -- nothing (prepare to drag)
            if fragment -- pass on to canvas
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MouseDragOver(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
            <param name="dragEvent"></param>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <author>  jbo
            </author>
            <version>  01-10-00
            
            </version>        
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MouseLeave(System.EventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.KeyPressed(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> key pressed over object
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.KeyPressed(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>
            
            </summary>
            <param name="ev"></param>
            <param name="canvasObject"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.CleanUp">
            <summary> Called before the editor switches to from this to a different action handler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.UnselectEverythingButFrags(MDL.Draw.Rendering.Canvas)">
            <summary> check through the selection and unselect everything except fragment, rgroup, data sgroup and a group
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.UnselectFragsChild(MDL.Draw.Chemistry.Fragment)">
            <summary> check through the selection and unselect the frag's children if any.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.AttachClean">
            <summary> Clean up the global variables to prepare for the next round.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.Mode2Cursor(MDL.Draw.Modules.Editor.Tools.GenericEditorTool.ResizeMode)">
            <summary>
            
            </summary>
            <param name="amode"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.ObjectExited(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.GrabAttachmentPoint(MDL.Draw.Rendering.CanvasObject,MDL.Draw.Chemistry.Atom)">
            <summary>10-04-01 ymk copied from RGroupTool
            Grabs an attachment point and prepares for dragging.  
            </summary>
            <returns> true iff an attachment point has been clicked on.
            </returns>
            <author>  jbo
            </author>
            <version>  12-10-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.LassoTool.DropAttachmentPoint">
            <summary>10-04-01 ymk copied from RGroupTool
            Drops an attachment -- either on an appropriate atom or on an illegal position
            in which case it will sprout back on the original atom (originalAttachmentAtom).
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MenuTitleTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.MoleculeSelectTool">
             <summary> MoleculeSelectTool class
             
             selectionTool that deals with MTFragment.OTYPE only.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MoleculeSelectTool.ObjectExited(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
            <author> jbo
            </author>
            <version> 01-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MoleculeSelectTool.GetContainedCanvasObjects(MDL.Draw.Rendering.Canvas)">
            <summary> Gets array of handled object types that can be selected.
            </summary>
            <author> jbo
            </author>
            <version> 02-28-00
            
            </version>	
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.rectangle">
            <summary> The rectangle object.
            If this is not null then there is an object already on the
            canvas that represents the rectangle.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.lastSelectedObjects">
            <summary>vector of the objects we selected in last mousedrag event 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Called when the mouse button is pressed.
            This method does nothing more than create a new polygon object
            to store the rectangle.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.FindCanvasObjectsInRectangle(MDL.Draw.Rendering.Canvas)">
            <summary>
            Find the objects that intersect the rectangle.
            The rings are not included.
            </summary>
            <returns>an array of canvas objects inside the rectangle</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Change the highlight rectangle.
            As the mouse is dragged the highlight rectangle is changed.
            If there was an existing rectangle object on the canvas, we
            remove it.  As it was added with addXOR the object will
            overdraw itself as it is removed.
            Then add the new point to the rectangle and put the object back
            on the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging across an object just passes onto the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Remove the highlight rectangle.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.MouseReleasedImpl(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> The implementation of mouseReleased(canvas) -- needed so that 
            there won't be any confusion when classes extend this class and
            have their own mouseReleased(canvas) methods.  I know this sounds
            silly, but it happened -- really.  Must be a JRE bug.
            </summary>
            <author> jbo
            </author>
            <version> 5-02-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectImplTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a release over a canvas object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MoleculeSelectTool.RectangleFragmentSelectTool.FindCanvasObjectsInRectangle(MDL.Draw.Rendering.Canvas)">
            <summary>
            find canvas objects for fragments in the rectangle
            </summary>
            <param name="d">canvas</param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.TAG_SPROUT_MARKER">
            <summary>Tag name used to mark sprout highlight markers
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.MBT_BONDPROP_BONDUSECOUNT">
            <summary>Bond use constant property for MultiBondTool use
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.MBT_ATOMPROP_NEWATOMFLAG">
            <summary>New atom flag constant property for MultiBondTool use
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.bDrawSproutMarkers">
            <summary>Flag determines if we add sprout indication marks
            Currently *false* because this slows things down
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.atomStack">
            <summary> System.Collections.ArrayList that holds the stack of atoms in the path we
            have built through the molecule.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.bondStack">
            <summary> System.Collections.ArrayList that holds the new bonds we built.
            *
            Only here so that we can remove their MBT_BONDPROP_BONDUSECOUNT properties.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.sproutPositions">
            <summary>The vector of sprout points. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.atomsAddedCount">
            <summary>The number of new atoms we actually added. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.atomCountLabel">
            <summary>The text object that shows the count of the atoms added. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.pickedFragment">
            <summary>The fragment that the new atoms and bonds will be added to (jbo 4-4-00)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a  mouse down event over the canvas.
            *
            We create a new atom and proceed from there.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event over a canvas object.
            *
            This starts the process of dragging a new chain.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.AtomIsJustBelowTopOfStack(MDL.Draw.Chemistry.Atom)">
            <summary> Is the passed atom just below the current top of stack.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.SetPickedAtom(MDL.Draw.Rendering.MoleculeRenderer,MDL.Draw.Chemistry.Atom)">
            <summary> Change the picked atom.
            *
            This removes old sprout objects from the canvas,
            generates the sprout positions for the new atom and 
            creates the sprout markers.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.AddAtomCountLabel(MDL.Draw.Rendering.MoleculeRenderer)">
            <summary>Add a label to the drawing that shows the current ring size. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.RemoveAtomCountLabel">
            <summary>Blow away an old atom count label. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.FindNearestSproutPosition(MDL.Draw.Utils.Point3d)">
            <summary> Find the nearest sprout position to the current position of the mouse.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.sproutCrossSize">
            <summary>Size of crosses that mark the position of sprout points. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.AddSproutPositions(MDL.Draw.Rendering.Canvas,System.Collections.ArrayList)">
            <summary> Add a set of sprout positions to the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.AddSproutPosition(MDL.Draw.Rendering.Canvas,MDL.Draw.Utils.Point3d)">
            <summary> Add a single sprout position to the canvs.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.AddLine(MDL.Draw.Rendering.Canvas,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>Add a line to the canvas with the specified tag. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiBondTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiBondTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.MultiTool">
            <summary> A class that has vector of multi-action handlers.
            *
            It calls each of those action handler's method at the time of event.
            This class is mainly used as an action handler for multi-level tools.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiTool.ContainsTool(MDL.Draw.Modules.Editor.Tools.GenericEditorTool)">
            <summary>
            returns true if the multi tool contains the tool.
            Note : recurses in multi tools found in the multi tool.
            </summary>
            <param name="t">tool to look for</param>
            <returns>true if the tool is part of the multi tool.</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiTool.Init">
            <summary> Called when this is made the active action handler on the editor.
            </summary>
            <author> jbo
            </author>
            <version> 12-04-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiTool.CleanUp">
            <summary> Called before the editor switches to from this to a different action handler.
            </summary>
            <author> jbo
            </author>
            <version> 12-04-00
            
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.MultiTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.MultiTool.GetTriggerIntValue(System.String)">
            Translate trigger method strings into int Value so that it's used in MultiTool *
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.NewAbbrevDialog">
            <summary>
            Summary description for NewAbbrevDialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.NewAbbrevDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.NewAbbrevDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.NewAbbrevDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.NewAbbreviationTool">
            <summary>
            Creates new abbreviation or Templates from selected part of structure.
            This class handles "Create Abbreviation" menuItem from ContextMenu.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.NewAbbreviationTool.CreateAbbreviation(System.Collections.ArrayList,MDL.Draw.Chemistry.Molecule,System.String,System.Boolean)">
            <summary> Creates the abbreviation sgroup that includes current selection</summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.NewAbbreviationTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.PanTool">
            <summary>
            Summary description for ZoomTool.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.PropertiesTool">
            This tools is a dummy tool only to make Properties tool to unselect any previous selection.
            MenuTool(multiTool) can't do that 'cause it's used in lassoTool as well.
            @author ymk
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.PropertiesTool.HandledObjectTypes">
            <summary> Gets array of handled object types that can be selected.</summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.ReactionPlusTool">
            <summary> ReactionPlusTool.java
            *
            </summary>
            <author> mikeh
            </author>
            <version> 0.1
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ReactionPlusTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Creates an ReactionPlus tool.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ReactionPlusTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse press over the canvas itself.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.ReactionPlusTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.ReactionPlusTool.init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.RectangleSelectTool">
            <summary> RectangleSelectTool class
            
            Uses rectangle selection to select chemical objects and allows selected
            objects to be dragged on the canvas.
            *
            NOTE:  Original implementation of RectangleSelectTool has been moved to 
            RectangleSelectImplTool.
            *
            </summary>
            <author> jbo
            </author>
            <version> 05-02-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RectangleSelectTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor.
            </summary>
            <author> jbo
            </author>
            <version> 05-02-00
            
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.RGroupTool">
            <summary> RGroupTool.cs
            
            Tool for creating and manipulating rgroups.
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.getOccurence(MDL.Draw.Chemistry.Rgroup)">
            <summary> Returns the occurence string of the rgroup or null if there is none.</summary>
            <author>  jbo
            </author>
            <version>  2-2-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Drag a fragment.</summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Drag a fragment.</summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Drags selected fragment across the canvas.</summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Dragging across an object just passes onto the canvas.</summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Changes the cursor back to default.</summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MouseMoved(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass on to Canvas:</summary>
            <author>  jbo
            </author>
            <version>  01-14-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.MouseMoved(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Moves picked fragments if they exist.</summary>
            <author>  jbo
            </author>
            <version>  01-14-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.CleanUp">
            <summary> Clean up the global variables to prepare for the next round.</summary>
            <author>  jbo
            </author>
            <version>  01-14-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.grabAttachmentPoint(MDL.Draw.Rendering.CanvasObject)">
            <summary> Grabs an attachment point and prepares for dragging.  </summary>
            <returns> true iff an attachment point has been clicked on.
            </returns>
            <author>  jbo
            </author>
            <version>  12-10-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.dropAttachmentPoint">
            <summary> Drops an attachment -- either on an appropriate atom or on an illegal position
            in which case it will sprout back on the original atom (originalAttachmentAtom).
            </summary>
            <author>  jbo
            </author>
            <version>  01-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.ArrangeFragmentInRgroup(MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Rgroup)">
            <summary> Position fragment at the end of the Rgroup definition.
            
            </summary>
            <author>  jbo
            </author>
            <version>  12-09-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.createRGroupPanel(System.Boolean,System.Collections.ArrayList,MDL.Draw.Chemistry.Rgroup)">
            <summary> Create the popup of rgroup labels.
            
            If the argument useButtonGroup is false then all of the buttons can
            be selected or deselected individually.
            
            Otherwise they will be part of a button group and only 
            one can be selected at a time.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.createExistingRGroupPanel(System.Boolean,MDL.Draw.Chemistry.Fragment)">
            <summary> Create panel to allow user to choose from existing Rgroups.  
            
            If the argument useButtonGroup is false then all of the buttons can
            be selected or deselected individually.
            
            Otherwise they will be part of a button group and only 
            one can be selected at a time.
            </summary>
            <author>  jbo
            </author>
            <version>  01-17-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.actionPerformed(System.Object,System.EventArgs)">
            <author>  jbo Rewrote from MikeH's code.
            </author>
            <version>  12-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.menuItem_click(System.Object,System.EventArgs)">
            <summary> Called from actionPerformed to execute the commands from popup menus.</summary>
            <author>  jbo
            </author>
            <version>  01-10-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.setAtomRGroups(MDL.Draw.Rendering.Canvas)">
            <summary> Set the atom rgroup membership.
            
            The inRGroup array will have been kept up to date
            as the buttons are pressed, now we just have to
            retrieve the values and reset the atoms rgroup
            membership.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.setFragmentRGroups">
            <summary> Handle the selection of a fragment rgroup number.
            
            This method does a number of things.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.updateRLogic(MDL.Draw.Chemistry.Molecule,System.Int32)">
            <summary> Should be called after an RgroupLabel is added to an atom.
            If more than one rgroupLabel is defined then the rlogicItem
            is either updated or a new one is defined (depending on mode).
            </summary>
            <param name="mtm"> The molecule.
            </param>
            <param name="rgroupNumber">The rgroup label number just added.
            </param>
            <author>  jbo
            </author>
            <version>  12-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.excludeRgroup(MDL.Draw.Chemistry.Rgroup)">
            <summary> called after "Exclude this funtional group" menu is clicked.
            change the occurrence string to "0" or make a new RGroupLogicItem 
            and set the ocurrence to "0"
            </summary>
            <author>    ymk
            </author>
            <version>  10-17-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.includeRgroup(MDL.Draw.Chemistry.Rgroup)">
            <summary> called after "Include members only" menu is clicked.
            change the occurrence string to ">0" and set RestH "On"
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.canFragmentBeAddedToAnyRgroup(MDL.Draw.Chemistry.Fragment)">
            <summary> Searches through all defined rgroups to see if fragment can be added.</summary>
            <author>  jbo
            </author>
            <version>  1-22-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.canFragmentBeAddedToRgroup(MDL.Draw.Chemistry.Fragment,MDL.Draw.Chemistry.Rgroup)">
            <summary> Checks fragment to see if it has an atom rgroup label that points to rgroup.
            Returns false if rgroup == null or if adding fragment to rgroup would create
            an infinite loop.
            </summary>
            <author>  jbo
            </author>
            <version>  1-22-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.getOccurenceOfRgroupLabels(MDL.Draw.Chemistry.Molecule,System.Int32)">
            <author>  jbo
            </author>
            <version>  12-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.editRLogic(MDL.Draw.Chemistry.RgroupLogicItem)">
            <author>  jbo
            </author>
            <version>  12-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.createFrequencyPanel(MDL.Draw.Chemistry.RgroupLogicItem)">
            <summary> Create a chooser for frequency/occurence.</summary>
            <author>  jbo
            </author>
            <version>  12-13-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.AddRgroupDefinition(System.Int32,System.Int32,MDL.Draw.Utils.Point3d,MDL.Draw.Chemistry.Molecule)">
            <summary> Add an Rgroup definition ("R1 = ", "R2 = ", ...) to the molecule.</summary>
            <attachmentCount>  The number of attachment points members of rgroup should have. </attachmentCount>
            <summary>                  This should be based on the valence of the Rgroup Atom.
            </summary>
            <author>  jbo
            </author>
            <version>  12-08-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.updateEditorCanvas">
            <summary> Refreshes the editor canvas.  Must be done for changes to be displayed.</summary>
            <author>  jbo
            </author>
            <version>  2-2-00
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RGroupTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author>  ymk
            </author>
            <version>  01-23-02
            </version>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.RGroupTool.TemplateTool">
            <summary> Finds or creates an instance of TemplateTool.</summary>
            <author>  jbo
            </author>
            <version>  12-14-99
            </version>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.RGroupTool.SelectedFragmentRgroupNumber">
            <summary> Return the rgroup that was selected in the popup.</summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RgroupDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RgroupDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RgroupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.FrequencyDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FrequencyDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.FrequencyDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.CurrentRgroupDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.CurrentRgroupDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.CurrentRgroupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.RingBondTool">
            <summary> RingBondTool class
            *
            </summary>
            <author> ymk
            
            </author>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.bondOrder">
            <summary>Bond order that this tool creates. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.bondStereo">
            <summary>Stereo configufation that this tool creates. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.xdown">
            <summary>X coordinate where the mouse was pressed. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.ydown">
            <summary>Y coordinate where the mouse was pressed. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.pickedRingAtom">
            <summary>The ringAtom that was picked or null if the canvas was picked. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.newAtom">
            <summary>The new atom that was created or null if we didn't create one yet. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.newBond">
            <summary>The bond that was created or null if we didn't make a bond. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.averageBondLength">
            <summary>The average bond length of the picked molecule. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.atomSnapTolerance">
            <summary> The tolerance that governs when we snap to an atom position.
            This should probably be the same value as the preference size
            for the atom highlight box.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.snapAngle">
            <summary>The snap angle for constraining which direction a bond can go. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.
            *
            Creates a ring bond tool.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.#ctor(MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Constructor which allows specification of the bond order.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.addBond(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Bond.BondTypeEnum,MDL.Draw.Chemistry.Bond.StereoBondTypeEnum)">
            <summary> Convenience method to add a bond with the appropriate bond
            order and bond stereo.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.initialiseEditing(System.Windows.Forms.MouseEventArgs)">
            <summary> Common initialisation for picking on the canvas and over a
            canvas object.
            *
            Resets all of the instance variables and records where the
            mouse down event occurred.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.setAverageBondLength">
            <summary> Set the average bond length and other editing variables.
            Rewrote to give default averageBondLength if no molecule defined.
            Sets:
            atomSnapTolerance and clickTolerance
            </summary>
            <author> jbo
            </author>
            <version> 4-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Ends undo block.
            </summary>
            <author> jbo
            </author>
            <version> 5-3-00
            
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingBondTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingBondTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
            <author> ymk
            </author>
            <version> 01-23-02
            
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingTool.minRingSize">
            <summary>The minimum and maximum ring sizes we will let the user generate. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingTool.lastRingSize">
            <summary>The last ring size that was generated. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingTool.ringSizeLabel">
            <summary>The text object that shows the ring size. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event over a canvas object.
            *
            This starts the process of dragging a new ring.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Dragging causes a ring to be pulled out of the current
            picked atom or bond.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouse up event.
            We make no distinction about mouse up over the canvas
            or a canvas object, so just make one call the other.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Pass the drawing onto the other mouseUp event handler.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.addRingSizeLabel(MDL.Draw.Rendering.MoleculeRenderer,MDL.Draw.Utils.Point3d,System.Int32)">
            <summary>Add a label to the drawing that shows the current ring size. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.RemoveRingSizeLabel">
            <summary>Blow away an old ring size label. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RingTool.RingAtomCount(System.Double,System.Double)">
            <summary> Given a distance from a point to the center of a bond
            figure out how many atoms would be needed to make a ring
            of that radius.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RingTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.Rotate3DTool">
            <summary>
            Rotate Fragments in 3D space. Follows ISIS/Draw's 3D rotation tool behavior
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.Rotate3DTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.RotateTool">
            <summary> RotateTool.java
            *
            Rotate a fragment or selection by left mouse button
            Flip a fragment or a selection vertically or horizontally by right mouse button.
            </summary>
            <summary>09-11-01	ymk	added call to super.init()
            08-29-01	ymk	created
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RotateTool.lasso">
            <summary>vector of the objects we selected in last mousedrag event  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.RotateTool.rotating">
            <summary>object that represents the rotating center  </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RotateTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RotateTool.KeyDown(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>*******  Change cursor during alt-key pressed  ********** </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RotateTool.isAllSelected(System.Collections.ArrayList)">
            <summary>**************** functions for rotation (left mouse click) **********************************
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.RotateTool.findConnectAtom(System.Collections.ArrayList)">
            <summary> When there is selection, find reasonable rotation point atom as in ISIS/DRAW.
            Return connected "unselected atom" if there is only one(case 1),
            Or return selected atom if this is only one which is connected to more than one "unselected atom"(case2)
            return null if there is no, or more than one of this kind of atom
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.SelectionTool">
            <summary>
            Summary description for EditorTool.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.SelectionTool.HandledObjectTypes">
            Gets array of handled object types that can be selected.
            @author jbo
            @version 02-28-00
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SeparatorTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool">
            <summary> SequenceLassoTool class
            This tool is to add selection ability into Sequence tool. 
            NOTE:It's a cut-down version of LassoTool.cs.
            Behavior:
            Click - selects atom/bond/sgroup/fragment(+ Ctrl key)
            Drag - moves fragment(+ Ctrl key)
            Shift Click - multiple selection on atom/bond/sgroup
            1.5 Change: We probably do not need to select atom/bond. 
            Withough ability to replace selected atoms with typing, selecting atoms could be misleading.
            Selecting bond is problematic when clicking "delete". It'll delete the bond instead of deleting sequence that comes after it.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.translateTool">
            <summary> Instance of translate tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.selectionTool">
            <summary> Instance of lasso implementation tool. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.currentTool">
            <summary> The current tool that has been selected by the mouse press event. </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.canvasObjectUnderMouse">
            <summary> The canvas object that was under the mouse when
            mousePressedEvent occurred (or null if the mouse was over the
            canvas).
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.objectUnderMouse">
            <summary>The chem object corresponding to the canvasObjectUnderMouse 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.isDragged">
            <summary>State where the mouse isn't being dragged.  </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> mouse pressed over object: sets selectionTool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 	mouse pressed over object:
            if atom or bond, then select (prepare to drag)
            if selected atom or bond -- nothing (prepare to drag)
            if fragment -- pass on to canvas
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.UnselectFragsChild(MDL.Draw.Rendering.Canvas,MDL.Draw.Chemistry.Fragment)">
            <summary> check through the selection and unselect the frag's children if any.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceLassoTool.ObjectExited(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.SequenceSupport.RestoreLeavingGroup(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Chemistry.AttachmentPointSgroup,MDL.Draw.Chemistry.Atom,MDL.Draw.Modules.Editor.EditorModule,MDL.Draw.Chemistry.Molecule,System.String,System.Double)">
            <summary>
            Restore leaving group from the give attachSgroup by using the template with the same name/class with the given seqSgroup.
            </summary>
            <param name="seqSgroup">Sequence abbreviation to restore leaving groups to.</param>
            <param name="attachSgroup">The free attachmentPointSgroup that we need to fill in leaving group into.</param>
            <param name="conAtom">AttachmentPoint atom of the attachSgroup.</param>
            <param name="editor">Current Editor</param>
            <param name="mol">Current Molecule</param>
            <param name="tempGroupName">Provide this if you want to search template in this template group only. Optional.</param>
            <param name="labelHeight">Provide label height.</param>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.CharCursor">
            <summary>
            Summary description for CharCursor. Only a temporary code.
            We might use transparent textbox control for this..
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.TempTextBox">
            <summary>
            This class is temporarily used as input textbox control for sequence tool.
            It includes CanvasText object and CanvasRectangle with blicking Cursor line.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.StructureHoverTool.AppendStructureToEditor(MDL.Draw.Chemistry.Molecule,MDL.Draw.Modules.Editor.EditorModule,System.Collections.ArrayList@,MDL.Draw.Utils.Point3d@)">
            <summary>
            grafts a molecule to another.
            </summary>
            <param name="mol">the molecule to append</param>
            <param name="editor">the editor to append molecule to</param>
            <param name="ooo">arraylist which will contains the objects thayt are appended to the editor.</param>
            <param name="center">center of the molecule</param>
            <returns>true if there was something to append, fasle otherwise.</returns>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.SingleBondTool">
            <summary> SingleBondTool.java
            *
            </summary>
            <author> mikeh
            </author>
            <version> 0.1
            
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.StereoChemTool.createNewStereoGroup">
            <summary> Create Stereogroup with given configuration and putiry.
            There are Absolute, Or, And groups.
            Each Absolute group can only have one stereo centers.
            </summary>
            <version> 	02-12-02
            </version>
            <author>  ymk
            </author>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.StereoChemTool.addAtomsToStereoGroup">
            <summary> Add selected Atoms to one of the existing stereo group(AND or OR type)</summary>
            <author> 	ymk
            </author>
            <version> 	07-30-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.StereoChemTool.RemoveStereoGroup">
            <summary> remove stereo group parents of selectedObjects</summary>
            <author> 	ymk
            </author>
            <version> 	04-06-01
            </version>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.StereoChemTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.StereoConfigTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.StereoFlagTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.SubTitleTool.toolObjectTypes">
            <summary>this array indicates all of the chemical types we want to 
            handle, only these will be highlighted for this tool
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateEditor.MakeAttachmentPointFirst(MDL.Draw.Chemistry.Molecule,MDL.Draw.Modules.Editor.EditorModule)">
            <summary> Moves first highlighted atom and bond to be the first atom and bond in 
            their respective vectors (so that when the molfile is written out, those
            atoms will be first).
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateEditor.SetAttachmentPointInAbbrev(MDL.Draw.Chemistry.Molecule,System.Int32)">
            <summary>
            If there are Abbreviation with SAP info, put attachment label on the attachment point atoms.
            Set AttachmentPoint to the atom in the SAP info  of given attachNum and the bond between the attachment point atom and the leaving group.
            NOTE:abbreviation with SAP info has "AttachmentPointSgroup" as child. 1st AttachPoint will corresponds to AttachmentPointSgroup with its
            LeavingGroupID 'A', 2nd with 'B' and so forth.
            </summary>
            <param name="mol">the molecule</param>
            <param name="attachNum"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TemplateSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSelector.GetNewTemplateName(System.String,System.String@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prompts the user for a new template name. The name will be used as the molname
            and as the root for the filename. If there is a file of the same name, an integer 
            will be added to the root until it is unique. e.g. myfile(0).mol.
            The molname (and therefore the root filename) will be limited to 80 characters.
            Characters that are not valid for filenames will be replaced by an underscore.
            </summary>
            <param name="sPath">Filesystem path that the filename will be written to</param>
            <param name="molName">name that will be written into the molfile header</param>
            <param name="isRxn"><c>true</c> if the template is a reaction</param>
            <param name="isSketch"><c>true</c> if the template is to be saved as a sketch file</param>
            <param name="showDialog">whether to show the dialog</param>
            <returns>a FileInfo object for writing the file. null if the user Cancelled.</returns>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.TemplateSelector.Handler">
            <summary>
            TemplateSelectorTool for this.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSelectorTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSelectorTool.Init">
            <summary> to add removing selection. (Some tool - lassoTool- doesn't wnat to do it.
            So can't write this in EditorTool)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSupport.GetFuseAtom(MDL.Draw.Chemistry.Molecule)">
            <summary> Get the fuse atom.
            NOTE:  New version.
            </summary>
            <author>  jbo
            </author>
            <version>  3-15-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSupport.getFuseBond(MDL.Draw.Chemistry.Molecule)">
            <summary> Return the fuse bond.
            NOTE:  New version.
            </summary>
            <author>  jbo
            </author>
            <version>  3-15-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSupport.CreateTemplateAtAtom(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom)">
            <summary> Creates a copy of templateMolecule aligned with the given atom.</summary>
            <param name="molecule">The canvas Molecule.
            </param>
            <param name="template">We will clone this molecule and add the clone to canvas mol.
            </param>
            <param name="tarGetAtom">The atom (in molecule) to add the template to
            </param>
            <author>  jbo
            </author>
            <version>  11-19-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSupport.AddTemplateToMolecule(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Molecule,System.Double,System.Double)">
            <summary> Add the template to the molecule at a point.
            NOTE:  Doesn't do fusion!!!
            </summary>
            <param name="molecule">The canvas Molecule.
            </param>
            <param name="template">We will add a clone of this molecule to the canvas.
            </param>
            <param name="px">The x-coordinate to move the template to.
            </param>
            <param name="py">The y-coordinate to move the template to.
            </param>
            <author>  jbo
            </author>
            <version>  11-19-99
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSupport.SproutTemplate(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,System.Collections.ArrayList)">
            <summary> Sprouts a template from a tarGetAtom WITHOUT DOING A FUSION.
            
            NOTE: This is a change from 11-16-99 version of code!
            To do fusion:
            Fragment frag = TemplateSupport.sproutTemplate(mol, template, at);
            Vector fragAtoms = frag.GetAtoms();
            mol.fuseMolecule(fragAtoms, -1.0, null);
            
            </summary>
            <returns> The template that gets added to the molecule.
            </returns>
            <author>  jbo
            </author>
            <version>  3-15-01
            </version>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TemplateSupport.AlignTemplateToPoints(MDL.Draw.Chemistry.Molecule,MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d)">
            <summary> Aligns the template so that the template origin atom aligns with the targetOrigin
            and template atom 2 rotates into target atom 2.  Then the molecule is translated to
            split the difference between the origin spacings and the atom 2 spacings.
            
            </summary>
            <author>  jbo
            </author>
            <version>  11-11-99
            </version>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.TextTool">
            <summary>
            Summary description for TextTool.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            constructor
            </summary>
            <param name="editor"></param>
            <param name="w"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.GetCurrentCanvasGraphicsSkText">
            Get current CanvasGraphicsSkText. 
            The assumption is that is is not null, that CurrentGraphicsText() exists etc.
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.RunBeforeAction(System.Object,System.EventArgs)">
            <summary>
            run before an action is performed.
            calls deleteghoststexts to ensure that for example saving to image will not include the bounding box of the empty texts
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.ObjectExited(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.DoFontCommand_SelectedObjects(MDL.Draw.Modules.Editor.EditorModule,System.String)">
            <summary>
            DP: handle font command on all selected text objects (with LassoTool active)
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TextTool.DoFontCommand_Single(MDL.Draw.Modules.Editor.EditorModule,System.String)">
            <summary>
            DP: handle font command on single text object (with TextTool active)
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool">
            <summary> TranslateObjectTool.java
            Provide controls for translating objects on the canvas.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.mousePressedEvent">
            <summary>The event that occurred when the mouse was pressed.  </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.lastMouseEvent">
            <summary>The last mouse event. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.FindGroupForFragment">
            <summary>
            if it's true, this tool will find group parent for fragment object and move it.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.chemGraphicsObject">
            <summary> The chemistry object that was a child of the canvas object.
            We have to remember this as the canvas object will be blown
            away when the chemistry object is changed.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.retVector">
            <summary>
            ArrayList of atoms to be used in FindNearestNonChildAtomWithin()
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.chemGraphicsObjects">
            <summary>
            vector of chemistry objects : the selection may contain more than one fragment.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>
            Mouse pressed on a canvas object
            </summary>
            <param name="e"></param>
            <param name="canvasObject"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.GetChemGraphicsObjectChild(MDL.Draw.Rendering.CanvasObject,System.Boolean,System.Boolean)">
            <summary> Return the first chemistry object child of this canvas object.
            NOTE:If the child has group parent with graphics child in it, return the group parent instead.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.DoSingleAtomDrag(MDL.Draw.Chemistry.ChemObject,System.Double,System.Double)">
            <summary>
            Helper function called by TranslatechemGraphicsObjects().
            Keeps the bond length constant for the case of a single atom drag when the shift key is pressed.
            The caller is responsible for making sure this is called only when there is a single atom selected.
            This function calls Atom.TranslateTo(), so do not cause a DOUBLE translation!
            </summary>
            <param name="chemGraphicsObject">the ChemObject</param>
            <param name="dx">the change in mouse position in x</param>
            <param name="dy">the change in mouse position in x</param>
            <returns>true if it handled the translation, false if not</returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.TranslateObjects(MDL.Draw.Rendering.CanvasObject,System.Double,System.Double)">
            <summary> Translate the actual chemistry objects that are children
            of this canvas object.
            The action of translating is a feature of the object.
            Many objects do nothing, instead asking their children to translate.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Tools.TranslateObjectTool.HandledObjectTypes">
            <summary>return that we want ALL object types highlighted
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Tools.ZoomTool">
            <summary>
            ZoomTool allows user to change the representation size of the molecule.
            This does not change the dimension of the molecule, only the way it look. ie it's differnet from a resize.
            Dragging the tool does a pan.
            right click shows a context menu.
            left click does zoom in. shift left click does zoom out.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ZoomAction.ZoomIn(System.Int32,System.Int32)">
            <summary>
            zoom in and preserved what was under the mouse under the mouse.
            </summary>
            <param name="sx">x coordinate of where the click happened</param>
            <param name="sy">y coordinate of where the click happened</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ZoomAction.ZoomOut(System.Int32,System.Int32)">
            <summary>
            zoom out and preserve what was under the mouse under the mouse.
            </summary>
            <param name="sx">x coordinate of where the click happened</param>
            <param name="sy">y coordinate of where the click happened</param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Gui.ArrowStyleMenu">
            <summary>
            Summary description for ArrowStyleMenu.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.ArrowStyleMenu.#ctor">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.ArrowStyleMenu.#ctor(MDL.Draw.ArrowStyleType[])">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.ArrowStyleMenu.#ctor(System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.ArrowStyleMenu.#ctor(MDL.Draw.ArrowStyleType[],System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.ArrowStyleMenu.AddKnownArrowStyles(MDL.Draw.ArrowStyleType[])">
            <summary>
            
            </summary>
            <param name="customArrowStyles"></param>
        </member>
        <member name="P:MDL.Draw.Gui.ArrowStyleMenu.ItemFont">
             get/set the font for menu. if not set, will use defualt system font for menu.
        </member>
        <member name="P:MDL.Draw.Gui.ArrowStyleMenu.KeepMenuHeight">
             Boolean indicator whther the drawing should keep the default 
             menu height oir not. If false ( the default value), the item height 
             will be determined by GetTextExtentPoint32 API.
        </member>
        <member name="T:MDL.Draw.Gui.ArrowStyleMenu.MR">
            <summary>
            arrow-renderer class
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Widget.component">
            <summary>This component is the instantiation for the object tag from XML file(dialog, action, button...) *
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.GetAttributeValue(System.String)">
            <summary> Find out value of XMLNode's attribute by the given XML tag name. 
            Returns empty string if the given attribute does not exist.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            <summary> The events sent from GUI components are processed here in their widgets.
            This method simply look for it's parent action or tool (which implements ICommandHandler)
            and sends the CommandEventArgs to it.
            </summary>
            <param name="ce">the CommandEventArgs that is to be processed 
            </param>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.FireCommandListeners(MDL.Draw.Modules.CommandEventArgs)">
            <summary>Notifies the command listeners of this command event
            </summary>
            <param name="ce">the command event
            
            </param>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.ActionPerformed(System.Object,System.EventArgs)">
            <summary> <b>For Internal Use Only</b>
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.IsUpdateable">
            <summary> Returns the object which was defined in the configuration XML file for this widget.(button, dialog, tool...)
            </summary>
            <returns>the widget's component object
            
            </returns>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.Update">
            <summary> <b>For Internal Use Only</b>
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.GetParentWidget(MDL.Draw.Modules.Widget)">
            <summary> It looks for this widget's parent widget
            Since they have tree structure in xml, it returns one parent widget
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Widget.GetAncestortWidgetOfType(MDL.Draw.Modules.Widget,System.Type)">
            <summary> It looks for this widget's ancestor widget with specified type of component (JDialog or JPanel).
            It crawls up the tree structure to find the specified type of widget ancestor
            and returns it. Returns null if it didn't find that type of ancestor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Gui.ComboBoxWidget.OTYPE">
            <summary>Combobox type </summary>
        </member>
        <member name="M:MDL.Draw.Gui.ComboBoxWidget.Update">
            <summary>override Widget's update() *</summary>
        </member>
        <member name="F:MDL.Draw.Gui.DialogWidget.OTYPE">
            <summary>Dialog type 
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.LayoutManager.myContainer_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when the control is moved (like moving the whole window if the control it's watching is the Frame)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Gui.LayoutManager.SetLayoutString(System.Windows.Forms.Control,System.String)">
            <summary>
            Takes the string from the XML that is a ';' delimited string
            To denote the properties of a control inside the layout manager
            </summary>
            <param name="c">The control to set the properties for</param>
            <param name="properties">The ';' delimited string that sets the properties</param>
        </member>
        <member name="T:MDL.Draw.Gui.FontSizeComboBox">
            <summary>
            Summary description for FontSizeComboBox.
            </summary>
        </member>
        <member name="F:MDL.Draw.Gui.FontSizeComboBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.FontSizeComboBox.GetCurText">
            implementation helper
        </member>
        <member name="M:MDL.Draw.Gui.FontSizeComboBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.FontSizeComboBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.GrayOutChildren.CommandPerformed(MDL.Draw.Modules.CommandEventArgs)">
            <summary> if sourceWidget's component is a AbstractButton and is "de-selected"
            then, find every child controls and disable them.(Gray them out)
            if sourceWidget's component is a AbstractButton and is "selected"
            then, find every child controls and enable them.
            </summary>
            <author>  ymk
            </author>
            <version>  01-30-02
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.InsertSymbolMenu.fireIconUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Gui.LineStyleMenu">
            <summary>
            Summary description for LineStyleMenu.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.LineStyleMenu.#ctor">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.LineStyleMenu.#ctor(System.Drawing.Drawing2D.DashStyle[])">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.LineStyleMenu.#ctor(System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.LineStyleMenu.#ctor(System.Drawing.Drawing2D.DashStyle[],System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="P:MDL.Draw.Gui.LineStyleMenu.KeepMenuHeight">
             Boolean indicator whther the drawing should keep the default 
             menu height oir not. If false ( the default value), the item height 
             will be determined by GetTextExtentPoint32 API.
        </member>
        <member name="T:MDL.Draw.Gui.LineThicknessMenu">
            <summary>
            Summary description for LineThicknessMenu.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.LineThicknessMenu.GetKnownLineThicknessFromUnitsValue(System.Byte)">
            <summary>
            returns enum value for thickenss value.
            if value does not match a thickness, return Empty.
            </summary>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Gui.LineThicknessMenu.#ctor">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.LineThicknessMenu.#ctor(MDL.Draw.Gui.LineThicknessMenu.KnownLineThickness[])">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.LineThicknessMenu.#ctor(System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.LineThicknessMenu.#ctor(MDL.Draw.Gui.LineThicknessMenu.KnownLineThickness[],System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="P:MDL.Draw.Gui.LineThicknessMenu.ItemFont">
             get/set the font for menu. if not set, will use defualt system font for menu.
        </member>
        <member name="P:MDL.Draw.Gui.LineThicknessMenu.TheAutoLineThickness">
             Gets or sets what the automatic LineThickness is.
            The default value is KnownLineThickness.threefourthpt;
        </member>
        <member name="P:MDL.Draw.Gui.LineThicknessMenu.KeepMenuHeight">
             Boolean indicator whther the drawing should keep the default 
             menu height oir not. If false ( the default value), the item height 
             will be determined by GetTextExtentPoint32 API.
        </member>
        <member name="T:MDL.Draw.Gui.ColorMenuItem">
            <summary> 
            Support menuitem class that can have choice of Back/Fore color and bold text.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.ColorMenuItem.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:MDL.Draw.Gui.ImageMenuItem">
            <summary> 
            Support menu items with images as well as text.
            </summary>
            Presumably direct support will be added in a future release of .Net
        </member>
        <member name="M:MDL.Draw.Gui.MoleculeButton.DoDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            toolbarbuttons do not handle drag and drop, it's done at the control level ie the toolbar.
            the tool bar accepts any drop and forwards it to the toolbarbutton under it.
            This one handles molecules and molfiles.
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="F:MDL.Draw.Gui.MoleculeButton.molecule">
            <summary>the molecule being rendered 
            </summary>
        </member>
        <member name="P:MDL.Draw.Gui.MoleculeButton.Molecule">
            <summary>	molecule being displayed by the ToolBarButton.
            </summary>								
        </member>
        <member name="F:MDL.Draw.Gui.MoleculeButton.ButtonState.Changed">
            <summary>true if new molecule has been double-clicked once to get a name but not saved
            </summary>
        </member>
        <member name="F:MDL.Draw.Gui.MoleculeButton.ButtonState.BrandNew">
            <summary>true if new molecule has been dragged onto button but the molecule hasn't been persisted
            </summary>
        </member>
        <member name="T:MDL.Draw.Gui.VariableComponents">
            <summary> This Class is for components marked as 'variable="true"' from XML configuration
            On the run time, we can add as many as controls of the same type (probably with different text and command)
            and remove them later. It can be used when we want to configure the dialog based on the current editor status.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.VariableComponents.RemoveComponentsControls">
            <summary> removes current controls from swing container
            Usage example from tool level: 
            removeComponentsControls();
            addComponentControl(text);
            where text is the string we want to replace '#' with.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.VariableComponents.AddComponentControl(System.String)">
            <summary> add new controls to swing container based on the type specified from XML configuration
            Usage example from tool level: 
            removeComponentsControls();
            addComponentControl(text);
            where text is the string we want to replace '#' with.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.VariableComponents.ChangeText(System.String)">
            <summary> It changed the text of controls. (replace '#' with argument string)</summary>
        </member>
        <member name="M:MDL.Draw.Gui.VariableComponents.SetText(System.String)">
            <summary> It sets the text of controls. (replace '#' with argument string). If more than one control, remove them all and then add one else change text</summary>
        </member>
        <member name="M:MDL.Draw.Gui.VariableComponents.InitLabel(System.Windows.Forms.Label)">
            <summary> Assumes that the given widget is a Label object and initiate it..
            
            </summary>
            <author>  jbo
            </author>
            <version>  10-21-99
            </version>
        </member>
        <member name="T:MDL.Draw.Gui.XMLControls">
            <summary> Utility class for reading and interpreting XML configuration files
            and turning them into widgets (controls) and trees of widgets.
            *
            Can interpret the following widgets:
            menustrip, TOOLBAR, PALETTES_LIST, ACTION, LABEL, MENU, SEPARATOR, 
            *
            NOTE:  Methods currently require editor as an argument.  Need to 
            go back and fix this to make the class more general.
            *
            </summary>
            <author> jbo
            
            </author>
        </member>
        <member name="F:MDL.Draw.Gui.XMLControls.dataSgroupTool">
            <summary>cache for multi Tools *
            </summary>
        </member>
        <member name="F:MDL.Draw.Gui.XMLControls.editorActions">
            <summary>cache for Action Listeners *
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.CreateWidgetTreeImpl(System.Xml.XmlDocument)">
            <summary>Create tree of Widgets that as associated "XMLNode" from given XMLDocument(Tree of XMLNodes).
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.MergeIncludes(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            recursive method to merge the "included" objects.
            </summary>
            <param name="doc">xmldocument</param>
            <param name="root">current node. initial call uses same object for doc and node</param>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.CreateWidgetTreeImpl(System.Xml.XmlNode,MDL.Draw.Modules.Widget)">
            <summary>Create tree of Widgets that as associated "XMLNode" from given XMLNode (SubTree of XMLNodes).
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.CreateWidget(System.Xml.XmlNode,MDL.Draw.Modules.Widget)">
            <summary> Create a widget instance that has given XMLNode stored.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitWidgetTree(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Processes the Widget tree and creates the Components and controls in each
            Widget object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitWidgetComponent(MDL.Draw.Modules.Widget@,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Initializes the Widget (adds JComponent to it) and adds it to its parent
            Widget object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitMenuBar(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is for Menubar object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitMenuStrip(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is for Menubar object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.PostInitPaletteButton(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary>
            run after all toolbar buttons have been initialized.
            </summary>
            <param name="widget">widget for the component</param>
            <param name="ed">instance of the editor</param>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitMenu(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a Menu object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitMenuStripItem(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a Menu object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitLabel(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a Label object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitButton(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a Button object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.StyleToFont(MDL.Draw.Modules.Widget)">
            <summary>
            convert Widget style value into font object.
            </summary>
            <param name="widget">Converted widget</param>
            <returns>a font object or null if no valid style tag.</returns>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.AddComponentToParent(MDL.Draw.Modules.Widget,System.ComponentModel.Component)">
            <summary> Common method to add JComponent(label, button, checkbox, combobox, textbox) to its parent 
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitRadioGroup(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a RadioGroup object and initiate it..
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitRadioButton(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a RADIOBUTTON object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitPanel(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a Panel object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitPaletteButton(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a PALETTEButton object and initiate it.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitEditorAction(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a Action object and initiate it.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitTool(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule,System.Boolean)">
            <summary>
            Assumes that the given widget is a Tool object and initiate it.
            </summary>
            <param name="widget"></param>
            <param name="editor"></param>
            <param name="isMultiTool"></param>
            <returns>false if tool was required and failed to load, true otherwise</returns>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitDialog(MDL.Draw.Gui.DialogWidget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a Dialog object and initiate it.
            
            </summary>
            <author> ymk
            </author>
            <version> 01-29-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitMenuItem(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a menuitem object and initiate it.
            
            </summary>
            <author> ymk
            </author>
            <version> 04-25-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitCheckBox(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a CheckBox object and initiate it.
            
            </summary>
            <author> ymk
            </author>
            <version> 04-25-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitCustomComboBox(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Assumes that the given widget is a Combobox object and initiate it.
            in the widget parameters: 
            values: a pipe separated list of options for the combobox.
            persistencykey: name of key in registry that will contain one of the values in values to persist between sessions.
            default: one of the values in values that the combobox is set to if persistencykey is not present.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitComboBox(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule,System.Boolean)">
            <summary> Assumes that the given widget is a ComboBox object and initiate it.
            
            </summary>
            <author> ymk
            </author>
            <version> 01-31-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitSelection(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a Selection object and initiate it.
            
            </summary>
            <author> ymk
            </author>
            <version> 01-31-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitTextBox(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a textbox object and initiate it..
            
            </summary>
            <author> ymk
            </author>
            <version> 02-06-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitWidget(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Editor.GenericEditorModule)">
            <summary> Called from each initXXX() method to do a common task to all widget
            
            </summary>
            <author> ymk
            </author>
            <version> 01-30-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.InitSpace(MDL.Draw.Modules.Widget)">
            <summary> Assumes that the given widget is a Space object and initiate it.
            What it does is, it puts the horizontal glue inside its parent panel
            </summary>
            <author> ymk
            </author>
            <version> 02-15-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.AddToPanel(MDL.Draw.Modules.Widget,MDL.Draw.Modules.Widget,System.Windows.Forms.Control,System.Windows.Forms.Panel)">
            
            <summary> This is used when a JComponent is added to Panel
            Default alignment within Panel is "left"
            It'll align "right" and "center" specified for the Panel
            </summary>
            <author> ymk
            </author>
            <version> 02-05-02
            
            </version>
        </member>
        <member name="M:MDL.Draw.Gui.XMLControls.LoadImage(System.String)">
            <summary> Load an image from a resource "MDL.Draw.Editor.images" 
             in the currently executing Assembly.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.CommandEventArgs.Command">
            <summary>Sets the command associated with the event.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.CommandEventArgs.Value">
            <summary>Sets the value associated with the event.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.CommandEventArgs.Widget">
            <summary>Sets the widget that the command originated on.
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IXmlNodeHolder">
            <summary>
            Interface that contains an Xml Node.
            When an ITool or IAction implements this interface, the Node is set to the Xml node of this object in the Add-in XML configuration file.
            The XML node holder can be used while the IAction or ITool is initialized to parse configuration parameters. 
            For example, a Cheshire script can be used as a parameter to an action.
            </summary>
        </member>
        <member name="P:MDL.Draw.Interfaces.IXmlNodeHolder.Node">
            <summary>
            the node
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IAction">
            <summary>
            Implement this interface to create functionality for an Add-in action.    
            Note: The end-user triggers an Add-in action by clicking a menu item. 
            (To provide the end-user with Add-in functionality on the vertical toolbar, see <see cref="T:MDL.Draw.Interfaces.ITool"/>.)
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IAction.Init(MDL.Draw.Interfaces.IEditor)">
            <summary>
            Allows the Add-in to perform initialization.
            Symyx Draw provides a handle to the Editor Control which
            can be retained for later use.</summary>
            <param name="editor">handle to the Editor Control</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            Symyx Draw invokes this method so that the Add-in 
            will perform its action. To find the current object, use 
            the <see cref="P:MDL.Draw.Interfaces.IEditor.SelectionAsMolfileString"/> property.
            Modifications to the current structure in this method are implicitly Undoable.
            </summary>
            <param name="sender">Menu item that the end-user clicked on 
            to cause the event</param>
            <param name="e">Event that launched the Add-in action
            (the end-user clicking the menu item for the 
            Add-in action)</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IAction.ItemShown(System.Windows.Forms.MenuItem)">
            <summary>
            Provides access to the .NET 
            System.Windows.Forms.<see cref="T:System.Windows.Forms.ToolStripMenuItem"/> class. 
            When the menu item is shwon, this method is run.
            For example, to disable the menu item for an Add-In action: 
            <c>MyMenuItem.Enabled = False</c>
            </summary>
            <param name="menuItem">Menu item to be affected</param>
        </member>
        <member name="T:MDL.Draw.Interfaces.IAction2">
            <summary>
            Obsolete: use IAction instead of IAction2.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.IAction2.Init(MDL.Draw.Interfaces.IEditor)">
            <summary>
            Obsolete: use IAction instead of IAction2.
            </summary>
            <param name="editor">handle to the Editor Control</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IAction2.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            Obsolete: use IAction instead of IAction2.
            </summary>
            <param name="sender">Menu item that the end-user clicked on 
            to cause the event</param>
            <param name="e">Event that launched the Add-in action
            (the end-user clicking the menu item for the 
            Add-in action)</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.IAction2.ItemShown(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Obsolete: use IAction instead of IAction2.
            </summary>
            <param name="menuItem">Menu item to be affected</param>
        </member>
        <member name="T:MDL.Draw.Interfaces.ITool">
            <summary>
            Implement this interface to create functionality for an Add-in tool.    
            Note: The end-user triggers an Add-in tool by clicking a tool in the 
            Symyx Draw vertical toolbar. 
            (To provide the end-user with menu-driven actions, see <see cref="T:MDL.Draw.Interfaces.IAction"/>.)
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.ITool.Init(MDL.Draw.Interfaces.IEditor)">
            <summary>
            Allows the Add-in to perform initialization.
            Symyx Draw provides a handle to the Editor Control.
            This can be retained for later use.  
            </summary>
            <param name="editor">handle to the Editor Control</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.ITool.ToolInvoked(MDL.Draw.Interfaces.IChemObject,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Symyx Draw invokes this method so that the Add-in tool 
            can perform its operation on the indicated <see cref="T:MDL.Draw.Interfaces.IChemObject"/>.
            Modifications to the current structure in this method are implicitly Undoable.
            </summary>
            <param name="chemObject">the selected <see cref="T:MDL.Draw.Interfaces.IChemObject"/>, or
            <c>null</c> if no chemical object was selected</param>
            <param name="eventArgs">the .NET message about the end-user's mouse click</param>
        </member>
        <member name="M:MDL.Draw.Interfaces.ITool.ToolSelected">
            <summary>
            Indicates that the end-user has selected your Add-in tool. 
            If your application has its own Form, you can display it when the user
            selects the Add-in tool.
            To make this operation undoable, enclosed it between 
            <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.
            </summary>
        </member>
        <member name="M:MDL.Draw.Interfaces.ITool.ToolUnselected">
            <summary>
            Indicates that the end-user has unselected your Add-in tool. 
            If your application has its own Form, you can hide it when the user
            unselects the Add-in tool.
            To make this operation undoable, enclosed it between 
            <see cref="M:MDL.Draw.Interfaces.IEditor.BeginUndoBlock(System.String)"/> and <see cref="M:MDL.Draw.Interfaces.IEditor.EndUndoBlock"/>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Interfaces.ITool.Targets">
            <summary>
            Array of interfaces for the chemical object 
            types, such as <see cref="T:MDL.Draw.Interfaces.IAtom"/>, <see cref="T:MDL.Draw.Interfaces.IBond"/>, <see cref="T:MDL.Draw.Interfaces.ISgroup"/>, 
            and <see cref="T:MDL.Draw.Interfaces.IMolecule"/>. 
            This array indicates which kinds of end-user selections are valid 
            input to the Add-in tool. See <see cref="T:MDL.Draw.Interfaces.IChemObject"/>.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.NamespaceDoc">
            <summary>
            Namespace for MDL.Draw.Editor, which is not directly exposed but required for compilation.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.ISketch">
            <summary>
            The ISketch interface
            </summary>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateFragment(MDL.Draw.Chemistry.Fragment,System.Drawing.PointF)">
            <summary>
            Creates a fragment.
            </summary>
            <param name="theFragment">the fragment to create</param>
            <param name="origin">the point of origin for the fragment</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateReactionArrow(System.Drawing.PointF,System.Drawing.PointF,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a reaction arrow.
            </summary>
            <param name="first">first point for arrow</param>
            <param name="second">end point for arrow</param>
            <param name="arrowDirType">direction of arrow</param>
            <param name="arrowStyleType">style of arrow</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a reaction arrow</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateReactionPlus(System.Drawing.PointF)">
            <summary>
            Creates the "+" sign for a reaction
            </summary>
            <param name="location">location</param>
            <returns>the plus sign</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsRectangle(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a rectangle
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="foregroundColor">color</param>
            <param name="backgroundColor">background color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a rectangle</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsEllipse(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an ellipse
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="foregroundColor">color</param>
            <param name="backgroundColor">background color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>an ellipse</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsRoundedRectangle(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a rectangle with rounded edges
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="curvature">curvature</param>
            <param name="foregroundColor">color</param>
            <param name="backgroundColor">background color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a rounded rectangle</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsLine(System.Drawing.PointF,System.Drawing.PointF,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a line
            </summary>
            <param name="first">first point of line</param>
            <param name="second">end point of line</param>
            <param name="arrowDirType">direction of arrow</param>
            <param name="arrowStyleType">style of arrow</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a line</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsArc(System.Drawing.PointF,System.Drawing.SizeF,System.Single,System.Single,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an arc
            </summary>
            <param name="origin">origin of arc</param>
            <param name="size">size</param>
            <param name="startAngleInRadians">start angle in radians</param>
            <param name="endAngleInRadians">end angle in radians</param>
            <param name="arrowDirType">direction of arc</param>
            <param name="arrowStyleType">style of arc</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>an arc</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsCircularArc(System.Drawing.PointF,System.Single,System.Single,System.Single,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a circlular arc
            </summary>
            <param name="origin">origin of arc</param>
            <param name="size">size</param>
            <param name="startAngleInRadians">start angle in radians</param>
            <param name="endAngleInRadians">end angle in radians</param>
            <param name="arrowDirType">direction of arc</param>
            <param name="arrowStyleType">style of arc</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a circular arc</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsBracketRectangle(System.Drawing.PointF[],System.Double,System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a rectangle with bracket style
            </summary>
            <param name="points">array of points</param>
            <param name="armLength">length of bracket arm</param>
            <param name="color">color</param>
            <param name="curved"><c>true</c> if curved</param>
            <returns>a bracket rectangle</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.CreateGraphicsSketchText(System.Drawing.RectangleF,System.String,System.Drawing.Color,System.Drawing.Color,System.Boolean,MDL.Draw.Chemistry.TextAlignType,System.Boolean,System.Boolean)">
            <summary>
            Creates text for the sketch
            </summary>
            <param name="rect">rectangle that contains the text</param>
            <param name="rtfText">string of text</param>
            <param name="foregroundColor">color of text</param>
            <param name="backgroundColor">background color</param>
            <param name="autoWrapAllowed"><c>true</c> if text is automatically wrapped inside rectangle</param>
            <param name="text_align">type of text alignment</param>
            <param name="formula_mode">formula mode, such as CH2 with the 2 in subscript</param>
            <param name="transparent"><c>true</c> if text is transparent</param>
            <returns>text for the sketch</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.AddToContents(MDL.Draw.SketchAPI.ISketchContent)">
            <summary>
            Adds the specified content to the sketch.
            </summary>
            <param name="toAdd">The sketch content to add to the sketch</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.RemoveFromContents(MDL.Draw.SketchAPI.ISketchContent)">
            <summary>
            Removes the specified content from the sketch.
            </summary>
            <param name="toRemove">The sketch content to remove from the sketch</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.GetContentsOfType(System.String)">
            <summary>
            Gets contents of the specified, editable type: 
            <see cref="T:MDL.Draw.SketchAPI.IFragment"/>, <see cref="T:MDL.Draw.SketchAPI.IReactionArrow"/>, <see cref="T:MDL.Draw.SketchAPI.IReactionPlus"/>, <see cref="T:MDL.Draw.SketchAPI.IGraphicsRectangle"/>, 
            <see cref="T:MDL.Draw.SketchAPI.IGraphicsEllipse"/>, <see cref="T:MDL.Draw.SketchAPI.IGraphicsRoundedRectangle"/>, <see cref="T:MDL.Draw.SketchAPI.IGraphicsLine"/>, <see cref="T:MDL.Draw.SketchAPI.IGraphicsArc"/>, 
            <see cref="T:MDL.Draw.SketchAPI.IGraphicsCircularArc"/>, <see cref="T:MDL.Draw.SketchAPI.IGraphicsBracketRectangle"/>, <see cref="T:MDL.Draw.SketchAPI.IGraphicsSketchText"/>. 
            </summary>
            <param name="theTypeString">the type of contents to get</param>
            <returns>a collection that contains the contents of the specified type</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.IsReaction">
            <summary>
            Indicates whether the sketch is a reaction.
            </summary>
            <returns><c>true</c> if the sketch is a reaction</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.IsEmpty">
            <summary>
            Indicates whether the sketch is empty.
            </summary>
            <returns><c>true</c> if the sketch is empty</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.IsNoStructure">
            <summary>
            Indicates whether the sketch is a no-structure.
            </summary>
            <returns><c>true</c> if the sketch is a no-structure</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.HasSketchContents">
            <summary>
            Indicates whether the sketch has contents.
            </summary>
            <returns><c>true</c> if the sketch has contents</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.ISketch.GetContentsAsStream(System.String)">
            <summary>
            Gets the contents of a sketch as a stream.
            </summary>
            <param name="format">the format of the contents</param>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ISketch.PageRectangle">
            <summary>
            The rectangle of the page.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ISketch.PageSize">
            <summary>
            The size of the page, that is, the width and height of the page rectangle.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ISketch.Contents">
            <summary>
            Gets the contents  of the sketch.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.ISketchContent">
            <summary>
            Interface for the content of a sketch
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ISketchContent.Sketch">
            <summary>
            The sketch to get
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ISketchContent.Origin">
            <summary>
            The point of origin to get or set
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ISketchContent.ObjectRectangle">
            <summary>
            The object rectangle to get
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.ILineContent">
            <summary>
            Interface for a line on a sketch
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ILineContent.Start">
            <summary>
            the start point of the line
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ILineContent.End">
            <summary>
            the end point of the line
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ILineContent.ArrowDir">
            <summary>
            The type of arrow
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ILineContent.ArrowStyle">
            <summary>
            the style of the arrow
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ILineContent.PenColor">
            <summary>
            the color of the line
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.ILineContent.PenWidth">
            <summary>
            the width of the line
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IFragment">
            <summary>
            Interface for a fragment on a Sketch
            </summary>
        </member>
        <member name="M:MDL.Draw.SketchAPI.IFragment.IsReactant">
            <summary>
            Indicates whether this fragment is a reactant.
            </summary>
            <returns><c>true</c> if this fragment is a reactant</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.IFragment.IsProduct">
            <summary>
            Indicates whether this fragment is a product.
            </summary>
            <returns><c>true</c> if this fragment is a product</returns>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IFragment.ChimeString">
            <summary>
            Gets the chimestring for the fragment.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IReactionArrow">
            <summary>
            Interface for a reaction arrow on a sketch.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IReactionPlus">
            <summary>
            Interface for a plus sign (+) on a sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IReactionPlus.FontSizeInDecipoints">
            <summary>
            the font size of the plus sign in units of one tenth of a point.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsRectangle">
            <summary>
            Interface for a graphical shape, rectangle, on a sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsRectangle.BackgroundColor">
            <summary>
            the background color
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsRectangle.ForegroundColor">
            <summary>
            the foreground color
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsRectangle.PenWidth">
            <summary>
            the line width
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsEllipse">
            <summary>
            Interface for a graphical shape, an ellipse, on a sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsEllipse.BackgroundColor">
            <summary>
            background color
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsEllipse.ForegroundColor">
            <summary>
            the color of the shape
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsEllipse.PenWidth">
            <summary>
            width of the line of the shape
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsRoundedRectangle">
            <summary>
            Interface for a graphical shape, a rounded rectangle, on a sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsRoundedRectangle.BackgroundColor">
            <summary>
            background color
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsRoundedRectangle.ForegroundColor">
            <summary>
            the color of the shape
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsRoundedRectangle.PenWidth">
            <summary>
            width of the line of the shape
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsLine">
            <summary>
            Interface to a graphical object, a line, on a sketch
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsArc">
            <summary>
            Interface of a graphical shape, an arc, on a sketch.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsCircularArc">
            <summary>
            Interface of a graphical shape, a circular arc, on a sketch.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsBracketRectangle">
            <summary>
            Interface of a graphical shape, a bracket rectangle, on a sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsBracketRectangle.PenColor">
            <summary>
            the color
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsBracketRectangle.PenWidth">
            <summary>
            width of the line
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsBracketRectangle.PenStyle">
            <summary>
            the style
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsBracketRectangle.ArmsLength">
            <summary>
            length of the bracket arms
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsBracketRectangle.Curved">
            <summary>
            whether the bracket is a curved bracket, that is, parentheses ( )
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.IGraphicsSketchText">
            <summary>
            Interface for the text to be displayed on the sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.Text">
            <summary>
            The text to display on the sketch.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.ForegroundColor">
            <summary>
            The color of the text.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.BackgroundColor">
            <summary>
            The color of the background.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.AutowrapAllowed">
            <summary>
            Whether the text automatically wraps.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.TextAlign">
            <summary>
            The type of text alignment: Empty, Center, Left, or Right.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.FormulaMode">
            <summary>
            <c>true</c> if the text is in formula mode, with numbers in subscript, such as CH2 with the 2 in subscript.
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.IGraphicsSketchText.Transparent">
            <summary>
            <c>true</c> if the text is transparent.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.NamespaceDoc">
            <summary>
            Contains the SketchAPI class, which allows applications developers to place individual fragments and 
            sketch components on a sketch.
            </summary>
        </member>
        <member name="T:MDL.Draw.SketchAPI.APISketch">
            <summary>This class allows applications developers to place individual fragments and sketch components on a sketch.</summary> 
            <remarks>
            The sketch by default has a usable area of 6120 by 7920 sketch units (8.5 by 11 inches) in portrait.
            <para>Each of the other objects represented by an interface in the MDL.Draw.SketchAPI namespace can be created and then added to the <c>ISketch</c>. 
            It is also possible to ask the <c>ISketch</c> for an <c>ICollection</c> of the objects in it and then manipulate these objects. 
            This allows you to manipulate the object both before and after insertion into the <c>ISketch</c>.</para>
            </remarks>
            <example>For example, to add a new line to a sketch, you would do something like:
            <code>
            IGraphicsLine gl1 = theSketch.CreateGraphicsLine(
               new PointF(0, 0), 
               new PointF(1440, 1440), 
               ArrowDirType.AtFirst, ArrowStyleType.FilledTriangle,
               Color.Blue, 2);  
             </code>
            This would create a line with a filled triangle arrowhead from 0,0 to 1440,1440 in blue with the pen width of 2 points.
            </example>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.#ctor">
            <summary>
            Constructor for a sketch
            </summary>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructor using Stream and a string to indicate the format: "mol", "rxn", "smi", "skc", or "chime".
            </summary>
            <param name="theStream">the Stream to be read</param>
            <param name="formatHint">"mol", "rxn", "smi", "skc", or "chime"</param>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.#ctor(MDL.Draw.Chemistry.Molecule)">
            <summary>
            Constructor that takes a Molecule object to represent the structure.
            </summary>
            <param name="theMol">the structure</param>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateFragment(MDL.Draw.Chemistry.Fragment,System.Drawing.PointF)">
            <summary>
            Creates an <see>IFragment</see>.
            </summary>
            <param name="toAdd">the fragment to add</param>
            <param name="origin">the point of origin</param>
            <returns>an IFragment object</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateReactionArrow(System.Drawing.PointF,System.Drawing.PointF,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an <see>IReactionArrow</see>.
            </summary>
            <param name="first">first point</param>
            <param name="second">second point</param>
            <param name="arrowDirType">direction of the arrow</param>
            <param name="arrowStyleType">style of arrow</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a reaction arrow</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateReactionPlus(System.Drawing.PointF)">
            <summary>
            Creates an <see>IReactionPlus</see>.
            </summary>
            <param name="location">location for the plus sign</param>
            <returns>a handle for a reaction plus sign</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsRectangle(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an <see>IGraphicsRectangle</see>.
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="foregroundColor">foreground color</param>
            <param name="backgroundColor">background color</param>
            <param name="lineThicknessInPoints">thickness in points</param>
            <returns>a handle for the reactangle</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsEllipse(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an <see>IGraphicsEllipse</see>.
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="foregroundColor">foreground color</param>
            <param name="backgroundColor">background color</param>
            <param name="lineThicknessInPoints">thickness in points</param>
            <returns>an ellipse</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsRoundedRectangle(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an <see>IGraphicsRoundedRectangle</see>.
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="curvature">curvature</param>
            <param name="foregroundColor">foreground color</param>
            <param name="backgroundColor">background color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a rectangle with rounded edges</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsLine(System.Drawing.PointF,System.Drawing.PointF,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Creates an <see>IGraphicsLine</see>.
            </summary>
            <param name="first">first point of the line</param>
            <param name="second">end point of the line</param>
            <param name="arrowDirType">direction of the arrow</param>
            <param name="arrowStyleType">style of the arrow</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">thickness in points</param>
            <returns>a line</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsArc(System.Drawing.PointF,System.Drawing.SizeF,System.Single,System.Single,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Returns an arc
            </summary>
            <param name="origin">origin</param>
            <param name="size">size</param>
            <param name="startAngleInRadians">start angle in radians</param>
            <param name="endAngleInRadians">end angle in radians</param>
            <param name="arrowDirType">arrow direction</param>
            <param name="arrowStyleType">arrow style</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>an arc</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsCircularArc(System.Drawing.PointF,System.Single,System.Single,System.Single,MDL.Draw.ArrowDirType,MDL.Draw.ArrowStyleType,System.Drawing.Color,System.Int32)">
            <summary>
            Returns a circular arc
            </summary>
            <param name="origin">origin</param>
            <param name="radius">radius</param>
            <param name="startAngleInRadians">start angle in radians</param>
            <param name="endAngleInRadians">end angle in radians</param>
            <param name="arrowDirType">arrow direction</param>
            <param name="arrowStyleType">arrow style</param>
            <param name="color">color</param>
            <param name="lineThicknessInPoints">line thickness in points</param>
            <returns>a circular arc</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsBracketRectangle(System.Drawing.PointF[],System.Double,System.Drawing.Color,System.Boolean)">
            <summary>
            Returns a bracket-style rectangle
            </summary>
            <param name="points">array of points</param>
            <param name="armLength">length of bracket arm</param>
            <param name="color">color</param>
            <param name="curved">curved or not</param>
            <returns>a bracket-style rectangle</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.CreateGraphicsSketchText(System.Drawing.RectangleF,System.String,System.Drawing.Color,System.Drawing.Color,System.Boolean,MDL.Draw.Chemistry.TextAlignType,System.Boolean,System.Boolean)">
            <summary>
            Displays the specified text on the sketch
            </summary>
            <param name="rect">rectangular area to contain the text</param>
            <param name="rtfText">the text string to display</param>
            <param name="foregroundColor">foreground color</param>
            <param name="backgroundColor">background color</param>
            <param name="autoWrapAllowed">whether to wrap text</param>
            <param name="text_align">type of alignment for the text</param>
            <param name="formula_mode">formula mode</param>
            <param name="transparent">whether the rectangular text container is transparent</param>
            <returns>a handle to the text in a rectangle</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.AddToContents(MDL.Draw.SketchAPI.ISketchContent)">
            <summary>
            Adds the specified content to the sketch.
            </summary>
            <param name="toAdd">the sketch content to add to the sketch</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.RemoveFromContents(MDL.Draw.SketchAPI.ISketchContent)">
            <summary>
            Removes the specified content from the sketch. 
            Whatever you had added returns an object you can remove. 
            Or you can get the contents, examine them and remove selectively.
            </summary>
            <param name="toRemove">the content to remove from the sketch</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.GetContentsOfType(System.String)">
            <summary>
            Gets contents of the specified type
            </summary>
            <param name="theTypeString">the type of contents to get</param>
            <returns>a handle to the collection of contents of that type</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.IsReaction">
            <summary>
            Indicates whether the sketch molecule is a reaction
            </summary>
            <returns>true if reaction</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.IsEmpty">
            <summary>
            Indicates whether the sketch molecule is empty
            </summary>
            <returns>true if the sketch molecule is empty</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.IsNoStructure">
            <summary>
            Indicates whether the sketch molecule is a no-structure
            </summary>
            <returns>true if the sketch molecule is a non-structure</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.HasSketchContents">
            <summary>
            Indicates whether the sketch molecule has any contents
            </summary>
            <returns>true if the sketch molecule has any contents</returns>
        </member>
        <member name="M:MDL.Draw.SketchAPI.APISketch.GetContentsAsStream(System.String)">
            <summary>
            Gets the contents of the sketch as a Stream
            </summary>
            <param name="theFormat">the format, such as chime, mol, smi, skc</param>
            <returns>a Stream for the contents</returns>
        </member>
        <member name="P:MDL.Draw.SketchAPI.APISketch.PageRectangle">
            <summary>
            Gets the page rectangle (read-only)
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.APISketch.PageSize">
            <summary>
            Gets and sets the page size
            </summary>
        </member>
        <member name="P:MDL.Draw.SketchAPI.APISketch.Contents">
            <summary>
            Returns the Contents of the sketch
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.ExtendableRenditor.EditExtension">
            <summary>
            User can set EditExtension to replace the default Editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renditor.IRenditorEditExtension">
            <summary>
            This interface allows a class implementor to extend the ExtensibleRenditor
            with new Edit behaviors, e.g. use an alternate component to edit structures.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.IRenditorEditExtension.ClearEditCompleteEvent">
            <summary>
            This event will clear all subscriptions to the EditComplete event.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.IRenditorEditExtension.TransferEdits">
            <summary>
            Causes the edit to be completed and all edits to the structure(s) will be transferred.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.IRenditorEditExtension.StartEditor">
            <summary>
            Causes the editor to start editing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renditor.IRenditorEditExtension.CancelEdits">
            <summary>
            Causes the edit to be cancelled; all edits to the structure(s) will be lost.
            </summary>
        </member>
        <member name="E:MDL.Draw.Renditor.IRenditorEditExtension.EditComplete">
            <summary>
            This event is raised when the edit operation is complete.
            </summary>
        </member>
        <member name="E:MDL.Draw.Renditor.IRenditorEditExtension.EditStarted">
            <summary>
            This event is raised when the edit operation is started.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renditor.IRenditorEditExtension.Molfile">
            <summary>
            Gets or sets the molfile data used during the edit.
            </summary>
            <value>The molfile.</value>
        </member>
        <member name="P:MDL.Draw.Renditor.IRenditorEditExtension.EditCompleteStatus">
            <summary>
            Gets the edit complete status.
            </summary>
            <value>The edit complete status.</value>
        </member>
        <member name="T:MDL.Draw.Renditor.EditExtensionCompleteStatus">
            <summary>
            The status of the extension on completion of the edit.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.EditExtensionCompleteStatus.Empty">
            <summary>
            Unknown status.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.EditExtensionCompleteStatus.Cancelled">
            <summary>
            The user cancelled the edit.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renditor.EditExtensionCompleteStatus.Transferred">
            <summary>
            The user transferred the data.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.ReconfigureAction">
            <summary> Cause a new molecule to replace the currently edited molecule
            This can be undone as opposed to NewMolecule Action which offers to save 
            and then creates a new molecule with a new name. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ReconfigureAction.#ctor(MDL.Draw.Modules.Editor.GenericEditorModule,MDL.Draw.Modules.Widget)">
            <summary>
            
            </summary>
            <param name="editor"></param>
            <param name="w"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.ReconfigureAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Actions.ReconfigureAction.MenuItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotAction.MoleculeRendererAfterContentsUpdate(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotAction.MdlDrawSelectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotAction.GetNemaKey(System.String)">
            <summary>
            calculates the a NemaKey from the molfile input parameter
            </summary>
            <param name="molfileString"></param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotSetupDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotSetupDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.PipelinePilot.PipelinePilotSetupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Actions.AllPurposeDrawingToolChainStyleAction">
            <summary>
            action for toggling the visibility of the formatting toolbar.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.AllPurposeDrawingToolChainStyleAction.ActionPerformed(System.Object,System.EventArgs)">
            <summary>
            toggle ruler visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.AllPurposeDrawingToolChainStyleAction.MenuPopup(System.Object,System.EventArgs)">
            <summary>
            sets check mark depending on current visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.ChainEditDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ChainEditDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.ChainEditDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.DiscoveryStudioMissingDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.DiscoveryStudioMissingDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.DiscoveryStudioMissingDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Actions.frmAsk3D.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.frmAsk3D.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Actions.frmAsk3D.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.MultiEndAtomDialog">
            <summary>
            Simple resizable dialog for displaying a message to the user on the center of the parent form
            Button Options are as follows: 0 == OK + Cancel, 1 == OK Only, 2 == Yes + No
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MultiEndAtomDialog.#ctor(System.Windows.Forms.Form,System.String,System.String,System.Int32,MDL.Draw.Modules.Editor.Tools.GenericEditorTool)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="sText"></param>
            <param name="sCaption"></param>
            <param name="btnOptions">0 = OKCancel, 1 = OKOnly, 2 = YesNo. A future upgrade is to support all MessageBox flavors.</param>
            <param name="handlingTool">Handles button click events.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MultiEndAtomDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MultiEndAtomDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.MultiEndAtomDialog.Message">
            <summary>
            The text displayed
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.EditorControl.StructureResolver.NamespaceDoc">
            <summary>
            Contains the Interface to implement when writing your own structure resolver.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiPTable">
            <summary>
            A representation of a Ptable, the periodic table of the chemical elements.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiPTable.GetAtomSymbolFromType(System.Int32)">
            <summary>
            Gets the chemical symbol associated with the atomic number, 
            such as C from 6, the atomic number for carbon.
            </summary>
            <param name="atomType">the atomic number</param>
            <returns>chemical symbol</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiPTable.GetTypeFromAtomSymbol(System.String)">
            <summary>
            Gets the atomic number associated with the chemical symbol, 
            such as 6 from C, the atomic symbol for carbon.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.FacadeDemoDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.FacadeDemoDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.FacadeDemoDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExThreeButton">
            <summary>
            Simple resizable dialog for displaying a message to the user on the center of the parent form
            Button Options are as follows: 0 == OK + Cancel, 1 == OK Only, 2 == Yes + No
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExThreeButton.#ctor(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="sText"></param>
            <param name="sCaption"></param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExThreeButton.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExThreeButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Modules.Editor.Dialogs.MsgBoxExThreeButton.Message">
            <summary>
            The text displayed
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.OpenEyeCustomDictionaryAddDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.OpenEyeCustomDictionaryAddDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.OpenEyeCustomDictionaryAddDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.EditorControl.dialogs.OpenEyeCustomDictionaryBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.dialogs.OpenEyeCustomDictionaryBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.dialogs.OpenEyeCustomDictionaryBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SequenceAttachmentDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceAttachmentDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceAttachmentDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.SequenceTemplateManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceTemplateManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.SequenceTemplateManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MDL.Draw.Modules.Editor.Dialogs.StructureResolverCustomDictionaryBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.StructureResolverCustomDictionaryBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MDL.Draw.Modules.Editor.Dialogs.StructureResolverCustomDictionaryBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService">
            <summary>
            The class that contains the interface to implement.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService.IChemTextService">
            <summary>
            The API to implement to provide your own structure resolver.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService.IChemTextService.NameLookup(System.String,System.String,System.String)">
            <summary>
            Queries the resolver service for a name and a specific type.
            Returns an array of strings: 
            The first is the molfile of the structure (if found). 
            The second is the service that found the answer. 
            The third is the type of chemical text. Some services, when asked for a "chemicalname" with a SMILES string, 
            return the structure, and fill the type as "smiles").
            </summary>
            <param name="ChemText">The name to search </param>
            <param name="ChemTextType">type of chemical text, such as "chemicalname" or "smiles"</param>
            <param name="Token">optional token to pass to the service to authenticate</param>
            <returns>an array of strings, typically 3 strings</returns>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService.IChemTextService.PollService(System.String)">
            <summary>
            Sends a request to the service to ensure it is available.
            </summary>
            <param name="Token">optional token to pass to the service to authenticate</param>
            <returns>An array of strings. The first string typically contains "Good Service" or "No Service". The second string is typically empty and is reserved for future use (probably for an expiration date).</returns>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService.IChemTextService.AllowAvailabilityLookup">
            <summary>
            Allows automatic availability lookup, but 
            as of Draw 4.1 this property is not used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService.IChemTextService.AllowManualAvailabilityLookup">
            <summary>
            Allows manual availability lookup, but 
            as of Draw 4.1 this property is not used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Editor.EditorControl.StructureResolver.ChemTextService.IChemTextService.CreateDictionaryEntry">
            <summary>
            Whether the returned value can be cached, but 
            as of Draw 4.1 this property is not used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiArc">
            <summary>
            A representation of an arc.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiCroppedGenericLine">
            <summary>
            A representation of a cropped line.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiGenericLine">
            <summary>
            Provides properties to modify a line, such as arrow characteristics.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiGraphicsObject">
            <summary>
            Provides properties that affect the appearance of graphic objects.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiObject">
            <summary>
            Provides members for working with a structure and its children (fragments, bonds, atoms).
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="chemgraphicobject"></param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.AddChild(MDL.Draw.Editor.Facade.ApiObject)">
            <summary>
            Adds a child object to the parent object. An atom is a child of both a bond and the molecule. 
            A bond is a child of both a fragment and the molecule. A fragment is a child of the molecule.
            </summary>
            <param name="o">the child object to add</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.RemoveChild(MDL.Draw.Editor.Facade.ApiObject)">
            <summary>
            Removes a child from the parent. See also the AddChild method.
            </summary>
            <param name="o">the child object to remove</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.Translate(System.Double,System.Double)">
            <summary>
            Translates an object.
            </summary>
            <param name="xtrans">horizontal translation (in decipoints)</param>
            <param name="ytrans">vertical translation (in decipoints)</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.Scale(System.Double)">
            <summary>
            Scales an object according to a ratio.
            </summary>
            <param name="ratio">ratio to scale the object</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.Resize(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Resizes an object.
            For example, a fragment can be enclosed in a rectangle with a top left corner represented by originx and originy.
            The object size can  be changed according to a ratio for the x- and y-axes.
            The enclosing box for what you are resizing has 4 points.
            For example, if your object is at 100,200 and its dimensions are 300 wide, 400 tall,
            you might resize and provide the point 100,200 with ratios 0.5, 0.5. The resized object  
            starts at 100,200 but the new size is 150 wide, 200 tall.
            </summary>
            <param name="originx">the x origin of the corner of the object enclosing the rectangle</param>
            <param name="originy">the y origin of the corner of the object enclosing the rectangle</param>
            <param name="ratiox">ratio of how much the width will expand (for a positive value) or contract (for a negative value)</param>
            <param name="ratioy">ratio of how much the height will expand (for a positive value) or contract (for a negative value)</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObject.Rotate(System.Drawing.PointF,System.Double)">
            <summary>
            Rotates an object about a point.
            </summary>
            <param name="centerOfRotation">coordinate of point to rotate about</param>
            <param name="theta">angle of rotation in Radians</param>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiObject.ObjectId">
            <summary>
            Unique identifier for an object within this structure.
            This is an integer ID that allows you to identify an object throughout its life. 
            For example, the ObjectID of a specific fragment does not change when the fragment is resized.
            The values assigned to ojects are not necessarily sequential.
            If you copy and paste an object, the pasted object is a different object with a different ID.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiObject.ParentFragment">
            <summary>
            Returns the fragment within which the object is located.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiObject._Atoms">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiObject._Bonds">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiGraphicsObject.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="chemgraphicobject"></param>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsObject.PenColor">
            <summary>
            The color for foreground painting.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsObject.ZLayer">
            <summary>
            To change the painting order, adjust the Z-layer of objects.
            To send to back, decrease the Z-Layer.
            To send to front, increase the Z-Layer.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsObject.PenWidth">
            <summary>
            Width of pen in sketch unit. Default 7.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsObject.PenStyle">
            <summary>
            Pen style.
            Valid values are: Solid, Dash, Dot, DashDot, and DashDotDot.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsObject._Smoothed">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles">
            <summary>
            The possible styles of fill for a graphics object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.NONE">
            <summary>
            Hollow
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.SOLID">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.BDIAG">
            <summary>
            Backward Diagonal Lines
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.CROSS">
            <summary>
            Vertical and Horizontal Lines
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.DIAGCROSS">
            <summary>
            Diagonal Grid
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.FDIAG">
            <summary>
            Forward Diagonal Lines
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.HORZ">
            <summary>
            Horizontal Lines
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiGraphicsObject.FillStyles.VERT">
            <summary>
            Vertical lines
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiGenericLine.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="chemgraphicobject"></param>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGenericLine.ArrowDirection">
            <summary>
            Specifies which end(s) of certain geometric objects should have an arrowhead.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGenericLine.ArrowStyle">
            <summary>
            Specifies the style of the arrowhead(s).
            default: filled triangle
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGenericLine.ArrowHeadWidth">
            <summary>
            Specifies the width of the arrowhead in decipoints
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGenericLine.ArrowHeadLength">
            <summary>
            Specifies the length of the arrowhead in decipoints
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiCroppedGenericLine.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="chemgraphicobject"></param>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiCroppedGenericLine.CropCoords">
            <summary>
            Coordinates for cropping.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiArc.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiArc.Coords">
            <summary>
            Coordinates for the arc.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiArc.EndPoints">
            <summary>
            End points for the arc.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiEllipse">
            <summary>
            A representation of an ellipse.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiGraphicsShape">
            <summary>
            Provides properties for the appearance of a graphic shape.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiGraphicsShape.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="chemgraphicobject"></param>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsShape.FillColor">
            <summary>
            The color that displays throughout the shape.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsShape.FillStyle">
            <summary>
            The style of the fill. For possible values, see FillStyles enum.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsShape.Transparent">
            <summary>
            True if the graphic object is transparent, false if it is opaque. Note that
            the Solid Fill Style is always opaque.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiGraphicsShape.CropCoords">
            <summary>
            Cropping of the graphical object according to the coordinates for left x, top y, right x, bottom y.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiEllipse.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiEllipse.Coords">
            <summary>
            The coordinates.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiLine">
            <summary>
            Representation of a line.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiLine.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiLine.Coords">
            <summary>
            The coordinates of the line.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiLine.ArrowShaftSpace">
            <summary>
            Specifies the width in decipoints of the shaft for a block arrow or the distance between the lines of 
            a double line or an equilibrium arrow.
            Only for line and reaction arrow.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiPolygon">
            <summary>
            A representation of a polygon.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiPolygon.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiPolygon.Polypoints">
            <summary>
            The x-y coordinates.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiPolygon.Smoothed">
            <summary>
            True if smoothed. Default is False, which means unsmoothed. 
            Note that smoothing significantly changes the shape. For example,
            smoothing turns a pentagon into something similar to a circle.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiRectangle">
            <summary>
            A representation of a rectangle.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiRectangle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiRectangle.Coords">
            <summary>
            The coordinates.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiRoundedRectangle">
            <summary>
            A representation of a rectangle with rounded edges.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiRoundedRectangle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiRoundedRectangle.Coords">
            <summary>
            The coordinates as two points in an array of PointF. See also RoundedRectCoords.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiRoundedRectangle.RoundedRectCoords">
            <summary>
            The coordinates of the roundedness as 1 point. Together with the two points of Coords, 
            these are the three points used in the ApiObjectFactory.CreateNewRoundedRectangle method.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiSpline">
            <summary>
            Polyline and spline (Smooth polyline).
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiSpline.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiSpline.Polypoints">
            <summary>
            The points.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiSpline.Smoothed">
            <summary>
            True if the points of the shape are smoothed.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiObjectFactory">
             <summary>
             Provides access to many sketch objects, as well as the ApiObject.
             </summary>
             <example><code>
             // get the factory
             MDL.Draw.Editor.Facade.ApiObjectFactory factory = Editor.ApiObjectFactory;
            
             // set coordinates of the rectangle
             PointF p1= new PointF((float)rectangle0x.Value, (float)rectangle0y.Value);
             PointF p2= new PointF((float)rectangle1x.Value, (float)rectangle1y.Value);
             
             // create a new rectangle object
             ApiRectangle rectangle = factory.CreateNewRectangle(p1, p2);
            
             // set other properties of the rectangle
             rectangle.FillStyle = (ApiGraphicsObject.FillStyles)rectfillstyle.SelectedValue;
             rectangle.PenStyle = (System.Drawing.Drawing2D.DashStyle)rectlinestyle.SelectedValue;
             rectangle.PenWidth = (byte)rectanglepenwidth.Value;
             rectangle.Transparent = rectangletransparent.Checked;
             rectangle.PenColor = rectanglecolor.BackColor;
             rectangle.FillColor = rectanglefillcolor.BackColor;
             
             // get the structure in the editor
             MDL.Draw.Editor.Facade.ApiStructure structure = Editor.ApiStructure;
             
             // add the rectangle to current structure
             structure.AddChild(rectangle);
             
             // refresh rendering
             Editor.RefreshStructure();
             </code></example>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewAtom">
            <summary>
            Returns a representation of an atom. 
             Note that before you can create a bond, you must first create two atoms.
            </summary>
            <returns>a representation of an atom</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewAtom(System.String)">
            <summary>
            Returns a newly created ApiAtom.
            </summary>
            <param name="atomName">atom name, that is, the element</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewBond">
            <summary>
            Creates a single bond. 
            Note that before you can create a bond, you must first create two atoms.
            </summary>
            <returns>a representation of a bond</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewBond(MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum,MDL.Draw.Editor.Facade.ApiAtom,MDL.Draw.Editor.Facade.ApiAtom)">
            <summary>
            Creates a bond between the two specified atoms.
            </summary>
            <param name="order">the bond order, such as single or double</param>
            <param name="atom1">the first of the two atoms that are bonded together</param>
            <param name="atom2">the second of the two atoms that are bonded together</param>
            <returns>an APIBond</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates a new line between the specified points.
            </summary>
            <param name="p1">one of the two points</param>
            <param name="p2">the second of the two points</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewSpline(System.Drawing.PointF[])">
            <summary>
            Creates a new spline.
            </summary>
            <param name="points">the points that define the spline</param>
            <returns>the new spline</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewArc(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates a new arc using the specified coordinates. 
            The first two points define the rectange that encloses the oval.
            last two points are the coordinates where the line starts and ends.
            </summary>
            <param name="coord1">the first of two points to define the rectangle that encloses the oval</param>
            <param name="coord2">the second of two points to define the rectangle that encloses the oval</param>
            <param name="start">where the line begins</param>
            <param name="end">where the line stops</param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewCircularArc(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates a circular arc. The first two points define a rectangle that encloses the oval.
            The middle two points are the coordinates where the line starts and ends.
            The last two points define the midpoint and center of the arc.
            </summary>
            <returns>a circular arc</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewRectangle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates a rectangle.</summary>
            <param name="coord1">the first of the two points that define the rectangle</param>
            <param name="coord2">the second of the two points that define the rectangle</param>
            <returns>a representation of a rectangle</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewRoundedRectangle(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates a rounded rectangle.</summary>
            <param name="coord1">the first of the two points that defines the rectangle</param>
            <param name="coord2">the second of the two points that defines the rectangle</param>
            <param name="roundness">the curvature or rounding: the higher the value, the more like a circle. 
            In decipoints, so you might use (360, 360), which is 0.5 inch because 
            1 inch is 72 points, and thus 720 decipoints.</param>
            <returns>a representation of a rounded rectangle</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewPolygon(System.Drawing.PointF[])">
            <summary>
            Creates a polygon</summary>
            <param name="points">the points indicating where to place the polygon</param> 
            <returns>a polygon</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewEllipse(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates an ellipse using the specified coordinates.</summary>
            <param name="coord1">the first of the two coordinates</param>
            <param name="coord2">the second of the two coordinates</param>
            <returns>an ellipse</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewText(System.Drawing.PointF,System.String)">
            <summary>
            Adds text.</summary>
            <param name="coord">the coordinates for the starting point of the text</param>        
            <param name="text">the string to add</param>
            <returns>the text</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewFragment">
            <summary>
            Creates a fragment.
            </summary>
            <returns>the fragment</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.CreateNewStructure">
            <summary>
            Creates a structure.
            </summary>
            <returns>the structure</returns>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.InsertMolfile(System.String,System.Double,System.Double)">
            <summary>
            Inserts onto the canvas a structure represented by the molfile at the specified x- and y-coordinates.
            </summary>
            <param name="molfilestring">string representation of the structure</param>
            <param name="x">x coordinate of where to place the structure</param>
            <param name="y">y coordinate of where to place the structure</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.DestroyAtom(MDL.Draw.Editor.Facade.ApiAtom)">
            <summary>
            Deletes the specified atom.
            </summary>
            <param name="a">the atom to delete</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.DestroyBond(MDL.Draw.Editor.Facade.ApiBond)">
            <summary>
            Deletes the specified bond.
            </summary>
            <param name="b">the bond to delete</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiObjectFactory.#ctor(MDL.Draw.Modules.Editor.EditorModule)">
            <summary>
            
            </summary>
            <param name="editor"></param>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiObjectFactory.ApiPTable">
            <summary>
            Gets the Ptable (periodic table) associated with this editor.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiAtom">
            <summary>
            Represents the atom.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiAtom.#ctor">
            <summary />
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Type">
            <summary>
            Atomic number, such as 6 for carbon.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Charge">
            <summary>
            Represents the charge on the atom.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Name">
            <summary>
            Usually the atom symbol.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Radical">
            <summary>
            Atom radical. 
            DIRADICAL        : 1
            MONORADICAL      : 2
            TRIPLETDIRADICAL : 3
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Isotope">
            <summary>
            Chemical isotope. Stored as mass difference.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.RingBondCount">
            <summary>
            Ring Bond Count.
            Number of ring bonds that must be attached to the atom.
            (This is different from the value in a sketch file.)
            -2 : (r*)as drawn
            -1 : (r0) no ring bonds (acyclic)
             2 : (r2) 2 ring bonds (simple ring)
             3 : (r3) 3 ring bonds (fusion)
             4 : (r4) 4 or more ring bonds
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.SubstitutionCount">
            <summary>
            Specifies the number of non-hydrogen atoms that must be attached to the atom.
            -2 : s* : as drawn
            -1 : s0 : no substituents
            1 : s1 : 1 substituent
            2 : s2 : 2 substituents
            3 : s3 : 3 substituents
            4 : s4 : 4 substituents
            5 : s5 : 5 substituents
            6 : s6 : 6 or more substituents
            0 : no set
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.HydrogenCount">
            <summary>
            The hydrogen count.
            See ImplicitHydrogenCount.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.ImplicitHydrogenCount">
            <summary>
            If the hydrogen count is specified, returns it. Otherwise returns the free valence.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.NameList">
            <summary>
            Atom name list as an arraylist of strings.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.IsUnsaturated">
            <summary>
            Whether the atom must be unsaturated, that is, must have at least one multiple (non-single) bond attached.
            The property might not have been set, so you should check HasValue first. To unset, set it to null.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Valence">
            <summary>
            The valence of the atom.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.DisplayHydrogens">
            <summary>
            The mode of hydrogen display.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.X">
            <summary>
            The horizontal location, that is, on the x-axis.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiAtom.Y">
            <summary>
            The vertical location, that is, on the y-axis.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiAtom.HDisplayEnum">
            <summary>
            Possible values for the mode of hydrogen display.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiAtom.HDisplayEnum.OFF">
            <summary>
            Off, which means hydrogens are implicit (not displayed), which is the default
            </summary>        
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiAtom.HDisplayEnum.HETERO">
            <summary>
            hetero, which means display hydrogen on hetero atoms
            </summary>            
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiAtom.HDisplayEnum.HETEROTERMINAL">
            <summary>
            heteroterminal, which means display hydrogen on terminal hetero atoms
            </summary> 
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiAtom.HDisplayEnum.ALL">
            <summary>
            All, which means display all hydrogen atoms
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiAtom.HDisplayEnum.NONE">
            <summary>
            Use OFF instead
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiBond">
            <summary>
            Provides methods and properties for working with bonds.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiBond.SetAtoms(MDL.Draw.Editor.Facade.ApiAtom,MDL.Draw.Editor.Facade.ApiAtom)">
            <summary>
            A bond must have exactly 2 atoms.
            </summary>
            <param name="a1">the first atom</param>
            <param name="a2">the second atom</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiBond.ReplaceAtom(MDL.Draw.Editor.Facade.ApiAtom,MDL.Draw.Editor.Facade.ApiAtom)">
            <summary>
            Substitutes the specific new atom in the place of the specified old atom.
            </summary>
            <param name="oldAtom">the original atom</param>
            <param name="newAtom">the atom that replaces the original atom</param>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiBond.ReverseStereo(System.Boolean,System.Boolean)">
            <summary>
            Swaps atom	#0 and atom #1. Note that is that correct order is that the number of bonds 
            on the stereocenter (atom #0) is greater than the number of bonds on atom #1. 
            (If the number of bonds are equal, it swaps if the first atom is not an appropriate stereocenter.)
            </summary>
            <param name="bStereoSwap">if True, swaps the stereocenters as well as the atoms</param>
            <param name="bCheckBondCount">To enforce the rule that the stereo center on the atom with more bonds, 
            set this parameter to True. If True, checks if the bond count of the two atoms are in the correct order,  
            and if not, the method exits and the default return value (False) is returned.
            If bCheckBondCount is set to False, the swap proceeds regardless of the bound count 
            being in the correct order or not, so there is no guarantee that the stereocenter has the most bonds.  
            </param>
            <returns>true if atom0 and atom1 are found and the swap occurred.</returns>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.Atoms">
            <summary>
            Returns the atoms.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.BondType">
            <summary>
            Gets and sets the bond order.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.Order">
            <summary>
            The bond order. For possible values, see BondOrderEnum.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.Stereo">
            <summary>
            The stereo bond. For possible values, see StereoEnum.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.Topology">
            <summary>
            The bond topology, such as RING, CHAIN, or Empty (for unspecified).
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.DoublePlacement">
            <summary>
            Indicates the lateral placement of a double bond.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.Crossed">
            <summary>
            In perspective drawings of complex structures, the Bond Crossed property shows that a bond underlies another bond. 
            For a picture, see Crossed Bond in the end-user Help.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiBond.AltStereoDisplay">
            <summary>
            Indicates whether to use alternate stereo bond marks.
            If true: draw bond with alternate stereo bonds: thick solid line for UP, dotted line for DOWN.
            If false: use wedge for UP, hash for DOWN
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum">
            <summary>
            Possible values to characterize a bond, whether or not it is a Markush bond, 
            which Accelrys Chemical Representation refers to as a "variable attachment bond" 
            to one of any atom in a collection.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.Empty">
            <summary>
            For internal use only: Do Not Use.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.SINGLE">
            <summary>
            single bond
            </summary>            
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.DOUBLE">
            <summary>
            double bond
            </summary> 
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.TRIPLE">
            <summary>
            triple bond
            </summary>           
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.AROMATIC">
            <summary>
            aromatic bond
            </summary>     
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.SINGLE_OR_DOUBLE">
            <summary>
            single or double bond, which can be used for queries
            </summary> 
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.SINGLE_OR_AROMATIC">
            <summary>
            single or aromatic bond, which can be used for queries
            </summary> 
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.DOUBLE_OR_AROMATIC">
            <summary>
            double or aromatic bond, which can be used for queries
            </summary>            
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.ANY">
            <summary>
            any bond, which can be used for queries
            </summary>            
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.COORDINATION_BOND">
            <summary>
            a zero order bond type that can be displayed in the coordination style or the dative style
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.HYDROGEN_BOND">
            <summary>
            a zero order bond type that can be of subtype Hydrogen (Displayed as hydrogen type 1 or 2) 
            or coordination (displayed as Coordination or Dative).
            See also: preference default display of coordination bond.
            See also: preference Hydrogen bond Dash Style1 and 2.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.SINGLE_OR_ANY">
            <summary>
            Do not use.
            </summary>  
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.DOUBLE_OR_ANY">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.BondOrderEnum.DOUBLE_OR_TRIPLE">
            <summary>
            double or triple bond, which can be used for queries
            </summary>            
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiBond.StereoEnum">
            <summary>
            Possible values to characterize a stereo bond.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.StereoEnum.Empty">
            <summary>
            Empty, which means no sterochemistry (stereochemistry off)
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.StereoEnum.UP">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.StereoEnum.DOWN">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.StereoEnum.EITHER">
            <summary>
            Either Up or Down, that is, unknown stereoconfiguration at a chiral center
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.StereoEnum.DOUBLE_EITHER">
            <summary>
            Indicate unknown stereoconfiguration at an E or Z geometric double bond
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.StereoEnum.SPECIAL">
            <summary>
            For internal use only: do not use
            </summary>            
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiBond.TopologyEnum">
            <summary>
            Possible values for the topology.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.TopologyEnum.Empty">
            <summary>
            Empty, no value assigned
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.TopologyEnum.RING">
            <summary>
            Ring topology
            </summary>            
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.TopologyEnum.CHAIN">
            <summary>
            Chain topology
            </summary>            
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiBond.DoubleBondPlacementEnum">
            <summary>
            Enum value that specifies lateral placement of double bond. Used in DoublePlacement property.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.DoubleBondPlacementEnum.Empty">
            <summary>
            Automatically calculated
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.DoubleBondPlacementEnum.SecondLeft">
            <summary>
            Viewing bond from atom1 to atom2, the 2nd line will be on the left.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.DoubleBondPlacementEnum.SecondRight">
            <summary>
            Viewing bond from atom1 to atom2, the 2nd line will be on the right.
            </summary>
        </member>
        <member name="F:MDL.Draw.Editor.Facade.ApiBond.DoubleBondPlacementEnum.Center">
            <summary>
            The two lines are placed symmetrically.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiFragment">
            <summary>
            A representation of a fragment, which is a child of the molecule and the parent of a bond. 
            See also the ParentFramgent property.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiFragment.AddBond(MDL.Draw.Editor.Facade.ApiBond)">
            <summary>
            Adds the specified bond to the fragment.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiFragment.Atoms">
            <summary>
            The atoms in the fragment.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiFragment.Bonds">
            <summary>
            The bonds in the fragment.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiStructure">
            <summary>
            Provides access to atoms, bonds, and fragments within a structure.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiStructure.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiStructure.Fragments">
            <summary>
            Returns the fragment(s).
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiStructure.Atoms">
            <summary>
            Returns the atom(s).
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiStructure.Bonds">
            <summary>
            Returns the bond(s).
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiStructure.IsEmpty">
            <summary>
            Returns true if the structure is empty.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiStructure.IsReaction">
            <summary>
            Returns true if the structure is a reaction, that is, has a reaction arrow.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiCircularArc">
            <summary>
            Represents a circular arc.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiCircularArc.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiCircularArc.CircArcPoints">
            <summary>
            4 points.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiCircularArc.Coords">
            <summary>
            4 points.
            2 end points, midpoint and center of the arc.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.ApiText">
            <summary>
            Text on the canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Editor.Facade.ApiText.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiText.Coords">
            <summary>
            The coordinates where the text begins.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiText.Text">
            <summary>
            The text that appears on the canvas.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Facade.ApiText.RtfText">
            <summary>
            The rich text format text.
            </summary>
        </member>
        <member name="T:MDL.Draw.Editor.Facade.NamespaceDoc">
            <summary>
            Provides a wrapper for access to objects of a sketch.
            </summary>
        </member>
        <member name="T:MDL.Draw.Gui.FillStyleMenu">
            <summary>
            Summary description for FillStyleMenu.
            </summary>
        </member>
        <member name="M:MDL.Draw.Gui.FillStyleMenu.#ctor">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.FillStyleMenu.#ctor(MDL.Draw.ChemGraphicsObject.FillStyles[])">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.FillStyleMenu.#ctor(System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="M:MDL.Draw.Gui.FillStyleMenu.#ctor(MDL.Draw.ChemGraphicsObject.FillStyles[],System.Boolean,System.Boolean)">
             constructor
        </member>
        <member name="P:MDL.Draw.Gui.FillStyleMenu.KeepMenuHeight">
             Boolean indicator whther the drawing should keep the default 
             menu height oir not. If false ( the default value), the item height 
             will be determined by GetTextExtentPoint32 API.
        </member>
        <member name="T:MDL.Draw.Editor.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MDL.Draw.Editor.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
