<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MDL.Draw.Renderer</name>
    </assembly>
    <members>
        <member name="T:MDL.Draw.Rendering.BrushType">
            <summary>
            Brush Type Enumerator
            </summary>
        </member>
        <member name="T:MDL.Draw.HeadlessRenderer.StructureType">
            <summary>
            The formats that the HeadlessRenderer 
            supports for representing a molecule or a reaction. See also 
            MDL.Draw.StructureConversion.<see cref="T:MDL.Draw.StructureConversion.StructureConverter"/></summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.CTFile">
            <summary>
            Molfile string, which can be read from a <c>molfile</c> 
            (or rxnfile string, which is read from an <c>rxnfile</c>). 
            Molfiles (filename extension <c>.mol</c>) represent molecules, and 
            rxnfiles (filename extension <c>.rxn</c>) represent reactions. 
            For details of molfiles, rxnfiles, and other Symyx formats, 
            see the <i>CTFile Formats</i> document available for 
            download at
             <a href="http://www.mdl.com" target="RefPage">http://www.mdl.com</a></summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.Smiles">
            <summary>
            <c>SMILES</c> string (filename extension <c>.smi</c>). 
            See the <c>SMILES</c> molecular structure
            specification format described at
            <a href="http://www.daylight.com/smiles/index.html" target="RefPage">http://www.daylight.com/smiles/index.html</a>.
            <para><b>Warning:</b> When you export structures in <c>SMILES</c> format,
            the following features are NOT exported: query features, pseudoatoms, 
            radicals, valences, E/Z stereochemistry, Rgroups, attached data and brackets,
            no-structures, atom coordinates, highlighted collection, non-tetrahedral stereochemistry,
            non-abs stereochemistry, reaction-related features.
            If you require these features, save your structure as a molfile.
            </para></summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.Chime">
            <summary>
            <c>Chime</c> string (filename extension <c>.cmi</c>), 
            the format for Symyx Chime and Symyx ChimePro 
            (see <a href="http://www.symyx.com/products/software/cheminformatics/chime-pro/index.jsp" 
            target="RefPage">http://www.symyx.com/products/software/cheminformatics/chime-pro/index.jsp</a>)
            </summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.SketchFile">
            <summary>
            <c>SketchFile</c> byte array, which can be read from a sketch file 
            (filename extension <c>.skc</c>). A sketch file is a binary file native to 
            Symyx ISIS/Draw. Sketch files painted with the HeadlessRenderer do not display text.
            </summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.StructureHandle">
            <summary>
            <c>StructureHandle</c>, a placeholder for the molecule or reaction, which can be returned by 
            MDL.Draw.StructureConversion.<see cref="T:MDL.Draw.StructureConversion.StructureConverter"/>, 
            which includes <see cref="P:MDL.Draw.StructureConversion.StructureConverter.StructureHandle"/>.
            </summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.IUPAC">
            <summary>
            Structure name according to IUPAC naming standards. References follow:
            <para>1. R.S. Cahn, C.K Ingold and V. Prelog, ``Specification of Molecular Chirality'', Angew. Chem. Int. Ed. Engl., Vol. 5, pp. 385-414, 1966. Errata Vol. 5, p. 511, 1966. 
            </para><para>2. Robert B. Fox and Warren H. Powell, ``Nomenclature of Organic Compounds: Principles and Practice'', Oxford University Press publishers, 2001. 
            </para><para>3. D. Hellwinkel, ``Systematic Nomenclature of Organic Chemistry: A Directory to Comprehension and Application of its Basic Principles'', Springer-Verlag publishers, 2001. 
            </para><para>4. Paul Labute, ``An Efficient Algorithm for the Determination of Topological RS Chirality'', Journal of the Chemical Computing Group, On-line, November 1996. 
            </para><para>5. V. Prelog and G. Helmchen, ``Basic Principles of the CIP-System and Proposals for a Revision'', Angew. Chem. Int. Ed. Engl., Vol. 21, pp. 567-583, 1982. 
            </para></summary>
        </member>
        <member name="F:MDL.Draw.HeadlessRenderer.StructureType.CDX">
            <summary>
            <c>CDX</c> byte array, which can be read from a cdx file 
            (filename extension <c>.cdx</c>).
            </summary>
        </member>
        <member name="T:MDL.Draw.HeadlessRenderer.HeadlessRenderer">
            <summary>
            A special rendering component that requires no display device (monitor) 
            and can paint a molecule or reaction to a <c>Graphics</c>, <c>Bitmap</c>, 
            or <c>Metafile</c> 
            <seealso cref="T:MDL.Draw.Renderer.Renderer"/>
            </summary>
            <remarks><ul><li>The HeadlessRenderer is different from 
            MDL.Draw.Renderer.<see cref="T:MDL.Draw.Renderer.Renderer"/> (and the 
            <a href="MDL.Draw.Renditor.Renditor.html">MDL.Draw.Renditor.Renditor</a>)  
            because HeadlessRenderer does NOT require a display device (such as a monitor)</li>
            <li>Accepts input in the formats listed in the 
            <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/> enumeration</li>
            <li>Supports painting to multiple formats. See the overloaded method <c>PaintMolecule</c>: 
            <see cref="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.Int32,System.Int32)"/>, 
            <see cref="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(System.Drawing.Graphics,System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.Drawing.Size,System.Drawing.Point)"/>, 
            and <see cref="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.IntPtr,System.Int32,System.Int32)"/></li>
            <li>To write a metafile to a specified filename and file format, see <see cref="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.SaveMoleculeAsImage(MDL.Draw.Chemistry.IStructureHandle,System.String,System.IntPtr,System.Int32,System.Int32,MDL.Draw.Renderer.Preferences.DisplayPreferences)"/></li>
            <li>Note that the painted image is not "clipped" to the size specified, 
            so use care when choosing how to (re)size images with 
            MDL.Draw.Renderer.Preferences.<a href="MDL.Draw.Renderer.Preferences.StructureScalingMode.html">StructureScalingMode</a>.</li> 
            <li>Supports the getting and setting of display preferences, which it inherits 
            as subproperties from
            MDL.Draw.Renderer.Renderer.Preferences.<see cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/></li>
            <li>Optimizes performance: your application can re-use 
            a single instance of the HeadlessRenderer for multiple molecules as a way to avoid
            the delay of instantiating a new object for each molecule</li>
            <li>Conserves memory resources: a single HeadlessRenderer can manage     
            a grid in memory that contains many molecules</li>
            <li>Centralizes a service: a single instance of the HeadlessRenderer 
            on a web server can handle requests from multiple web clients that do not need
            to have a Renderer installed</li>
            <li>Unlike the Renderer, the HeadlessRenderer does not have properties to check state 
            (such as the Renderer's <c>IsReaction</c> and <c>HighlightInfo</c>) 
            because the HeadlessRenderer processes the input string (or byte array) 
            immediately.</li>
            <li>Resizing behavior: by default, <see cref="P:MDL.Draw.HeadlessRenderer.HeadlessRenderer.AutoSizeStructure"/> resizes a structure if its average bond length is more than 10% different 
            from MDL.Draw.Renderer.Preferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>.</li></ul></remarks>
            <example>
            To read string data from a file that has a molfile string, Chime string, 
            or SMILES string:
            <code>
            StreamReader sr = new StreamReader("benzene.mol"); 
            String StructureData = sr.ReadToEnd();
            PaintMolecule(StructureData, StructureType.CTFile, 
                myControl.ClientRectangle.Size, Point.Empty);
            </code></example>	
            <example>
            To read byte array data from a sketch file:
            <code>
            FileStream fs = new FileStream("benzene.skc", FileMode.Open);
            byte[] StructureData = new byte[fs.Length];
            fs.Read(StructureData, 0, (int)fs.Length);
            PaintMolecule(StructureData, structureType.SketchFile, 
                myControl.ClientRectangle.Size, Point.Empty);
            </code></example>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor for a HeadlessRenderer that takes a container
            as an argument. Visual Studio designer uses this constructor.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.#ctor(MDL.Draw.Chemistry.IPTableHolder)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.Dispose(System.Boolean)">
            <summary>
            Release any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(System.Drawing.Graphics,System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.Drawing.Size,System.Drawing.Point)">
            <summary>
            Paints a molecule to a Windows <c>Graphics</c> object.
            The data is read in from a object of type <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>.
            </summary>
            <param name="g">The <c>Graphics</c> to paint to.</param>
            <param name="d">The data to be painted in the format <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>. 
            For example <c>StructureType.MolfileString</c></param>
            <param name="structureType">The format of the data: See <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>.</param>
            <param name="size">resizes the molecule according to setting of 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StructureScalingMode"/> 
            and this size</param>
            <param name="location">Translate the molecule to this point before painting. 
            To avoid translation of coordinates, use <c>Point.Empty</c>.</param>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMoleculeAutoSize(System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.IntPtr)">
            <summary>
            Paints a Molecule to a Windows metafile.
            The data is read in from a object of type <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/> 
            calculate the size of the metafile automatically.
            </summary>
            <param name="d">The data to be painted in the format <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>. 
            For example <c>StructureType.MolfileString</c></param>
            <param name="structureType">The type of the data: See <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>.</param>
            <param name="ipHdc">Handle to device context</param>
            <returns>a metafile</returns>
            <remarks>Get a handle to a graphics context from the graphics.
            If you do not have a graphics object, use a control to call the 
            <c>CreateGraphics</c> method. The metafile is unnamed.
            To create a file, use <see cref="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.SaveMoleculeAsImage(MDL.Draw.Chemistry.IStructureHandle,System.String,System.IntPtr,System.Int32,System.Int32,MDL.Draw.Renderer.Preferences.DisplayPreferences)"/> instead of this file 
            because otherwise a metafile is saved as PNG not a WMF.</remarks>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Paints a Molecule to a Windows metafile.
            The data is read in from a object of type <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/> 
            </summary>
            <param name="d">The data to be painted in the format <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>. 
            For example <c>StructureType.MolfileString</c></param>
            <param name="structureType">The type of the data: See <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>.</param>
            <param name="ipHdc">Handle to device context</param>
            <param name="width">Width of the metafile</param>
            <param name="height">Height of the metafile</param>
            <returns>a metafile</returns>
            <remarks>Get a handle to a graphics context from the graphics.
            If you do not have a graphics object, use a control to call the 
            <c>CreateGraphics</c> method. The metafile is unnamed.
            To create a file, use <see cref="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.SaveMoleculeAsImage(MDL.Draw.Chemistry.IStructureHandle,System.String,System.IntPtr,System.Int32,System.Int32,MDL.Draw.Renderer.Preferences.DisplayPreferences)"/> instead of this file 
            because otherwise a metafile is saved as PNG not a WMF.</remarks>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.SaveMoleculeAsImageAutosize(MDL.Draw.Chemistry.IStructureHandle,System.String,System.IntPtr,MDL.Draw.Renderer.Preferences.DisplayPreferences)">
            <summary>
            Writes a structure to the file named <c>filename</c>. 
            The type of file is detected by the filename extension. 
            The supported formats are: wmf, emf, bmp, gif, png, tif. 
            For example, if you call <c>SaveMoleculeAsImage</c> with "test.png", it will write in png format to the file test.png.
            See also <c>MDL.Draw.StructureConversion.StructureConverter.StructureHandle</c>.
            Calculates the size of the image automatically.
            </summary>
            <param name="structure">The <c>IStructureHandle</c>, which is a placeholder for the molecule or reaction, 
            to save as an image</param>
            <param name="filename">The name of the file to write to.</param>
            <param name="ipHdc">Handle to device context.</param>
            <param name="prefs">The display preferences settings to associate with the structure</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.SaveMoleculeAsImage(MDL.Draw.Chemistry.IStructureHandle,System.String,System.IntPtr,System.Int32,System.Int32,MDL.Draw.Renderer.Preferences.DisplayPreferences)">
            <summary>
            Writes a structure to the file named <c>filename</c>. 
            The type of file is detected by the filename extension. 
            The supported formats are: wmf, emf, bmp, gif, png, tif. 
            For example, if you call <c>SaveMoleculeAsImage</c> with "test.png", it will write in png format to the file test.png.
            See also <c>MDL.Draw.StructureConversion.StructureConverter.StructureHandle</c>.
            </summary>
            <param name="structure">The <c>IStructureHandle</c>, which is a placeholder for the molecule or reaction, 
            to save as an image</param>
            <param name="filename">The name of the file to write to.</param>
            <param name="ipHdc">Handle to device context.</param>
            <param name="width">Width of the metafile.</param>
            <param name="height">Height of the metafile.</param>
            <param name="prefs">The display preferences settings to associate with the structure</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(System.Object,MDL.Draw.HeadlessRenderer.StructureType,System.Int32,System.Int32)">
            <summary>
            Paints a molecule to a bitmap.
            The data is read in from a object of type <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>.
            </summary>
            <param name="d">The data to be painted in the format <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>. 
            For example <c>StructureType.MolfileString</c></param>
            <param name="structureType">The format of the data: See <see cref="T:MDL.Draw.HeadlessRenderer.StructureType"/>.</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>a bitmap</returns>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(MDL.Draw.Chemistry.Molecule,System.Int32,System.Int32,System.Drawing.Color)">
            <exclude/>
            <summary>
            <b>For internal use only. Do not use in your application.</b>
            </summary>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(MDL.Draw.Chemistry.Molecule,System.Int32,System.Int32)">
            <exclude/>
            <summary>
            <b>For internal use only. Do not use in your application.</b>
            </summary>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.PaintMolecule(MDL.Draw.Chemistry.Molecule,System.Int32,System.Int32,System.Drawing.Text.TextRenderingHint)">
            <exclude/>
            <summary>
            <b>For internal use only. Do not use in your application.</b>
            </summary>
        </member>
        <member name="M:MDL.Draw.HeadlessRenderer.HeadlessRenderer.ResizeToStandardBondLength(MDL.Draw.Chemistry.Molecule)">
            Resize the structure, leaving the atom labels and Sgroup size
            the same as it was before the resize
        </member>
        <member name="P:MDL.Draw.HeadlessRenderer.HeadlessRenderer.Preferences">
            <summary>
            Preferences for display inherited from 
            <see cref="N:MDL.Draw.Renderer.Preferences"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.HeadlessRenderer.HeadlessRenderer.AutoSizeStructure">
            <summary>
            Resizes the structure without impacting the atom label sizes
            if the mode bond length  (without abbreviations) of the structure added is more than 10% larger or smaller than the 
            MDL.Draw.Renderer.Preferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>.
            Default: <c>true</c>.  
            If you need the quickest rendering or you need to see how the structure is stored in the database, 
            set to <c>false</c>.
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.HeadlessRenderer.NamespaceDoc">
            <summary>
            Contains the HeadlessRenderer class and the StructureType enumeration.
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IRenderer">
            <summary>
            The interface for the Renderer. For property details, see the Renderer.
            <seealso cref="N:MDL.Draw.Renderer"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.Interfaces.IPreferences">
            <summary>
            The interface for Display Preferences. 
            <seealso cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.SketchStringEncodingMode">
            <summary>
            Specifies the constants to use for text encoding of Sketch files. 
            See <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SketchStringEncoding"/>. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchStringEncodingMode.Local">
            <summary>
            Sets text encoding to depend on the local machine: <c>utf-8</c> or <c>Kanji</c>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchStringEncodingMode.Utf8">
            <summary>
            Sets text encoding to <c>utf-8</c>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchStringEncodingMode.S_Jis">
            <summary>
            Sets text encoding to <c>Kanji</c>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchStringEncodingMode.Windows_1252">
            <summary>
            Sets text encoding to <c>Windows-1252</c>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.AttachmentPointShape">
            <summary>
            Specifies the shape used to draw the multi-end attachment point.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AttachmentPointShape.Circle">
            <summary>
            a disc shape
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AttachmentPointShape.Square">
            <summary>
            a square shape
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AttachmentPointShape.Star">
             <summary>
            a 7 point star shape
             </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.TemplateEditorInvokingGestures">
            <summary>
            Specifies the constants to use when setting the value of   
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TemplateEditorInvokingGesture"/>, 
            which determines how the end-user invokes the Template Editor dialog.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.TemplateEditorInvokingGestures.DoubleClick">
            <summary>
            Sets <c>DoubleClick</c> on the Molecule button to invoke the Template Editor dialog
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.TemplateEditorInvokingGestures.RightClick">
            <summary>
            Sets <c>RightClick</c> on the Molecule button to invoke the Template Editor dialog
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode">
            <summary>
            (Reactions): Specifies the constants to use when setting the value of 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondChangeMarkerDisplayISIS"/>.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode.Off">
            <summary>Displays no bond change markers.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            <para><img src="images/BondChangeMarkerMode_Off.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode.HashMarks">
            <summary>
            Displays bond change markers solely on bonds that change in the reaction.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            <para><img src="images/BondChangeMarkerMode_ChangeOnly.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode.Color">
            <summary>
            Displays reacting centers in Red.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2)
            <para><img src="images/BondChangeMarkerMode_Color.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode.AllMarks">
            <summary>
            Displays bond change markers on all bonds in the reaction, 
            including the dot marker (.) on bonds that undergo no change.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 3)
            <para><img src="images/BondChangeMarkerMode_All.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode.Thicker">
            <summary>
            Displays bond change markers as thicker bonds 
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.HapticBondStyleMode">
            <summary>
            Specifies Haptic bond basis' delocalized line style
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HapticBondStyleMode.Solid">
            <summary>
            Displays Haptic bond basis' delocalized line as solid line.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HapticBondStyleMode.Dotted">
            <summary>
            Displays Haptic bond basis' delocalized line as dotted line.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.InternalGroupDisplayMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayInternalGroup"/> property
            that determines whether and how to display internal leaving groups on sequences.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.InternalGroupDisplayMode.On">
            <summary>
            Displays all internal leaving groups for the contracted sequence residue.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.InternalGroupDisplayMode.HideHydrogenOnly">
            <summary>
            Does not display internal leaving groups that contain a single hydrogen atom.
            Displays internal leaving groups that contain any non-hydrogen atoms, such as sulfur.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.InternalGroupDisplayMode.HideAll">
            <summary>
            Does not display internal leaving groups for contracted sequence residues.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2)
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HydrogenDisplayMode"/> property
            that determines whether and how to display implicit hydrogen atoms.
            (Does not affect explicit hydrogens.)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode.Off">
            <summary>
            Does not display implicit hydrogen atoms. 
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            <para><img src="images/HydrogenDisplayMode-off2.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode.Hetero">
            <summary>Displays implicit hydrogens on heteroatoms. 
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            <para><img src="images/HydrogenDisplayMode-hetero2.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode.Terminal">
            <summary>Displays implicit hydrogens on terminal atoms. 
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2)
            <para><img src="images/HydrogenDisplayMode-terminal.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode.HeteroOrTerminal">
            <summary>Displays implicit hydrogens on terminal atoms and 
            heteroatoms.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 3)
            <para><img src="images/HydrogenDisplayMode-hetero-terminal.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode.All">
            <summary>Displays implicit hydrogens on all atoms.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 4)
            <para><img src="images/HydrogenDisplayMode-all.gif"></img></para>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.AtomAtomMappingDisplayMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomAtomMappingDisplay"/> property
            that determines whether and how to display atom atom maps.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AtomAtomMappingDisplayMode.Off">
            <summary>
            Does not display Atom Atom maps
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AtomAtomMappingDisplayMode.On">
            <summary>
            Displays all present Atom Atom maps
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AtomAtomMappingDisplayMode.SolelyAtReactionCenter">
            <summary>
            Displays only those Atom maps with bonds that are changed
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.PiBondRenderingMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PiBondRendering"/> property that
            determines how to display <c>pi-metal</c> bonds.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.PiBondRenderingMode.SingleBond">
            <summary>
            Represents pi-metal bonds with a single bond.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            <para><img src="images/pi-bond-single.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.PiBondRenderingMode.DottedBonds">
            <summary>
            Represents pi-metal bonds with dotted bonds.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            <para><img src="images/pi-bond-dotted.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.PiBondRenderingMode.Radicals">
            <summary>
            Represents pi-metal bonds as radicals, which is how they are stored 
            in Symyx databases.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2)
            <para><img src="images/pi-bond-radicals.gif"></img></para>
            <para>For more information, see Appendix A, 
            "Chemical Representation", in ISIS/Base Database Maintenance, 
            an online book that is distributed with ISIS Desktop 2.5.
            Note: This value corresponds to the atom property 
            <c>A_RADICAL</c> in Symyx Cheshire.</para> 
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.StereoChemistryModeEnum">
            <summary>
            Specifies default stereochemistry on drawing new stereocenters in structure, 
            either <c>Absolute</c> or <c>And</c>. Default: <c>Absolute</c>.
            See <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoChemistryMode"/>.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.StereoGroupDisplayMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoGroupDisplay"/> property that
            determines how to display color on the labels and the bonds of stereogroups.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoGroupDisplayMode.Off">
            <summary>
            Displays no color on the labels or the bonds of stereogroups.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoGroupDisplayMode.BondsOnly">
            <summary>
            Displays color on the bonds of stereogroups.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoGroupDisplayMode.LabelsOnly">
            <summary>
            Displays color on the labels of stereogroups.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoGroupDisplayMode.LabelsAndBonds">
            <summary>
            Displays color on both the labels and the bonds of stereogroups.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 3)
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.StructureScalingMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StructureScalingMode"/> property
            that determines how to size structures in relation to the display area.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StructureScalingMode.ScaleToFitBox">
            <summary>
            Displays the entire structure.
            Reduces or enlarges the structure, if necessary to fill the display area.
            Corresponds to GUI's <c>Options</c>, <c>Settings </c>menu, <c>Fill drawing area</c>.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StructureScalingMode.ScaleToStdBond">
            <summary>
            Displays the entire structure with the standard bond length, if space allows. 
            If necessary, reduces the structure to fit 
            inside the display area.
            Corresponds to GUI's <c>Options</c>, <c>Settings </c>menu, <c>Standard bond and fill drawing area</c>.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 2) 
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StructureScalingMode.ScaleToStdBondAbs">
            <summary>
            Maintains the standard size as an absolute, even if part of the structure 
            does not fit inside the display area. 
            Note: Symyx Draw enables the end-user to move into view 
            any portion of an oversized structure.
            Corresponds to GUI's <c>Options</c>, <c>Settings </c>menu, <c>Standard bond only</c>.
            (If your Renderer is in an Internet Explorer HTML page, 
            use 3)
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayChiralStereoLabels"/> property 
            Modified from 2.1 release
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.IUPAC">
            <summary>
            IUPAC style stereo label display, which means no abs display. display <c>and</c> or <c>or</c> when in mixed mode. 
            (If your Renderer is in an Internet Explorer HTML page, use 0)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.Classic">
            <summary>
            Display all stereo labels (<c>abs</c>, <c>or</c>, <c>and</c>) except absolute mode and <c>AND enantiomer</c> mode
            (If your Renderer is in an Internet Explorer HTML page, use 1)
            <para><img src="images/displaychiralonly2.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.On">
            <summary>
            Displays the <c>abs</c> or <c>and</c> label on the stereocenter atom(s) according to
            <a href="http://www.mdl.com/solutions/white_papers/stereochemistry-white-paper.jsp" target="RefPage">
            Symyx fs Enhanced Stereochemical Representation</a>
            (If your Renderer is in an Internet Explorer HTML page, use 2)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.Off">
            <summary>
            Don't display any stereo labels.
            (If your Renderer is in an Internet Explorer HTML page, use 3)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.Enhanced">
            <summary>
            Deprecated.  Use <c>On</c>. Same rendering as <c>On</c>
            <para><img src="images/abs2.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.ChiralOnly">
            <summary>
            Deprecated. Should not be used. Provided for compatibility. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.AbsOnly">
            <summary>
            Deprecated. Should not be used. Provided for compatibility. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode.Both">
            <summary>
            Deprecated. Should not be used. Provided for compatibility. 
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.AbbreviationDisplayMode">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer)  
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TypeInAbbreviationInitialDisplay"/> property 
            that determines how to display abbreviation Sgroups when the end-user 
            is using the <c>keyboard sprouting</c> feature. See also
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShowAbbrevIndicator"/></summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AbbreviationDisplayMode.Abbreviated">
            <summary>
            (Keyboard sprouting) Displays Sgroups in abbreviated form, which only 
            shows atom labels, instead of as a structure of atoms and bonds. 
            Corresponds to the GUI's <c>Options, Settings</c> dialog's Templates, 
            "Type in templates as abbreviations"
            (If your Renderer is in an Internet Explorer HTML page, 
            use 0)
            <para><img src="images/abbrevcontracted.gif"></img></para></summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.AbbreviationDisplayMode.Expanded">
            <summary>
            (Keyboard sprouting) Displays Sgroups in expanded form 
            (as a structure of atoms and bonds) 
            instead of only showing atom labels.
            Corresponds in the GUI's <c>Options, Settings</c> dialog's Templates, 
            "Type in templates as fully expanded structures"
            (If your Renderer is in an Internet Explorer HTML page, 
            use 1)
            <para><img src="images/abbrevexpanded.gif"></img></para></summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.SketchHeaderPropertyMode">
            <summary>
            Specifies the constants to use when setting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SketchHeaderPropertyOnPaste"/> property 
            that determines how to display the sketch.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchHeaderPropertyMode.FollowHeaderProps">
            <summary>
            Follows the display properties in the sketch header.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchHeaderPropertyMode.IgnoreHeaderProps">
            <summary>
            Ignores display properties in the sketch header to follow 
            the current preference properties.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.SketchHeaderPropertyMode.Ask">
            <summary>
            Displays a dialog that prompts the end-user to choose. 
            <c>Yes</c> (FollowHeaderProps) or <c>No</c> (IgnoreHeaderProps)
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.Units">
            <summary>
            Specifies the constants to use when setting the units for a given display property.
            Default is centimeters: <c>Cm</c></summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.Units.Empty">
            <exclude/>
            <summary>
            For internal use only. Do not use in your application.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.Units.Cm">
            <summary>
            cm (0.39 inches)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.Units.Inch">
            <summary>
            inch (2.54 cm)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.Units.Point">
            <summary>
            point (72 points per inch)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.Units.Decipoint">
            <summary>
            Decipoints (sketch units, 720 decipoints per inch)
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.StarAtomDisplayMode">
            <summary>
            Specifies the constants to use when setting the mode for displaying star atoms,
            such as the end bond of an SRU Sgroup. 
            See <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayStarAtom"/>.
            Default is *</summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StarAtomDisplayMode.Star">
            <summary>
            Displays * for star atoms.
            Corresponds in the GUI to <c>Options, Settings,
            Display star atoms as Star (*)</c>, 
            <para><img src="images/atomstaratomstar.gif"></img></para>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.StarAtomDisplayMode.ZigZag">
            <summary>
            Displays zigzag lines for star atoms.
            Corresponds in the GUI to <c>Options, Settings,
            Display star atoms as Zigzag line</c>
            <para><img src="images/atomstaratomzigzag.gif"></img></para>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DefaultFileFormatMode">
            <summary>
            Specifies default file format to use on save
            Default is "automatic" which is that the default file format is decided by the program.</summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DefaultFileFormatMode.Automatic">
            <summary>
            Default file format is decided by the program. If the structure has no sketch specific feature, it'll be mol/rxn file format.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DefaultFileFormatMode.SketchFormat">
            <summary>
            Default file format is sketch format.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.AttachmentDisplayMode">
            <summary>
            Specifies the constants to use when setting the mode for displaying the attachment point 
             of the Rgroup member.
            Default is an arrow and a *.
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayRgroupAttachment"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DisplayPreferences">
            <summary>
            Stores display preferences settings used by the <see cref="T:MDL.Draw.Renderer.Renderer"/>,  
            <see cref="T:MDL.Draw.HeadlessRenderer.HeadlessRenderer"/>, Renditor, and Editor.
            </summary>
            <remarks><ul>
            <li>To access the DisplayPreferences object for 
            the Renderer, Renditor, HeadlessRenderer, and Editor classes, use the 
            Preferences property on these classes.</li>
            <li>To synchronize DisplayPreferences among multiple components, make them
            share a single DisplayPreferences object. 
            See Example 4 of <see cref="T:MDL.Draw.Renderer.Renderer"/> and the example for the <code>Renditor</code>. 
            You can also have multiple components 
            listen to the <see cref="E:MDL.Draw.Renderer.Preferences.DisplayPreferences.PropertiesChangedEvent"/> such that when any property of the 
            shared DisplayPreferences object is changed, all the components receive the update 
            event.</li>
            <li>To compare two DisplayPreferences objects (find out if they have the same values), 
            use <see cref="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.Equals(System.Object)"/></li>
            <li>If you want different renderers or renditors to NOT share one <c>DisplayPreference</c> object, but 
            instead want some overrides, consider using <see cref="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.CopyTo(MDL.Draw.Renderer.Preferences.DisplayPreferences)"/>, and then making 
            changes in the target object.</li>
            <li>Note that the display properties defined in this class 
            are a superset of the options that are available to the end-user on the 
            <c>Options</c> menu's <c>Settings</c> dialog</li>
            <li>For usage tips and code snippets on how to change display preferences, 
            have different preferences for different renderers, and synchronize preferences 
            between components, see 
            MDL.Draw.Renderer.<see cref="T:MDL.Draw.Renderer.Renderer"/></li>
            <li>Tip: One way to see the effect of changing settings is to 
            open an Symyx Draw example (such as DemoRenderer), load a structure, expand the 
            property grid for Preferences, and observe what happens when you change values.</li>
            <li>Biopolymer-related preferences include: <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayTerminalGroup"/> and 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayInternalLeavingGroup"/></li>
            </ul></remarks>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.RaisePropertiesChangedEvent">
            <summary>
            Checks whether the PropertiesChangedEvent should be emitted 
            (as set through EnablePropertiesChangedEvent) and raises the event 
            if necessary.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.EnablePropertiesChangedEvent(System.Boolean)">
            <summary>
            Enables or disables the automatic raising of a <c>PropertiesChangedEvent</c> 
            whenever a property is changed. By default, the argument is <c>true</c>.
            To disable, set the argument to <c>false</c>.
            </summary>
            <param name="isEnabled"></param>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.RaiseKnownPropertiesChangedEvent(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Checks whether the PropertiesChangedEvent should be emitted 
            (as set through EnablePropertiesChangedEvent) and raises the event 
            if necessary.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.RaiseKnownPropertiesChangedEvent(System.Reflection.PropertyInfo)">
            <exclude/>
            <summary>
            <b>For internal use only. Do not use in your application.</b>
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.CopyTo(MDL.Draw.Renderer.Preferences.DisplayPreferences)">
            <summary>
            Copies the settings stored in this <c>DisplayPreferences</c> object to the target <c>DisplayPreferences</c> object.
            </summary>
            <param name="target">the <c>DisplayPreferences</c> object to be a copy of this <c>DisplayPreferences</c> object</param>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeChiralLabelSize">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeDashSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeDashSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeChemLabelFont">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeConfigLabelFont">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceLabelFont">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceLabelFont">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeNoStructureTextFont">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeNoStructureTextSize">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceBlockSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceBlockSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceBlockSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceBlockSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceLineSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceLineSpacing">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeSequenceLineSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetSequenceLineSpacingWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeStandardBondLength">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.SetStandardBondLengthWithUnit(MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit)">
            <summary>
            Sets the value of the standard bond length in the Display Preferences. 
            If the value is not within the allowed range, increases or decreases the value so it fits without exception.
            Does not fire any callbacks, even though setting the value in the preference object does fire any callbacks. 
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeStandardBondLengthWithUnit">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeWedgeWidth">
            <exclude/>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShouldSerializeWedgeWidthWithUnit">
            <exclude/>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.Equals(System.Object)">
            <summary>
            Compares two DisplayPreferences objects.
            Returns <c>true</c> if the preference properties have the same values
            in both DisplayPreferences objects.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.SetColorProperty(System.String,System.String)">
            <summary>
            Helper method to set properties of type Color when only a string is available (for example in JavaScript).
            </summary>
            <param name="propertyname">name of the parameter, for example <c>SgroupHighlightColor</c></param>
            <param name="val">color name that will be converted to a color using <c>Color.FromName</c>. for example \"Red\" or \"SlateBlue\"</param>
            <returns><c>true</c> if succeeded</returns>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColors">
            <summary>
            List of each <c>AtomColor</c> for coloring each type of atom label,
            such as red for the oxygen label: <c>O</c>
            </summary>
        </member>
        <member name="E:MDL.Draw.Renderer.Preferences.DisplayPreferences.PropertiesChangedEvent">
             <summary>
             This event is raised when the value of a Property of 
             <c>DisplayPreferences</c> changes. Attach an EventHandler to be 
             notified of such changes.
            </summary>
        </member>
        <member name="E:MDL.Draw.Renderer.Preferences.DisplayPreferences.KnownPropertiesChangedEvent">
             <summary>
             This event is raised when the value of a certain Property of 
             DisplayPreferences changes so that you can attach an EventHandler to be 
             notified of such changes.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.EmitGroup4TIFFiles">
            <summary>
            Specifies whether TIFF files are encoded according to the black and white CCITT Group IV compression (Bitonal image) standard (<c>true</c>) 
            or as truecolor (false) - default: <c>false</c>.
            Using black and white is useful when bitonal images are required (such as for the U.S. Patent Office) 
            but unless the image size is large enough, produces images that are less readable.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SproutBondsAtStandardBondLength">
            <summary>
            Whether to sprout new bonds at an atom site with standard bond length. 
            If <c>Off</c>, it is the length of the most bonds at that atom or, if all bonds have different lengths, the length of the longest bond. 
            If the atom has no bonds, the length is standard bond length. 
            Note: Templates are always added at standard bond length except at the attachment bond which follows the rule above. 
            If <c>On</c>, the length of the new bond is the standard bond length. 
            Default: <c>On</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AromaticRingCircles">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Displays each aromatic ring as a ring with an inscribed circle if <c>true</c>.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Aromatic bonds as circle".</td></tr>
            <tr><td><img src="images/aromatic-inscribed-ring.gif"></img></td></tr>
            <tr><td></td></tr>
            <tr><td>If <c>false</c>, represents each aromatic ring as a ring with conjugated 
            double bonds.</td></tr>
            <tr><td><img src="images/aromatic-conjugated-ring.gif"></img></td></tr>
            <tr><td><seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AromaticRingSize"/></td></tr>
            <tr><td>Default: <c>false</c>.</td></tr>
            </table>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentPointShape">
            <summary>
            Shape to use to draw the Attachment point. Default: Circle.
            For a list of possible values, see the AttachmentPointShape enumeration.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AromaticRingSize">
            <summary>
            Specifies the ratio of the radius of the inscribed circle to that of the 
            outer hexagon. Default: <c>0.7</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AromaticRingCircles"/>
            </summary>
            <remarks> 
            Applies when <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AromaticRingCircles"/> is <c>true</c>.
            This value should be between <c>0</c> and <c>1</c>.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomAtomDisplayMode">
            <summary>
            Displays atom-atom mapping numbers on the reaction if <c>Off</c>. 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display atom-atom mapping".
            Default: <c>Off</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ReactionCenterSize"/>
            </summary>
            <remarks>Each mapping number indicates the correspondence between one atom 
            in the reactants and one atom each product.
            <para><img src="images/AtomAtomMappingDisplay.gif"></img></para></remarks> 
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomAtomMappingDisplay">
            <summary>
            Displays atom-atom mapping numbers on the reaction if <c>false</c>. 
            Does not correspond to a GUI (see AtomAtomDisplayMode).
            This is retained only for compatibility
            Default: <c>see AtomAtomDisplayMode</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ReactionCenterSize"/>
            </summary>
            <remarks>
            <img src="images/AtomAtomMappingDisplay.gif"></img></remarks> 
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HBond1DisplayDash">
            <summary>
            Specifies how to display hydrogen bonds of a certain type.
            See Options, Settings for Zero Order Bonds, Hydrogen bonds, HBond1 Dash Style.
            Default: <c>1.0, 1.0</c> is for dotted line.
            With <c>HBond1DisplayDash</c> and <c>HBond1DisplayDashedLine"</c>, 
            changing one also changes the other.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HBond2DisplayDash">
            <summary>
            Specifies how to display hydrogen bonds of a second type.
            See Options, Settings for Zero Order Bonds, Hydrogen bonds, HBond2 Dash Style.
            Default: <c>3.0, 3.0</c> is for dashed line.
            With <c>HBond2DisplayDash</c> and <c>"HBond2DisplayDashedLine"</c>, 
            changing one also changes the other.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HBond1DisplayDashedLine">
            <summary>
            String equivalent of <c>HBond1DisplayDash</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HBond2DisplayDashedLine">
            <summary>
            String equivalent of <c>"HBond2DisplayDash</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CoordinationBondDefaultDisplay">
            <summary>
            Display of a coordination bond, which is a type of zero-order bond.
            For possible values, see the CoordinationBondDefaultDisplayType enumeration.
            </summary> 
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AppsNeedingAuxThreading">
            <summary>
            pipe separated list of application names.
            when the renditor is started, it checks to see if it was called originally by an application whose name is on this application
            if so it will do an alternate threading.
            The idea is to use a separate message pump to prevent the shortcut from not working.
            default value is "iexplore.exe"
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomChargeDisplay">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Displays the charge value on charged atoms if <c>true</c>. 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display charge". 
            Default: <c>true</c></td></tr>
            <tr><td><img src="images/atomcharge.gif"></img></td></tr>
            </table>
            </summary>			
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomValenceDisplay">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Displays the valence on atoms that have an explicit valence if <c>true</c>.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display valence".</td></tr>
            <tr><td><img src="images/atomvalencedisplay.gif"></img></td></tr>
            <tr><td>Default: <c>true</c></td></tr>
            </table>
            </summary> 
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowBevel">
            <summary>
            (Rgroups only) specifies the inset of the base of the arrowhead
            at the Rgroup attachment point. 
            Default: <c>0.05</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowLength"/>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowWidth"/>
            </summary>
            <remarks>
            This value is set as a fraction of average bond length.
            <ul>
            <li>For values close to zero, the arrowhead appears to be filled in.
            <img src="images/attacharrowheadbevel-filled.gif"></img></li>
            <li>For values close to the arrowhead length, the arrowhead appears 
            to be a stick drawing. <img src="images/attacharrowheadbevel-stick.gif"></img>
            </li>
            </ul>
            An Rgroup attachment point is the atom in the Rgroup member that specifies 
            where the to the Rgroup member attaches to the Rgroup site.
            See also <c>Rgroup Member</c> in the <c>Rgroup Tool</c> topic of Symyx Draw Help.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowLength">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>(Rgroups only) specifies the length of the attachment point arrowhead 
            as a fraction of average bond length. Default: <c>0.25</c></td></tr>
            <tr><td><img src="images/AttachmentArrowLength.gif"></img></td></tr>
            <tr><td><seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowBevel"/>  <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowWidth"/></td></tr>
            </table>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowWidth">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>(Rgroups only) specifies the width of the attachment point arrowhead
            as a fraction of average bond length. Default: <c>0.2</c></td></tr>
            <tr><td><img src="images/AttachmentArrowWidth.gif"></img></td></tr>
            <tr><td><seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowBevel"/>  <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowLength"/></td></tr>
            </table>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentOffset">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>(Rgroups only) specifies the offset distance from the attachment point atom
            to the line that connects to the attachment point arrowhead. 
            This value is set as as a fraction of average bond length.
            Default: <c>0.15</c>  Increasing the offset makes the arrow appear shorter.</td></tr>
            <tr><td><img src="images/AttachmentOffset.gif"></img></td></tr>
            <tr><td><seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AttachmentArrowBevel"/></td></tr>
            </table></summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BackColor">
            <summary>Specifies the color of the drawing surface, which is the background
            for the structure. Default: White
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Background color".
             See Example 2 of the 
            <see cref="T:MDL.Draw.Renderer.Renderer"/>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ForeColor"/></summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondChangeMarkerDisplay">
            <summary>
            Deprecated in 1.2. Use <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondChangeMarkerDisplayISIS"/> instead.</summary>
            <remarks>If <c>true</c>, bond change markers display. 
            Default: <c>false</c> 
            Bond markers indicate how the bonds change in the reaction.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondChangeMarkerDisplayISIS">
            <summary>
            (Reactions) Specifies whether and how to display markers on bonds 
            that change in a reaction (or all bonds in the reaction).
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display reacting centers".
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.BondChangeMarkerMode"/> enum. 
            Default: <c>BondChangeMarkerMode.Hash Marks</c></summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondLabelSize">
            <summary>Specifies the height of bond labels as a fraction of 
            average bond length. Default: <c>0.33</c></summary>	 
            <remarks>
            <ul><li>The bond label for a chain is <c>Ch</c></li>
            <li>The bond label for a ring is <c>Rn</c></li>
            </ul>
            <para><img src="images/BondLabelSize.gif"></img></para>
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CarbonLabelDisplay">
            <summary>
            Displays the <c>C</c> atom label on all carbon atoms if <c>true</c>. 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display carbon explicitly".
            Default: <c>false</c> 
            </summary>			
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChiralLabelHorizontalOffset">
            <summary>
            Specifies the distance of the chiral flag from the molecule 
            as a fraction of average bond length. 
            Default: <c>0.15</c> 
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChiralLabelSize">
            <summary>
            Specifies the size of chiral flag labels. 
            Default: 12 point.
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayChiralStereoLabels"/></summary>
            <remarks>Initially, this value is 
            related to <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/>, but if you change <c>ReactionCenterSize</c>,
            it is no longer related to <c>ChemLabelFont</c>.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DashSpacing">
            <summary>
            <table class="dtTABLE" border="0">        
            <tr><td>Specifies the spacing between lines in <c>Down</c> bonds in units of one-third of an inch. 
            With <c>DashSpacingWithUnit</c> and <c>DashSpacing</c>, changing one also changes the other.
            Default: 3 point.</td></tr>
            <tr><td><img src="images/down1.gif"></img></td></tr>
            </table>
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DashSpacingWithUnit">
            <summary>
            <table class="dtTABLE" border="0">        
            <tr><td>Specifies the spacing between lines in <c>Down</c> bonds 
            in cm, inch, or point.
            Corresponds to GUI's <c>Options</c>, <c>Settings</c> dialog's "Spacing of down bond hashes".</td></tr>
            <tr><td>A smaller value makes the wedge look more solid:</td></tr>
            <tr><td><img src="images/down2.gif"></img></td></tr>
            <tr><td>DashSpacing value has to be positive number and less than the bond length.
            With <c>DashSpacingWithUnit</c> and <c>DashSpacing</c>, changing one also changes the other.
            Default: <c>3 points</c></td></tr>
            </table>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PaperKind">
            <exclude/>
            <summary>
            <b>For internal use only. Do not use in your application.</b>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PaperOrientation">
            <exclude/>
            <summary>
            <b>For internal use only. Do not use in your application.</b>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DataSGroupAutoLayout">
            <summary>
            Automatically performs the layout of data Sgroups to 
            avoid the overlap of data Sgroup labels if <c>true</c>. 
            If the data Sgroup contains all the atoms of that fragment, 
            the label displays at the bottom left corner of the fragment. 
            If the Sgroup's fieldname is "coefficient", "charge", or "radical", 
            the displayed label includes the fieldname as well as data text 
            (for example, "Radical=2").
            If <c>false</c>, data Sgroup labels are rendered from the coordinates 
            in the molfile.
            Default: <c>false</c>
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DataSGroupDisplay">
            <summary>
            Displays the attached data of data Sgroups if <c>true</c>.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display attached data".
            Default: <c>true</c>
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayChiralStereoLabels">
            <summary>
            Specifies display of stereochemistry in each stereogenic center.
            In <c>IUPAC</c> display, the 'abs' labels in each stereogenic centers are not displayed. 
            'or/and' are displayed except in 'Or Enantiomer' or 'And Enantiomer'.
            In <c>Classic</c> display, all labels (abs/or/and) are displayed except 'abs' labels in absolute stereochemistry and 
            'and' labels in racemic stereochemistry.
            In <c>On</c> display, all labels (abs/or/and) are displayed always.
            In <c>Off</c> mode, sterei labels are not displayed.
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.StereoLabelsDisplayMode"/> enum.
            To display "Chiral" label for absolute stereochemistry, please edit <c>AbsStereoLabelText</c>
            Default: <c>StereoLabelsDisplayMode.IUPAC</c>
            </summary>			
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AutomaticallyAddStarAtoms">
            <summary>Whether the editor automatically marks star (*) atoms. Default: true</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SgroupHighlightColor">
            <summary>
            Sets color used to paint the Sgroup inside bonds. Default: Red
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AbsStereoLabelText">
            <summary>
            Specifies text displayed for the absolute chirality label. Default is empty string.  
            For more information, see the online Help index > stereochemistry, enhanced. 
            For Symyx Draw 3.0, chirality labels supersede the chiral flag.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AndStereoLabelText">
            <summary>Specifies text displayed for the AND enantiomer chirality label. 
            Default is "AND enantiomer". 
            For more information, see the online Help index > stereochemistry, enhanced.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.OrStereoLabelText">
            <summary>Specifies text displayed for the OR enantiomer chirality label. 
            Default: "OR enantiomer". 
            For more information, see the online Help index > stereochemistry, enhanced.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.MixedStereoLabelText">
            <summary>Specifies text displayed for the Mixed chirality label (also called "chiral label"). 
            Default: "Mixed". 
            For more information, see the online Help index > stereochemistry, enhanced.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ClassicStereoLabelsDisplayMode">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer) Checks whether <c>Classic</c> mode is selected. This includes <c>Classic</c> and the deprecated modes <c>ChiralOnly</c> and <c>Both</c>.
            (read-only)
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayDandT">
            <summary>
            (For hydrogen isotopes): Displays <c>D</c> and <c>T</c> 
            instead of <c>2H</c> and <c>3H</c> if <c>true</c>. 
            Default: <c>false</c>
            </summary>
            <remarks>Symyx Draw reads this property from the molfile (or rxnfile). 
            If you change this property, Symyx Draw renders the change 
            when the structure is (re)loaded from file.
            </remarks>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayImplicitAndGroup">
            <summary>
            Displays labels for implicit <c>And</c> groups if <c>true</c>. 
            Default: <c>false</c>
            </summary>
            <remarks>Symyx Draw reads this property from the molfile (or rxnfile). 
            If you change this property, Symyx Draw renders the change when the structure 
            is (re)loaded from file. When <c>true</c>, the label for an implicit 
            <c>And</c> group displays <c>&#38;(N+1)</c>, where N is the 
            number of the highest explicit AND group on the structure.
            </remarks>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayMeasuredValueFor3D">
            <summary>
            Displays measured value for 3D objects if <c>true</c>. 
            Corresponds to the GUI's <c>Options, Settings</c> dialog's Three Dimension (3D), "Display Measured Values".
            Default: <c>false</c>
            </summary>
            <remarks>Editor also has GUI access to this setting through Chemistry/3D menu.
            </remarks>	
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.IncludeNonqueryAtoms">
            <summary>
            Include non-query atoms within exclusion sphere if <c>true</c>. Editor only.
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DefaultDistanceRange">
            <summary>
            Default value for 3D distance constraint range.
            The value is in Angstroms, the default distance constraint is the measured distance 
            between the two reference positions on your query, plus or minus the Distances value. 
            If the Distances value is a percentage, the default distance constraint
            is the measured distance between the reference positions, plus or minus the specified percentage of the measured distance. 
            Editor only.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DefaultAngleRange">
            <summary>
            Default value for 3D angle constraint range.
            The value is in degrees, the default angle constraint is the measured value of the angle 
            in your query, plus or minus the Angles value. 
            If the angles value is a percentage, the default angle constraint
            is the measured value of angle plus or minus the angles value expressed in degrees.
            Editor only.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DefaultRMSRange">
            <summary>
            Default value for for linearity and planarity constraints for lines and planes. Editor only.
            Corresponds to the GUI's <c>Options, Settings</c> dialog's Options, Settings, Three Dimensional (3D), "Default RMS Deviation".
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.Rotation3DIncrement">
            <summary>
            Degree value for 3D rotation increment used in 3D Rotate Tool. Editor only. Default: 10
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DoubleBondWidth">
            <summary>
            Specifies the spacing between the two lines in double bonds 
            as a fraction of average bond length. It affects <c>Double Either</c> bonds as well.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Double bond width".
            Default: <c>0.18</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DrawChiralLabel">
            <summary>
            Deprecated in 1.2. 
            Use <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayChiralStereoLabels"/> instead.
            </summary>	
            <remarks><c>true</c> if chiral flags display.</remarks>		
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ForeColor">
            <summary>Specifies the color of the structure.
            Default: Black.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Foreground color".
            See Example 2 of the <see cref="T:MDL.Draw.Renderer.Renderer"/>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ForeColor"/></summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HighlightColor">
            <summary>
            Specifies the color that indicates a persistent collection. 
            Default: <c>Blue</c>.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Highlight color".
            See <see cref="P:MDL.Draw.Renderer.Renderer.HighlightInfo"/>
            Note: When the rendering component is hosted in Internet Explorer, 
            use hex in the JavaScript as BGR instead of RGB. 
            For example, this is magenta: 
            <c>MyRenditor.Preferences.HighlightColor = 0x0000ff;</c></summary>	
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ColorForMarkushSubstituent1">
            <summary>
            default color 1 for one to any atom
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ColorForMarkushSubstituent2">
            <summary>
            default color 2 for one to any atom
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ColorForMarkushSubstituent3">
            <summary>
            default color 3 for one to any atom
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ColorForMarkushSubstituent4">
            <summary>
            default color 4 for one to any atom
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HydrogenDisplayMode">
            <summary>
            Specifies whether and how to display implicit hydrogen atoms.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Show hydrogen labels".  
            For possible values and illustrations, 
            see the <see cref="T:MDL.Draw.Renderer.Preferences.HydrogenDisplayMode"/> enum.	
            Default: <c>HydrogenDisplayMode.Off</c>, which does not display implicit hydrogens.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PromptInvalidValence">
            <summary>
            Specifies whether to automatically check atom valences while the user edits 
            (and display the Valence Warning dialog if valence exceeded). 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Show  eValence exceeded f message h. 
            Default: <c>false</c>, which checks only when the user chooses Valence Check on the 
            Chemistry menu.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HapticBondDisplay">
            <summary>
            When Haptic bond display is turned on, atom's charge/radical display is suppressed and bonds are displayed as single order plus delocalized line. 
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HapticBondStyle">
            <summary>
            Specifies delocalized line style in Haptic bond structure. Solid/Dotted.
            Default: <c>HapticBondStyleMode.Solid</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont">
            <summary>Specifies the default font for chemistry labels: 
            Default: Arial 10 point.
            Affects the following: <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AbbreviationFontSize"/>, 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomLabelFontSize"/>, <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SGroupBracketFontSize"/>, 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SGroupDataFontSize"/>, <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SGroupLeavingFontSize"/>.
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ConfigLabelFont">
            <summary>Specifies the default font for stereoconfiguration labels: 
            Default: Arial 8 point.
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceLabelFont">
            <summary>Specifies the default font for sequence labels in sequence view: 
            Default: Courier New 12 pt.
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceLabelFontString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomLabelFontSize">
            <summary>
            Gets the size of the atom label font (read-only). 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/> sets this value.
            Default: 12.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AbbreviationFontSize">
            <summary>
            Gets the size of the font for abbreviation labels (read-only). 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/> sets this value.
            Default: 12. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SGroupLeavingFontSize">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer) 
            Gets the size of the font for leaving group labels (read-only).
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/> minus 3 sets this value.
            Default: 9.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SGroupDataFontSize">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer) 
            Gets the size of the font for Sgroup data (read-only).
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/> minus 3 sets this value.
            Default: 9.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SGroupBracketFontSize">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer) 
            Gets the size of the font for Sgroup bracket labels (read-only).
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/> minus 2 sets this value.
            Default: 10.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay">
            <summary>
            Displays the string set in 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureText"/> if <c>true</c> and 
            the molecule or reaction is a <c>no-structure</c>.
            Default: <c>true</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureText"/>
            </summary>
            <remarks>A <c>no-structure</c> is a molecule or reaction member
            that contains no atoms.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextColor">
            <summary>
            Specifies the color of the text to display 
            if the molecule or reaction is a <c>no-structure</c> and
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay"/> is set to <c>true</c>. 
            Default: <c>Black</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureText"/>
            </summary>
            <remarks>A <c>no-structure</c> is a molecule or reaction member
            that contains no atoms.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureText">
            <summary>
            Specifies the text string to display if the molecule or reaction 
            is a <c>no-structure</c> and
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay"/> is set to <c>true</c>.
            Default: <c>No Structure</c>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay"/>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextColor"/>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextFont"/>
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextSize"/>
            </summary>
            <remarks>A <c>no-structure</c> is a molecule or reaction member
            that contains no atoms.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextFont">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer) Specifies the font family to use for the text string that displays 
            if the molecule or reaction is a <c>no-structure</c> and
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay"/> is set to <c>true</c>.
            Default: Arial.
            For possible values, see the standard .NET documentation for
            <c>System.Drawing.FontFamily</c>.
            </summary>
            <remarks>A <c>no-structure</c> is a molecule or reaction member
            that contains no atoms.
            Note: Initially, this value is 
            related to <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/>, but if you change <c>ReactionCenterSize</c>,
            it is no longer related to <c>ChemLabelFont</c>.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextSize">
            <summary>
            Specifies the font size of the text string to display 
            if the molecule or reaction is a <c>no-structure</c> and
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay"/> is set to <c>true</c>.
            Default: 12 point.
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureDisplay"/>
            </summary>
            <remarks>A <c>no-structure</c> is a molecule or reaction member
            that contains no atoms.
            Note: Initially, this value is 
            related to <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/>, but if you change <c>ReactionCenterSize</c>,
            it is no longer related to <c>ChemLabelFont</c>.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.OutlineColor">
            <summary>
            Specifies the color of the border around the structure display area. 
            Default: no color is set
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PiBondRendering">
            <summary>
            Specifies how to display <c>pi-metal</c> bonds. 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display pi-metal bonds". 
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.PiBondRenderingMode"/> enum. 
            Default: <c>PiBondRenderingMode.SingleBond</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PolBead">
            <summary>
            Specifies how to indicate the atom(s) that bind this structure to a polymer.
            <ul><li>Default: <c>true</c>, which displays the "Pol" atoms as circles.
            <img src="images/pol-label.gif"></img></li>
            <li>If <c>true</c>, displays atoms of type
            <c>Pol</c> as filled circles that resemble beads.
            <img src="images/polbead.gif"></img>
            </li></ul>
            Note: Do not confuse <c>Pol</c> atoms with the <c>POL</c>
            Flexmatch switch for polymers.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ReactionCenterSize">
            <summary>
            Specifies the size of the marks that show bond reaction centers 
            as a fraction of average bond length. 
            Default: <c>0.6</c> 
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomAtomMappingDisplay"/>
            </summary>
            <remarks>
            <para>Affects all the marks for bond role.</para>
            <para><img src="images/ReactionCenterSize.gif"></img></para>
            <para>Increasing the size increases both the length and the spacing of the 
            lines in the marks.</para>
            For more information, see "reacting center marks" in the Symyx 
            Cheshire documentation.
            Note: 
            Initially, this value is 
            related to <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/>, but if you change <c>ReactionCenterSize</c>,
            it is no longer related to <c>ChemLabelFont</c>.
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.RGMemberHorizontalOffset">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Specifies the spacing to the right of each Rgroup label's equals sign 
            and its corresponding Rgroup member fragment as a fraction of 
            average bond length. Default: <c>1.5</c></td></tr>
            <tr><td>The image below shows a value of <c>2.0</c></td></tr>
            <tr><td><img src="images/RGMemberHorizontalOffset-2.gif"></img></td></tr>
            <tr><td>The image below shows a value of <c>0.2</c></td></tr>
            <tr><td><img src="images/RGMemberHorizontalOffset-point2.gif"></img></td></tr>
            </table>
            </summary>
            <remarks>
            <ul><li>Also applies to the distance between Rgroup member 
            fragments. </li>
            <li>The Rgroup definition consists of the Rgroup label, 
            an equals sign, and one or more Rgroup member fragments.</li>
            <li>If you change this property, Symyx Draw renders the change 
            when the structure is (re)loaded from file.</li></ul>
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.RGMemberVerticalOffset">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Specifies the vertical spacing between the root structure and 
            the Rgroup definition(s) as a fraction of average bond length.
            Default: <c>0.75</c>.</td></tr> 
            <tr><td>The image below shows a value of <c>2.0</c></td></tr>
            <tr><td><img src="images/RGMemberVerticalOffset-2.gif"></img></td></tr>
            <tr><td>The image below shows a value of <c>0.2</c></td></tr>
            <tr><td><img src="images/RGMemberVerticalOffset-point2.gif"></img></td></tr>
            </table></summary>
            <remarks><ul><li>This offset spacing is between the root structure and the first
            definition as well as between first Rgroup definition and any other Rgroup 
            definitions.</li>
            <li>The Rgroup definition consists of the Rgroup label, 
            an equals sign (=), and one or more Rgroup member fragments.</li>
            <li>If you change this property, Symyx Draw renders the change 
            when the structure is (re)loaded from file.</li></ul>
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShowAbbrevIndicator">
            <summary>
            <table class="dtTABLE" border="0">        
            <tr><td>For expanded abbreviation Sgroups: Displays bracket ([) if <c>true</c>. 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Show indicator if expanded".
            Default: <c>false</c>.</td></tr>
            <tr><td>The image below has a bracket near the label <c>COOH</c> 
            to indicate which atoms are contained in the Sgroup.</td></tr>
            <tr><td><img src="images/ShowAbbrevIndicator.gif"></img></td></tr>
            </table></summary>
            <remarks>In Symyx Draw, an abbreviation Sgroup is one type of 
            <c>template</c>. See also <c>template</c> in the Symyx Draw Help index or 
            <c>residue brackets</c> in the ISIS/Draw Help index.
            <para>See also <see cref="T:MDL.Draw.Renderer.Preferences.AbbreviationDisplayMode"/></para></remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayRS">
            <summary>
            Specifies whether display the stereo configuration labels (R/S).
            Default value in Symyx Draw Renderer is false. It can be turned on for all structures.
            Symyx Draw Editor's behavior will be controlled by the "Show Stereoconfiguration" menu. If DisplayRS setting is On, it'll always show the labels though to make the Renditor's display consistent.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.RLabelAtOrCenter">
            <summary>
            Specifies the label for R at Or Centers. Default: (R)
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SLabelAtOrCenter">
            <summary>
            Specifies the label for S at Or Centers. Default: (S)
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.RLabelAtAndCenter">
            <summary>
            Specifies the label for R at And Centers. Default: R*
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SLabelAtAndCenter">
            <summary>
            Specifies the label for S at And Centers. Default: S*
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.RLabelAtAbsCenter">
            <summary>
            Specifies the label for R at Abs Centers. Default: R
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SLabelAtAbsCenter">
            <summary>
            Specifies the label for S at Abs Centers. Default: S
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayEZ">
            <summary>
            Specifies whether to display the stereo configuration labels (E/Z).
            Default value in Symyx Draw Renderer is false. It can be turned on for all structures.
            Symyx Draw Editor's behavior is controlled by the "Show Stereoconfiguration" menu. 
            If DisplayEZ setting is On, always shows the labels to make the Renditor's display consistent.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.KeepRSLabelsInSketch">
            <summary>
            Whether to write Stereo configuration labels (R/S/E/Z) when writing Sketch file. Default: true        
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ConvertRingBondIntoOneToMany">
            <summary>
            Convert the following bonds when saving the structure: pi bonds to haptic bonds, and positional uncertainty to Markush. Default: false.      
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShowSequenceBond">
            <summary>
            Horizontal bonds between adjacent sequence abbreviations is hidden by default.
            To show such horizontal bonds, set to <c>true</c>. Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShowSequenceWrappingBond">
            <summary>
            Wrapping bonds between adjacent lines of sequence abbreviations are hidden by default.
            To show such bonds, set to <c>true</c>. Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShowSequenceCyclicBond">
            <summary>
            Cyclic bonds between terminal sequence abbreviations are displayed by default.
            To hide such bonds, set to <c>false</c>. Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ShowSequenceView">
            <summary>
            Decide whether display in sequence view (true) or in structure view (false)
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.MakeSequenceToolCaseSensitive">
            <summary>
            Sequence tool is NOT case sensitive by default. 
            If this setting is <c>true</c>, typing text in sequence tool will search templates in case sensitive way. Default: <c>false (Not case sensitive)</c>
            Editor only.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplaySequenceBlockNumber">
            <summary>
            If this setting is <c>true</c> and there is sequence block size set, colum number at the end of each block is displayed at the top of the sequence.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.WriteSequenceMolfileAsFullCTAB">
            <summary>
            if false will write sequences as Self Contained Sequence representation. if true use the older Full CTAB format.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplaySequenceLineNumber">
            <summary>
            If this setting is <c>true</c>, multiple line Sequence is displayed with line numbers at the beginning of each row of sequences
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceSpacing">
            <summary>
            Spacing between Sequence residue labels in Sequence display. Default: 0.5, which is 20 points.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceSpacingWithUnit">
            <summary>
            Spacing between Sequence residue labels in cm, inch, or point. Default: 12 pt.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceBlockSpacing">
            <summary>
            Block spacing between Sequence residue labels in Sequence display. Default: 1, which is 20 points.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceBlockSpacingWithUnit">
            <summary>
            Block spacing between Sequence residue labels in cm, inch, or point. Default: 20 pt.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceLineSpacing">
            <summary>
            Spacing between Sequence residue lines in Sequence view from the top of one line to the top of the next line. 
            Default: 1, which is 24 points.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceLineSpacingWithUnit">
            <summary>
            Spacing between Sequence residue lines in cm, inch, or point. Default: 24 pt.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayChain">
            <summary>
            If this setting is <c>true</c>, Chain is displayed in Sequence.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisulfideBondColor">
            <summary>Specifies the color of the disulfide bond in sequence in sequence view.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CrosslinkDefaultColor">
            <summary>Specifies the color of the crosslink in sequence in sequence view.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CrosslinkLactamColor">
            <summary>Specifies the color of the crosslink that forms lactam bridge in sequence. Default: Blue</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CrosslinkLactoneColor">
            <summary>Specifies the color of the crosslink that forms lactone bridge in sequence.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.MutatedSequenceBackColor">
            <summary>Specifies the background color of the mutated label in sequence view.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.MutatedSequenceLabelColor">
            <summary>Specifies the color of the mutated label in sequence view.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ModifiedSequenceColor">
            <summary>Specifies color of the modified residue in sequence in sequence view.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceLabelColor">
            <summary>Specifies the color of the variants in sequence in sequence view.</summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChainColor">
            <summary>
            Color of the main chain types like Chain or Peptide in sequence structure in Sequence view. 
            Default: LightGreen
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChainAlternateColor">
            <summary>
            Alternate color of the main chain types like Chain or Peptide in sequence structure in Sequence view. 
            Default: LightBlue
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChainAdditionalColor">
            <summary>
            Color of additional chain types like Propeptide, Signal Peptides, or Transit Peptides in sequence structure in Sequence view.  
            Default: Wheat.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength">
            <summary>
            Specifies the average length of bonds in sketch units (deci-points).
            For default value and legal range, see <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLengthWithUnit"/>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLengthWithUnit">
            <summary>
            Specifies the average length of bonds in cm, inch, or point.  
            Corresponds to GUI's <c>Options</c>, <c>Settings</c> dialog's "Standard bond length".
            See <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>. Legal values are between 0.02 cm and 25 cm, which 
            equates to a legal range in sketch units of 5.67 to 7086.
            Default: <c>1 cm</c>, which is 283.46 sketch units because a sketch unit is 1/720th of an inch.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoAbsColor">
            <summary>
            Specifies the color of the label for Absolute stereogroups.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Set color of absolute centers".
            Default: <c>Red</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoAbsLabel">
            <summary>
            Specifies the text character(s) to display for absolute stereochemical labels.
            Default: <c>abs</c></summary>
            <remarks>The <c>abs</c> stereochemical label means that the
            absolute configuration of that tetrahedral
            stereogenic center is known.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoAndColor">
            <summary>
            Specifies the color of the label for <c>And</c> stereogroups.
            default: <c>MediumBlue</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoAndLabel">
            <summary>
            Specifies the text character(s) to display before 
            the integer for an <c>AND</c> group. 
            Default: <c>&#38;</c>
            </summary>
            <remarks>An <c>AND</c> group is a set of stereogenic centers 
            that represents a mixture of two possible stereoisomers in 
            which the relative configuration of all the centers is known.
            The label consists of text character(s) followed by an integer. 
            For example: <c>&#38;1, &#38;2, &#38;3</c>...
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoBoxSize">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Specifies the length of a side for the boxes drawn around stereo centers 
            as a fraction of average bond length. Default: <c>0.3</c></td></tr>
            <tr><td><img src="images/StereoBoxSize.gif"></img></td></tr>
            </table></summary>	
            <remarks>The end-user can create this box by right-clicking a double-bond and 
            choosing "E/Z geometric double bond as drawn."</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoGroupDisplay">
            <summary>
            Sets the option for displaying color on stereogroup labels and/or bonds. 
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Color stereogenic centers".
            Default: <c>StereoGroupDisplayMode.LabelsOnly</c>  
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.StereoGroupDisplayMode"/> enum.
            </summary>	
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoChemistryMode">
            <summary>Decides default stereochemistry on drawing. Default: <c>StereoChemistryModeEnum.Absolute</c>.
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.StereoChemistryModeEnum"/> enumeration.
            </summary>	
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoOrColor">
            <summary>
            Specifies the color of the label for <c>Or</c> stereogroups.
            Default: <c>ForestGreen</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoOrLabel">
            <summary>
            Specifies the text character(s) to display for an <c>OR</c> group.
            Default: <c>Or</c>
            </summary>
            <remarks>An <c>OR</c> group (<c>or1, or2, or3</c>...) 
            is a set of stereogenic centers
            for which what is known is the relative configuration
            rather than the exact enantiomer.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StructureScalingMode">
            <summary>
            Specifies how to size of the structure in relation to the display area.
            Default: <c>StructureScalingMode.ScaleToStdBond</c>.  
            For possible values, see the  
            <see cref="T:MDL.Draw.Renderer.Preferences.StructureScalingMode"/> enum.
            Note: This setting can affect how the <c>Paint</c> method of 
            <see cref="T:MDL.Draw.HeadlessRenderer.HeadlessRenderer"/> works.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.WedgeWidth">
            <summary>
            Specifies the width of the wide end of wedge bonds in units of one-third of an inch. 
            This value affects <c>Up</c> bonds, <c>Down</c> bonds and <c>Either</c> bonds. 
            With <c>WedgeWidthWithUnit</c> and <c>WedgeWidth</c>, changing one also changes the other.
            Default: 0.10416666666666667 in units of one-third of an inch, which corresponds to 2.5 points.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.WedgeWidthWithUnit">
            <summary>
            Specifies the width of the wide end of wedge bonds in cm, inch, or point.
            Corresponds to "Stereo (Wedge) bond width" in the GUI's <c>Options</c>, <c>Settings</c> dialog.
            This value affects <c>Up</c> bonds, <c>Down</c> bonds and <c>Either</c> bonds. 
            With <c>WedgeWidthWithUnit</c> and <c>WedgeWidth</c>, changing one also changes the other.
            Default: <c>2.5 point</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AutoResetToSelectTool">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer)
            If <c>true</c>, when the end-user places a template on the canvas, 
            the Lasso select tool becomes the active tool.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Auto-reselect Lasso tool".
            If <c>false</c>, the template remains the active tool (and the end-user can 
            paste another copy of that template on the canvas).
            Default: <c>true</c>.</summary> 
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayTerminalGroup">
            <summary>
            Specifies whether to display the terminal leaving groups for sequences.
            It applies to sequences of type "AA" "DNA" and "RNA". 
            Default: <c>true</c>.
            </summary>
            <remarks>Even when the terminal groups are not displayed (<c>false</c>), 
            terminal groups remain in the structure. To remove them from the structure, 
            you must delete each terminal group manually. See also <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayInternalLeavingGroup"/></remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplaySulfurInCysSequence">
            <summary>
            Specifies whether to display sulfur atom of Cys sequence when contracted.
            Default: <c>false</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayInternalLeavingGroup">
            <summary>
            Deprecated in 3.2. 
            Use <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayInternalGroup"/> instead.
            </summary>	
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayInternalGroup">
            <summary>
            Specifies whether or how to display the internal leaving groups in a sequence abbreviation.
            Corresponds to the GUI's Options, Settings dialog's Sequences, "Display Internal leaving group".
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.InternalGroupDisplayMode"/> enum.
            Default: <c>HideAll</c>
            </summary>
            <remarks>See also <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayTerminalGroup"/></remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceGroupWrapSize">
            <summary>
            If this value is greater than 0, sequence will wrap to the next line after this number of sequence input. '0' means no wrapping.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceGroupBlockSize">
            <summary>
            If this value is greater than 0, Blocks of this number of sequences will be created in the sequence structure. '0' means no blocking.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayStarAtom">
            <summary>
            Specifies whether to display the star atoms as star(*) or zigzag line.
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.StarAtomDisplayMode"/> enum. 
            Default: <c>ZigZag</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DefaultFileFormat">
            <summary>
            Specifies default file format on save
            Default: <c>Automatic</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisplayRgroupAttachment">
            <summary>
            Specifies whether to display the Rgroup attachment as arrow/star or line/zigzag line.
            Default: <c>line/zigzag</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ColorAtomsByType">
            <summary>
            Whether to color the atoms according to their type. Default: true
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ColorAtomsByTypeInSketch">
            <summary>
            Whether to color the atoms according to their type when writing Sketch file. Default: false
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AutoResetAtomToolStripToCOnToolExit">
            <summary>
            Whether to auto-reset toolstrip to C when leaving atom tool. Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.IgnoreCaretOnAbbreviationName">
            <summary>
            Whether to ignore the caret(^) in the abbreviation name. Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AbbreviationDisplay">
            <summary>
            This property is obsolete. Use <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TypeInAbbreviationInitialDisplay"/> instead. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TypeInAbbreviationInitialDisplay">
            <summary>
            (For Editor and Renditor, not Renderer or HeadlessRenderer)  
            Specifies whether template groups (abbreviation Sgroups) that the 
            end-user creates with keyboard sprouting display as 
            <c>Abbreviated</c> or <c>Expanded</c>, and corresponds to the GUI's 
            <c>Contract Abbreviation</c> checkbox. 
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.AbbreviationDisplayMode"/> enum. 
            Default: <c>AbbreviationDisplayMode.Abbreviated</c></summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomHighlightDotWidth">
            <summary>
            <table class="dtTABLE" border="0">
            <tr><td>Sets the size of the dot that highlights implicit carbons atoms in a persistent HILITE collection  
            as a fraction of bond length. Default: <c>0.0</c></td></tr>
            <tr><td><img src="images/atomhighlightdotwidth.gif"></img></td></tr>
            </table>
            </summary>
            <remarks>Cheshire Studio can also show this. A common value is <c>0.1</c>. 
            This preference also be set in the MDLDraw-net.xml configuration file.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomRxnStereoMarkerDisplay">
            <summary>
            Display <c>.inv</c> and <c>.ret</c> marks if <c>true</c>.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Display stereo markers".
            Default: true
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondLineThickness">
            <summary>Specifies the thickness of bonds in point. 
            With <c>BondLineThicknessWithUnit</c> and <c>BondLineThickness</c>, changing one also changes the other.
            Default: 1 point 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BondLineThicknessWithUnit">
            <summary>
            Specifies the thickness of bond lines in cm, inch, or point.
            Corresponds to "Bond line thickness" in the Settings dialog.
            With <c>BondLineThicknessWithUnit</c> and <c>BondLineThickness</c>, changing one also changes the other.
            Default: <c>1 point</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.LineThickness">
            <summary>Specifies the thickness of lines in point. 
            With <c>LineThicknessWithUnit</c> and <c>LineThickness</c>, changing one also changes the other.
            Default: 0.7 point 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.LineThicknessWithUnit">
            <summary>
            Specifies the thickness of line in cm, inch, or point.
            Corresponds to "Line thickness" in the Settings dialog.
            With <c>LineThicknessWithUnit</c> and <c>LineThickness</c>, changing one also changes the other.
            Default: <c>0.7 point</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ReactionCenterLabelSize">
            <summary>Height of text used to show bond reaction centers as a fraction of average bond length. 
            Default: 0.45
            </summary>
            <remarks>Initially, this value is 
            related to <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChemLabelFont"/>, but if you change <c>ReactionCenterSize</c>,
            it is no longer related to <c>ChemLabelFont</c>.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.RxnMemberHorizontalOffset">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SelectLastDrawnItems">
            <summary>
            If <c>true</c>, the Editor automatically selects
            the last drawn items from the drawing tools.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Select last drawn item".
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TemplateEditorInvokingGesture">
            <summary>
            Renditor only: Gesture to invoke the Template Editor. 
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.TemplateEditorInvokingGestures"/> enum. 
            Default: <c>TemplateEditorInvokingGestures.DoubleClick</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextBorder">
            <summary>
            Specifies the margin width around the text to the bond in units of one third of an inch. 
            With <c>TextBorderWithUnit</c> and <c>TextBorder</c>, changing one also changes the other.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextBorderWithUnit">
            <summary>
            Specifies the width of the margin around the text to the bond in cm, inch, or point.
            Corresponds to the GUI's <c>Options</c>, <c>Settings</c> dialog's "Atom label margin".
            With <c>TextBorderWithUnit</c> and <c>TextBorder</c>, changing one also changes the other.
            Default: <c>1.5 point</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ForceV3000">
            <summary>
            (for Editor and Renditor, not for Renderer or HeadlessRenderer) 
            Causes the output to be in V3000 format.
            For details, see "Automatic V3000 Output" in The Extended Connection Table (V3000) chapter of the CTfile Formats document: 
            <a href="http://www.mdl.com/solutions/white_papers/ctfile_formats.jsp" target="RefPage">http://www.mdl.com/solutions/white_papers/ctfile_formats.jsp</a> 
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SketchHeaderPropertyOnPaste">
            <summary>
            Specifies whether to display according to sketch header properties.
            Sketch header properties include default color for foreground, line, and fill 
            as well as default font (font family, font size, font color).
            NOTE:This preference only applies when a copied sketch is pasted into Symyx Draw.        
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.SketchHeaderPropertyMode"/> enum. 
            Default: <c>SketchHeaderPropertyMode.Ask</c></summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.PromptOnFuse">
            <summary>
            (for Editor and Renditor, not for Renderer or HeadlessRenderer) 
            If true, Editor prompts the end-user before fusing atoms.
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SketchStringEncoding">
            <summary>
            Which encoding to use when reading and writing Sketch files. Default: Local encoding.
            For possible values, see the <see cref="T:MDL.Draw.Renderer.Preferences.SketchStringEncodingMode"/> enum. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CopyToClipboardOnStructureToText">
            <summary>
            Whether the text should be placed in clipboard when using Structure to Text, such as SMILES or IUPAC name
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChiIncludeAuxInfoInInChIString">
            <summary>
            InChI: include AuxInfo in InChI string - default <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChiIncludeInChiInEqualsInInChIString">
            <summary>
            Inchi: prefix InChI= in InChI string - default <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChiPerformInChIKeySearch">
            <summary>
            InChI perform key search mode - default <c>Full</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChISearchURL">
            <summary>
            InChI search URL - default <c>inchidefaultsearchurl</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.NoStructureTextColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoAbsColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoOrColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StereoAndColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.SequenceLabelColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChainColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChainAlternateColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ChainAdditionalColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ModifiedSequenceColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.MutatedSequenceLabelColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.MutatedSequenceBackColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.DisulfideBondColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CrosslinkLactamColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.CrosslinkLactoneColorString">
            <exclude/>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlInitialFont">
            <summary>Specifies the default font for the text control.
            Default: Arial 12 point
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlBorderColorForEditMode">
            <summary>Specifies the color of the text control border in edit mode
            when the text control remains at the predefined size.
            Default: Green
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlBorderColorForEditAutoResize">
            <summary>Specifies the color of the text control border in edit mode 
            when the text control resizes itself to contain what the user types.
            Default: PaleGreen
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlBorderPenWidth">
            <summary>
            Specifies the text control border pen width: default <c>2</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlBorderPenWidthForEditMode">
            <summary>
            Specifies the text control border pen width for edit mode: default <c>2</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlBorderGap">
            <summary>
            Specifies the text control border gap: default <c>2</c>
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlBorderColorInactive">
            <summary>Specifies the color of the text control border when control is not in edit mode.
            </summary>  
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.TextControlResetAttributesInNewControl">
            <summary>
            Whether to reset the text attributes in a new control. 
            If true (end-user presses Ctrl key when creating a new text box), text attributes follow Settings. 
            If false (end-user does not presses Ctrl key when creating a new text box), text attributes follow those of previous text box. 
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ResetToDefaultToolAfterUsingAnotherTool">
            <summary>
            Whether to reset to the default tool after using another tool (Select tool is the initial default tool). 
            Corresponds to Reset to Select tool in the Settings dialog. 
            Default: false
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColor">
            <summary>
            Color of the atom label. Default: Black
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColor.Symbol">
            <summary>
            Atom symbol (atom label), such as N for Nitrogen
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColor.Color">
            <summary>
            Color of the atom label (atom symbol). Default: Black
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColor.GetSchema">
            <summary>
            Internal Use Only. Do Not Use in Your Application.
            Implements the .NET Framework <c>IXmlSerializable</c> Interface
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColor.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Internal Use Only. Do Not Use in Your Application.
            Implements the .NET Framework <c>IXmlSerializable</c> Interface
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColor.ReadXml(System.Xml.XmlReader)">
            <summary>
            Implements the .NET Framework <c>IXmlSerializable</c> Interface
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColorList">
            <summary>
            Internal Use Only. Do Not Use in Your Application.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColorList.GetSchema">
            <summary>
            Internal Use Only. Do Not Use in Your Application.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.DisplayPreferences.AtomColorList.ReadXml(System.Xml.XmlReader)">
            <summary>
            Internal Use Only. Do Not Use in Your Application.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DisplayPreferences.CoordinationBondDefaultDisplayType">
            <summary>
            Specifies how to display a coordination bond, which is a type of zero-order bond.
            Default: DATIVE
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.CoordinationBondDefaultDisplayType.COORD">
            <summary>
            rendered like a single bond (has no arrow tip)
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.CoordinationBondDefaultDisplayType.DATIVE">
            <summary>
            rendered like a single bond with an arrow tip
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChIPerformKeySearchMode">
            <summary>
            Specifies the constants to use when seting the value of the 
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChiPerformInChIKeySearch"/> property.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChIPerformKeySearchMode.Off">
            <summary>
            Use internal InChI instead of a search at the <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChISearchURL"/> 
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChIPerformKeySearchMode.Partial">
            <summary>
            Uses the 14 characters resulting from a hash of the connectivity information, 
            and can make use of <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChiPerformInChIKeySearch"/>
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChIPerformKeySearchMode.Full">
            <summary>
            Uses all 25 characters from a hash of the full InChI,
            and can make use of <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.InChiPerformInChIKeySearch"/>
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.PreferenceConverter">
            <summary>
            This is TypeConverter for DisplayPreferences class. It inter-converts DisplayPreferences and String.
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.PreferenceConverter.xml_serializer">
            <summary>The singleton instance of XML serializer.
            We should avoid creating XmlSerializer just temporary per need,
            since it is expensive, and each instance is a slight memory leak.
            More info http://weblogs.asp.net/cschittko/archive/2004/02/11/71649.aspx
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.DrawFontTypeConverter">
            <exclude/>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.NamespaceDoc">
            <summary>
            Contains the DisplayPreferences class, which represents a superset of 
            what is available to the end-user on the Settings dialog on the Options menu.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.TypeEditors.NamespaceDoc">
            <summary>
            Contains any custom types related to <c>DisplayPreferences</c>.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnitEditorControl">
            <summary>
            This is a custom editor for PropertyGrid for NumberUnit type properties.
            Inspired by http://msdn2.microsoft.com/en-us/library/ms171840.aspx
            </summary>
        </member>
        <member name="F:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnitEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnitEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnitEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnitEditorControl.NumberUnit">
            <summary>
            Gets and sets the number value and unit for use with certain DisplayPreferences properties. 
            For example, you can set the <c>StandardBondLengthWithUnit</c> to a number value and unit 
            such as 1.1 cm.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit">
            <summary>
            A class that includes number portion (double) and unit portion (Units). 
            It can be used for measurement properties in <c>DisplayPreferences</c>, such as 
            setting a <c>StandardBondLengthWithUnit</c> of 1.1 centimeter.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.#ctor(System.Double,MDL.Draw.Renderer.Preferences.Units)">
            <summary>
            Constructor with number and unit.
            </summary>
            <param name="num">a double value, such as 2.5</param>
            <param name="unit">unit of measurement</param>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.CopyTo(MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit)">
            <summary>
            Copies the values of one instance to another.
            </summary>
            <param name="target">to object that will be copied TO</param>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.#ctor">
            <summary>
            Constructor with no arguments
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.ConvertUnit(MDL.Draw.Renderer.Preferences.Units)">
            <summary>
            Converts the <c>Number</c>to the specified unit.
            </summary>
            <param name="unit">The unit to convert the <c>Number</c>to</param>
        </member>
        <member name="M:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.ToString">
            <summary>
            Returns a string that represents the number and unit.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.Number">
            <summary>
            Contains the numeric value portion of the <c>NumberUnit</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.Unit">
            <summary>
            Gets and sets the unit portion of the <c>NumberUnit</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.NumberInCm">
            <summary>
            Gets in centimeters the numeric portion of <c>NumberUnit</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.NumberInInch">
            <summary>
            Gets in inches the numeric portion of <c>NumberUnit</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.NumberInPoint">
            <summary>
            Gets in points the numeric portion of <c>NumberUnit</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Preferences.TypeEditors.NumberUnit.NumberInDecipoint">
            <summary>
            Gets in decipoints the numeric portion of <c>NumberUnit</c>.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.NamespaceDoc">
            <summary>
            Contains the Renderer class, IRendererEvents interface, and DoubleClickedEventHandler delegate.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.DoubleClickedEventHandler">
            <summary>
            The delegate for listening to the user action of a double-click on a renderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.IRendererEvents">
            <summary>
            Contains the <c>ComDoubleClicked</c> method to 
            support listening to the user action of a double-click on a renderer.
            </summary>
            <remarks>The JScript <c>ondblclick</c> does not work in this case.
            See the Demo Renderer Double Clicked Event example, which is 
            <c>RendererDoubleClicked.htm</c> inside the <c>IE</c> subdirectory 
            of the <c>Examples</c> directory.</remarks>
        </member>
        <member name="M:MDL.Draw.Renderer.IRendererEvents.ComDoubleClicked">
            <summary>
            Listens for the user action of a double-click on a renderer.
            See the Demo Renderer Double Clicked Event example, which is 
            <c>RendererDoubleClicked.htm</c> inside the <c>IE</c> subdirectory 
            of the <c>Examples</c> directory.
            </summary>
        </member>
        <member name="T:MDL.Draw.Renderer.Renderer">
             <summary>
             Enables your application to have a Renderer control
             that displays molecules and reactions. The Renderer can also set and share
             display preferences (for example, how aromatic rings display,
             how big the structure displays).
             <seealso cref="T:MDL.Draw.HeadlessRenderer.HeadlessRenderer"/>
             <seealso cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/>
             </summary>
             <remarks>About the Renderer: 
             <ul><li> The Renderer is different from both of the following:
             MDL.Draw.HeadlessRenderer.<see cref="T:MDL.Draw.HeadlessRenderer.HeadlessRenderer"/>
             which does not require a display device, and
             <a href="MDL.Draw.Renditor.Renditor.html">MDL.Draw.Renditor.Renditor</a>,
             which is a Renderer that can launch an Editor</li>
             <li>The Renderer synchronizes the three String representations with each other.
             For example, if you do a "set" operation that
             changes the <c>MolfileString</c>, and then do a "get" operation on
             the corresponding <c>ChimeString</c>, and <c>SmilesString</c>, they are up-to-date
             with the change.</li>
             <li>If you pass the Renderer a <c>MolfileString</c>, <c>ChimeString</c>, or
             <c>SmilesString</c>, or <c>SketchString</c>, the <c>FileName</c> remains empty until you set
             the <c>FileName</c>.</li>
             <li>To specify the name of the Display Preferences file that the Renderer uses, use 
             <see cref="P:MDL.Draw.Renderer.Renderer.PreferencesFileName"/></li>
             <li>The Renderer displays according to the settings of <c>DisplayPreferences</c>, except that 
             if an end-user changes the defaults in the Settings dialog on the Options menu, the 
             changes are written to <c>default.xml</c>. See 
             Symyx Draw Configuration Guide &gt; MDLDraw-net.xml &gt; Descriptions of Elements &gt; DisplayPreferences and 
             Symyx Draw Configuration Guide &gt; Symyx Draw Configuration Tasks &gt; Synchronizing Display Settings</li>
            </ul>
             To get and set:
             <ul><li>Resizing behavior: by default, <see cref="P:MDL.Draw.Renderer.Renderer.AutoSizeStructure"/> resizes a structure if its average bond length is more than 10% different 
             from MDL.Draw.Renderer.Preferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>.</li> 
             <li>display options programmatically, use the
             MDL.Draw.Renderer.Preferences.<see cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/> subproperties on the
             MDL.Draw.Renderer.Renderer.<see cref="P:MDL.Draw.Renderer.Renderer.Preferences"/>
             defining property. See Example 4 below.</li>
             <li>the color of the structure, use
             <see cref="P:MDL.Draw.Renderer.Renderer.ForeColor"/> on the Renderer, and to get and set the color
             of the background, use
             <see cref="P:MDL.Draw.Renderer.Renderer.BackColor"/> on the Renderer</li>
             <li>the molecule or reaction to and from a file,
             use <see cref="P:MDL.Draw.Renderer.Renderer.FileName"/></li>
             <li>the molecule or reaction to and from a text string, use
             <see cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/>, the Symyx chemical table format;
             <see cref="P:MDL.Draw.Renderer.Renderer.ChimeString"/>, the Symyx Chime format; and
             <see cref="P:MDL.Draw.Renderer.Renderer.SmilesString"/>, the <c>SMILES</c> molecular structure
             specification format described at
             <a href="http://www.daylight.com/smiles/" target="RefPage">http://www.daylight.com/smiles/</a>
             </li>
             <li>the atoms and bonds in a persistent collection, use
             <see cref="P:MDL.Draw.Renderer.Renderer.HighlightInfo"/></li>
             <li>a molfilestring encoded for HTTP transfer, use <see cref="P:MDL.Draw.Renderer.Renderer.URLEncodedMolfileString"/></li>
             <li>a Metafile of the current structure, use <see cref="P:MDL.Draw.Renderer.Renderer.Metafile"/></li>
             <li>the type of border to paint around a Renderer control, use <see cref="P:MDL.Draw.Renderer.Renderer.RendererBorderStyle"/></li></ul>
             Other tasks:
             <ul><li>To listen to any change of the structure rendered 
             (for example, changing which
             structure is rendered), use the <see cref="E:MDL.Draw.Renderer.Renderer.StructureChanged"/> event</li>
             <li>To listen to the end-user double-clicking on a renderer, 
             use the <see cref="T:MDL.Draw.Renderer.DoubleClickedEventHandler"/> event</li>
             <li>To determine if the current structure is a reaction,
             use <see cref="P:MDL.Draw.Renderer.Renderer.IsReaction"/></li>
             <li>To work with the Windows Clipboard, use
             <see cref="M:MDL.Draw.Renderer.Renderer.CopyToClipboard"/>, <see cref="M:MDL.Draw.Renderer.Renderer.PasteFromClipboard"/>,
             <see cref="P:MDL.Draw.Renderer.Renderer.CanCopy"/>, and <see cref="P:MDL.Draw.Renderer.Renderer.CanPaste"/></li>
             <li>To print, use <see cref="M:MDL.Draw.Renderer.Renderer.DoPrint"/>, and to preview before printing
             or select the printer, use <see cref="M:MDL.Draw.Renderer.Renderer.DoPrintPreview"/></li>
             <li>To get a bitmap of the current structure, use <see cref="P:MDL.Draw.Renderer.Renderer.Image"/></li>
             <li>To get a file that contains the current structure in a different format,
             use the properties of .NET's
             System.Drawing.Imaging.<see cref="T:System.Drawing.Imaging.ImageFormat"/>.
             For example, suppose you have a bitmap image and want a gif file:
             <c>myRenderer.Image.Save(myFile.gif, ImageFormat.Gif);</c></li>
             <li>To convert a String representation of a structure to a different flavor of
             String representation, use
             MDL.Draw.StructureConversion.<see cref="T:MDL.Draw.StructureConversion.StructureConverter"/></li>
             <li><b>Warning:</b> When you export structures in <c>SMILES</c> format,
             the following features are NOT exported: query features, pseudoatoms, 
             radicals, valences, E/Z stereochemistry, Rgroups, attached data and brackets,
             no-structures, atom coordinates, highlighted collection, non-tetrahedral stereochemistry,
             non-abs stereochemistry, reaction-related features.
             If you require these features, save your structure as a molfile.
             </li>
             <li>(Biopolymer-related) For subsequence searching against a database,
             to get a <c>chimestring</c>, use <see cref="P:MDL.Draw.Renderer.Renderer.ChimeStringForSubsequenceQuery"/>, 
             and to get a molfile string, use <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringForSubsequenceQuery"/></li>
             <li>To customize the right-click menu, use <see cref="P:MDL.Draw.Renderer.Renderer.CopyingEnabled"/> and <see cref="P:MDL.Draw.Renderer.Renderer.PastingEnabled"/>. 
             (The right-click menu uses the .NET 2.0 <c>ContextMenuStrip</c> class.)</li></ul>
             <example>Example 1: Open a molfile from the File menu and render its structure.
             <code>
            Private Sub OpenFileDialog_FileOk(ByVal sender As System.Object,
            ByVal e As System.ComponentModel.CancelEventArgs) Handles OpenFileDialog.FileOk
            myRenderer.FileName = OpenFileDialog.FileName
            End SubPrivate
            </code></example>
             <example>
             Example 2: Set values on the subproperties of the Renderer's Preference property.
             <code>
             myRenderer.Preferences.AromaticRingCircles = True
             // use the enum HydrogenDisplayMode
             myRenderer.Preferences.HydrogenDisplayMode = MDL.Draw.Renderer.Preferences.HydrogenDisplayMode.All
             // BackColor and ForeColor can also be set on the the Renderer.
             myRenderer.Preferences.BackColor = System.Drawing.Color.Gold
             myRenderer.Preferences.ForeColor = System.Drawing.Color.DarkMagenta
             </code></example>
            <example>Example 3: Open a molfile with the <see cref="P:MDL.Draw.Renderer.Renderer.FileName"/> property and
             set the MDL.Draw.Renderer.Preferences.DisplayPreferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.HighlightColor"/> for persistent collections.
             <code>
             myRenderer.FileName = "test2.mol";
             myRenderer.Preferences.HighlightColor = System.Drawing.Color.Red;</code></example>
             <img src="images/highlightinfo2.gif"></img> 
             <example>Example 4: Synchronize Preferences among components.
             <code>
             // create a DisplayPreferences object and share it among
             // the Renderer and Editor
             DisplayPreferences prefs = new DisplayPreferences();
             myEditor.Preferences = prefs;
             myRenderer.Preferences = prefs;
             </code></example>
             <example>
             Example 5: Clear the canvas (nothing rendered).
             <code>
             myRenderer.MolfileString = null;
             </code></example>
             </remarks>
        </member>
        <member name="F:MDL.Draw.Renderer.Renderer.DefaultPrefsFileName">
            <summary>
            Sets the display preferences file to default.xml
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.ResizeToStandardBondLength(MDL.Draw.Chemistry.Molecule)">
            Resize the structure, leaving the atom labels and Sgroup size
            the same as it was before the resize
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.GetBSDString(System.String,System.Boolean)">
            <summary>
            Returns a BSD string.
            </summary>
            <param name="options">A string of the form "#+&lt;0,0&gt;,#-&lt;0,0&gt;,#=&lt;0,0&gt;,#U&lt;0,0&gt;" as defined
            by the BSD options string convention.  These options will be applied
            to the whole molecule.  When in doubt, use null.</param>
            <param name="ignoreAAMap">true if atom-atom mappings should be ignored, else false</param>
            <returns>a BSD string</returns>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.LoadPreferences(System.String)">
            <summary>
            Sets the display preferences according to the input file and returns a DisplayPreferences object. 
            <param>fileName path to the display preferences file</param>
            <return>a newly-created DisplayPreferences object</return>
            <seealso cref="F:MDL.Draw.Renderer.Renderer.DefaultPrefsFileName"/> 
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.#ctor">
            <summary>
            Constructor for the renderer. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.Dispose(System.Boolean)">
            <summary>
            Releases any resources being used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This implementation does nothing because the Parent class,
            UserControl, repaints with the background color.
            In design mode, this is left on so it does not look too ugly.
            </summary>
            <param name="pea">The PaintEventArgs object</param> 
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.DoPrint">
            <summary>
            Prints the molecule to current printer.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.DoPrintPreview">
            <summary>
            Opens the Print Preview dialog and allows the selection of a printer.
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.CopyToClipboard">
            <summary>
            Copies the molecule or reaction to the Windows Clipboard in three data formats: 
            <c>CT</c> for chemistry editing in ISIS/Draw and Symyx Draw, 
            <c>CHIMEXML</c> for the Java versions of Symyx Draw, and  
            <c>Metafile</c> for rendering as vector graphics in applications such as 
            Microsoft Word and Microsoft Excel.
            <seealso cref="M:MDL.Draw.Renderer.Renderer.PasteFromClipboard"/>
            <seealso cref="P:MDL.Draw.Renderer.Renderer.CanCopy"/>
            <seealso cref="P:MDL.Draw.Renderer.Renderer.Metafile"/>
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.PasteFromClipboard">
            <summary>
            Paste a molecule or reaction from the Windows Clipboard. 
            The Clipboard must contain a compatible flavor 
            (see <see cref="M:MDL.Draw.Renderer.Renderer.CopyToClipboard"/>).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.CanPaste"/>
            </summary>
        </member>
        <member name="M:MDL.Draw.Renderer.Renderer.CalcFragmentRectangle(System.Object)">
            <summary>
            Given a fragment in the current renderer molecule, calculate the
            fragments rectangle. 
            </summary>
            <param name="theFragment">The fragment to calculate the bounds on</param>
            <returns>The bounding rectangle or Rectangle.Empty if there were problems</returns>
        </member>
        <member name="E:MDL.Draw.Renderer.Renderer.ComDoubleClicked">
            <summary>
            The event handler to listen to the user action of a double-click on a renderer.
            See the Demo Renderer Double Clicked Event example, which is 
            <c>RendererDoubleClicked.htm</c> inside the <c>IE</c> subdirectory 
            of the <c>Examples</c> directory.
            </summary>
        </member>
        <member name="E:MDL.Draw.Renderer.Renderer.StructureChanged">
            <summary>
            Event that fires when the end-user or a Cheshire script changes the molecule. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MoleculeRenderer">
            <summary>
            Returns the internal molecule renderer.
            Use it for calling methods that are only available on the molecule renderer (or canvas),
            such as coordinates conversion from screen to object space.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.Preferences">
            <summary>
            Gets and sets the Preferences subproperties of this renderer. 
            See MDL.Draw.Renderer.Preferences.<see cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/> and the RendererDemo.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.AutoSizeStructure">
            <summary>
            Resizes the structure without impacting the atom label sizes
            if the mode bond length (without abbreviations) of the structure added is more than 10% larger or smaller than the 
            MDL.Draw.Renderer.Preferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>.
            Default: <c>true</c>.  
            If you need the quickest rendering or you need to see how the structure is stored in the database, 
            set to <c>false</c>.
            <seealso cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.StandardBondLength"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.IsReaction">
            <summary>
            Returns <c>true</c> if the current structure is a reaction and not a molecule (read-only).
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.IsMolecule">
            <summary>
            Returns <c>true</c> if the current structure is a molecule and not a reaction (read-only).
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.URLEncodedMolfileString">
            <summary>
            The text string of a molfile or rxnfile to encode for http transfer, 
            including the end of line (linefeed) encoded as <c>%0A</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileString">
            <summary>
            The molfile (or rxnfile) text string that corresponds to 
            the molecule (or reaction) to render. Do not confuse with the 
            molfile (or rxnfile) you get and set with <see cref="P:MDL.Draw.Renderer.Renderer.FileName"/>. 
            A <c>MolfileString</c> from disk (such as from <c>FileName</c>), 
            might have a line-ending style that is different from a <c>MolfileString</c> 
            passed from a component, such as the Renditor. To get the 
            line-ending style you want, use:
            <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringDOS"/>, <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringUNIX"/>, or <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringMacOS"/>. 
            Note that <c>MolfileString</c> returns the same line-ending style as <c>MolfileStringUNIX</c>.
            <seealso cref="P:MDL.Draw.Renderer.Renderer.ChimeString"/> <seealso cref="P:MDL.Draw.Renderer.Renderer.FileName"/> 
            <seealso cref="P:MDL.Draw.Renderer.Renderer.SmilesString"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTab">
            <summary>
            The molfile text string that corresponds to the molecule to render. 
            <c>MolfileStringFullCTab</c> returns sequence structure molfiles in pre-Draw 4 style(uncompressed).
            <c>MolfileString</c> returns sequence structure molfiles in the new hybrid representation, which enhances scalability.
            For non-sequence structures, <c>MolfileString</c> and <c>MolfileStringFullCTab</c>
            return the same string.
            A <c>MolfileStringFullCTab</c> from disk (such as from <c>FileName</c>), 
            might have a line-ending style that is different from a <c>MolfileStringFullCTab</c> 
            passed from a component, such as the Renditor. To get the 
            line-ending style you want, use:
            <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTabDOS"/>, <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTabUNIX"/>, or <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTabMacOS"/>. 
            Note that <c>MolfileStringFullCTab</c> returns the same line-ending style as <c>MolfileStringFullCTabUNIX</c>.
            <seealso cref="P:MDL.Draw.Renderer.Renderer.ChimeString"/> <seealso cref="P:MDL.Draw.Renderer.Renderer.FileName"/> 
            <seealso cref="P:MDL.Draw.Renderer.Renderer.SmilesString"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringDOS">
            <summary>
            Molfile or rxnfile text string of structure to render using DOS style line ending (CR+LF).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTabDOS">
            <summary>
            Molfile or rxnfile text string of structure to render using the DOS style line ending (CR+LF).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTab"/> 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringUNIX">
            <summary>
            Molfile or rxnfile text string of structure to render using the UNIX style line ending (LF).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTabUNIX">
            <summary>
            Molfile or rxnfile text string of structure to render using the UNIX style line ending (LF).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTab"/> 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringMacOS">
            <summary>
            Molfile or rxnfile text string of structure to render using MacOS (up to version 9) style line ending (CR).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTabMacOS">
            <summary>
            Molfile or rxnfile text string of structure to render using MacOS (up to version 9) style line ending (CR).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileStringFullCTab"/> 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringForSubsequenceQuery">
            <summary>
            Returns a molfile string that is suitable for subsequence searching against a database. For details, see remarks.
            </summary>
            <remarks>
            <ul><li>deletes explicit hydrogen non-terminal leaving groups on sequence residues</li>
            <li>deletes terminal leaving groups on sequence residues</li>
            <li>applies the substitution as drawn (s*) query feature to every non-hydrogen atom in the sequence, 
            except the following: any atom that contains a substitution query feature; residues that are <c>IsQueryOnly</c>, 
            such as the <c>Any</c> amino acid residue; 
            residues that use a condensed representation (*atom or pseudoatom) instead of the full connection table.
            </li></ul>
            See also <see cref="P:MDL.Draw.Renderer.Renderer.ChimeStringForSubsequenceQuery"/></remarks> 
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.MolfileStringForSubsequenceQueryFullCTab">
            <summary>
            Returns a molfile string that is suitable for subsequence searching against a database. For details, see remarks.
            This string returns the sequence structure in the pre-Draw 4 style (uncompressed).
            </summary>
            <remarks>
            <ul><li>deletes explicit hydrogen non-terminal leaving groups on sequence residues</li>
            <li>deletes terminal leaving groups on sequence residues</li>
            <li>applies the substitution as drawn (s*) query feature to every non-hydrogen atom in the sequence, 
            except the following: any atom that contains a substitution query feature; residues that are <c>IsQueryOnly</c>, 
            such as the <c>Any</c> amino acid residue; 
            residues that use a condensed representation (*atom or pseudoatom) instead of the full connection table.
            </li></ul>
            See also <see cref="P:MDL.Draw.Renderer.Renderer.ChimeStringForSubsequenceQueryFullCTab"/></remarks> 
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.ChimeStringForSubsequenceQuery">
            <summary>
            Returns a <c>chimestring</c> that is suitable for subsequence searching against a database. For details, see remarks.
            </summary>
            <remarks>
            <ul><li>deletes explicit hydrogen non-terminal leaving groups on sequence residues</li>
            <li>deletes terminal leaving groups on sequence residues</li>
            <li>applies the substitution as drawn (s*) query feature to every non-hydrogen atom in the sequence, 
            except the following: any atom that contains a substitution query feature; residues that are <c>IsQueryOnly</c>, 
            such as the <c>Any</c> amino acid residue; 
            residues that use a condensed representation (*atom or pseudoatom) instead of the full connection table.
            </li></ul>
            See also <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringForSubsequenceQuery"/></remarks> 
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.ChimeStringForSubsequenceQueryFullCTab">
            <summary>
            Returns a <c>chimestring</c> that is suitable for subsequence searching against a database. For details, see remarks.
            This string returns sequence structure in pre-Draw 4 style (uncompressed).
            </summary>
            <remarks>
            <ul><li>deletes explicit hydrogen non-terminal leaving groups on sequence residues</li>
            <li>deletes terminal leaving groups on sequence residues</li>
            <li>applies the substitution as drawn (s*) query feature to every non-hydrogen atom in the sequence, 
            except the following: any atom that contains a substitution query feature; residues that are <c>IsQueryOnly</c>, 
            such as the <c>Any</c> amino acid residue; 
            residues that use a condensed representation (*atom or pseudoatom) instead of the full connection table.
            </li></ul>
            See also <see cref="P:MDL.Draw.Renderer.Renderer.MolfileStringForSubsequenceQuery"/></remarks> 
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.BSDString">
            <summary>
            Gets a BSD string representing the current molecule (read-only).
            Same as calling <see cref="M:MDL.Draw.Renderer.Renderer.GetBSDString(System.String,System.Boolean)"/> with no options and requesting not to ignore atom-atom mapping.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.RosdalString">
            <summary>
            Returns  a Rosdal string representing the current molecule.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.ChimeString">
            <summary>
            The Chime text string that corresponds to
            the molecule (or reaction) to render. Do not confuse with the 
            file you get and set with <see cref="P:MDL.Draw.Renderer.Renderer.FileName"/>.
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> <seealso cref="P:MDL.Draw.Renderer.Renderer.FileName"/> 
            <seealso cref="P:MDL.Draw.Renderer.Renderer.SmilesString"/>
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.ChimeStringFullCTab">
            <summary>
            The Chime text string that corresponds to
            the molecule (or reaction) to render. Do not confuse with the 
            file you get and set with <see cref="P:MDL.Draw.Renderer.Renderer.FileName"/>.
            This string returns sequence structure in pre-Draw 4 style (uncompressed).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> <seealso cref="P:MDL.Draw.Renderer.Renderer.FileName"/> 
            <seealso cref="P:MDL.Draw.Renderer.Renderer.SmilesString"/>
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.SmilesString">
            <summary>
            The SMILES text string that corresponds to
            the molecule (or reaction) to render. 
            Do not confuse with the file you get and set with <see cref="P:MDL.Draw.Renderer.Renderer.FileName"/>.
            <seealso cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> <seealso cref="P:MDL.Draw.Renderer.Renderer.FileName"/> 
            <seealso cref="P:MDL.Draw.Renderer.Renderer.ChimeString"/>
            </summary>
            <remarks>If you save a MolfileString as a SmilesString, certain
            aspects of the chemical representation might not be supported.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.SketchString">
            <summary>
            The sketch file data as a Base64 string.
            </summary>		
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.FileName">
            <summary>
            Filename that corresponds to the molecule (or reaction). 
            Use to get and set the file that corresponds to the 
            <see cref="P:MDL.Draw.Renderer.Renderer.MolfileString"/> (molfile or rxnfile), 
            <see cref="P:MDL.Draw.Renderer.Renderer.ChimeString"/>, <see cref="P:MDL.Draw.Renderer.Renderer.SmilesString"/>, or 
            <see cref="P:MDL.Draw.Renderer.Renderer.SketchString"/>.
            </summary>
            <remarks>If you pass the Renderer a <c>MolfileString</c>, <c>ChimeString</c>, or 
            <c>SmilesString</c>, or <c>SketchString</c>, the <c>FileName</c> remains empty until you set 
            the <c>FileName</c>.</remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.HighlightInfo">
            <summary>Specifies the atom(s) and bond(s) to highlight because they
            belong to a persistent collection in a molfile or rxnfile.</summary>
            <remarks>
            <ul><li>The syntax is <c>atom1,atom2,atom_n;bond1,bond2,bond_n</c></li>
            <li>The illustration below shows HighlightInfo for <c>2,7;2</c>, which
            means atoms 2 and 7, and bond 2.
            <br><img src="images/highlightinfo2.gif"></img></br></li>
            <li>The image above does not use the default color. 
            To set the color for highlighting the atoms and bonds 
            specified in <c>HighlightInfo</c>, use the <c>HighlightColor</c> subproperty of the
            MDL.Draw.Renderer.Renderer.<see cref="P:MDL.Draw.Renderer.Renderer.Preferences"/> 
            defining property, which is shown in Example 3 of 
            MDL.Draw.Renderer.<see cref="T:MDL.Draw.Renderer.Renderer"/></li>
            <li>The default action for renderers is 
            to provide a "highlighted" display of the objects specified in a 
            highlighting collection, such as an Symyx Cheshire persistent collection.</li>
            <li>MDLV30/HILITE collections are a feature of the V3000 
            format described in the CTFile Formats white paper at 
            <a href="http://www.mdl.com/solutions/white_papers/ctfile_formats.jsp" target="RefPage">http://www.mdl.com/solutions/white_papers/ctfile_formats.jsp</a>.</li></ul>
            </remarks>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.IsBitmapFromOLE">
            <summary>
            Sets and gets a flag if a bitmap was created from OLE object.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.PreferencesFileName">
            <summary>
            Specifies the name of the Display Preferences file that the Editor 
            loads. Use this property immediately after creating a new Renditor. 
            Do not include the path. The xml file must be in the 
            <c>C:\Documents and Settings\username\MDLDraw\Preferences</c> directory, 
            where <c>username</c> is the name of the computer user and <c>C</c> is the 
            name of the drive where Windows is installed. Note that the end-user 
            of the Edit > Preferences dialog can overwrite the file named by this property. 
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.BackColor">
            <summary>
            Gets and sets the color of the background. Default: <c>White</c>
            <seealso cref="P:MDL.Draw.Renderer.Renderer.ForeColor"/>
            </summary>
            <remarks>
            Overrides 
            System.Windows.Forms.
            Control.<see cref="P:System.Windows.Forms.Control.BackColor"/>.		
            This property is synchronized with 
            MDL.Draw.Renderer.Preferences.DisplayPreferences.
            <see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.BackColor"/></remarks>
            <example>myRenderer.BackColor = System.Drawing.Color.MediumAquamarine
            myRenderer.ForeColor = System.Drawing.Color.Brown</example>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.ForeColor">
            <summary>
            Gets and sets the color of the structure. Default: <c>Black</c>
            <seealso cref="P:MDL.Draw.Renderer.Renderer.BackColor"/>
            </summary>
            <remarks>
            Overrides 
            System.Windows.Forms.Control.<see cref="P:System.Windows.Forms.Control.ForeColor"/>		/// This property is synchronized with 
            MDL.Draw.Renderer.Preferences.DisplayPreferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.ForeColor"/></remarks>
            <example>myRenderer.BackColor = System.Drawing.Color.MediumAquamarine
            myRenderer.ForeColor = System.Drawing.Color.Brown</example>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.ContextMenu">
            <summary>
            Gets and sets the items shown on the context menu that appears when the end-user right-clicks the canvas. 
            By default, the context menu menu contains <c>Copy</c> and <c>Paste</c>.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.CopyingEnabled">
            <summary>
            Specifies whether this Renderer enables copying. 
            If <c>true</c>, the end-user can right click and copy from the renderer.
            If <c>false</c>, structures cannot be copied. 
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.PastingEnabled">
            <summary>
            Specifies whether this Renderer enables pasting. 
            If <c>true</c>, the end-user can right click and paste to the renderer.
            If <c>false</c>, structures cannot be pasted. 
            Default: <c>true</c>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.DisplayOnEmpty">
            <summary>
            This variable allows the display of a string for display in the control
            when there is no molecule or grapics objects
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.Image">
            <summary>
            Returns a bitmap of the current molecule. The bitmap is drawn using the 
            current display preference settings, which are set in 
            MDL.Draw.Preferences.<see cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/>.
            (read-only)
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.Metafile">
            <summary>
            Metafile image of the current structure.
            The metafile is drawn using the 
            current display preference settings, which are set in 
            MDL.Draw.Renderer.Preferences.<see cref="T:MDL.Draw.Renderer.Preferences.DisplayPreferences"/>.
            The current settings might be different from the original settings. 
            (A metafile can contain a comment section with Symyx sketch data.) 
            See also <c>MDL.Draw.StructureConversion.StructureConverter</c>.
            <seealso cref="M:MDL.Draw.Renderer.Renderer.CopyToClipboard"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.CanPaste">
            <summary>
            Returns <c>true</c> if the Windows Clipboard contains a 
            compatible flavor of a molecule or reaction (read-only).
            The compatible formats are <c>MDLCT</c> (such as molfile) and <c>MDLSK</c> (sketch).
            For example, a molecule copied from ISIS/Draw, Symyx Draw, a renderer, 
            or a renditor would be <c>true</c>.
            <seealso cref="P:MDL.Draw.Renderer.Renderer.CanCopy"/><seealso cref="M:MDL.Draw.Renderer.Renderer.CopyToClipboard"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.CanCopy">
            <summary>
            Returns <c>true</c> if there is a non-empty molecule 
            currently displayed so that a copy action is possible (read-only).
            <seealso cref="P:MDL.Draw.Renderer.Renderer.CanPaste"/><seealso cref="M:MDL.Draw.Renderer.Renderer.CopyToClipboard"/>
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.StructureRectangle">
            <summary>
            Use this property to get the Rectangle for the structure currently in this
            renderer.
            </summary>
        </member>
        <member name="P:MDL.Draw.Renderer.Renderer.RendererBorderStyle">
            <summary>
            The type of border to paint around the control when 
            DisplayPreferences.<see cref="P:MDL.Draw.Renderer.Preferences.DisplayPreferences.OutlineColor"/>
            is set to a color.
            (Setting <c>RendererBorderStyle</c> causes the Renderer to be repainted immediately.)
            Default: <c>Inset</c>
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.Canvas">
            <summary> Canvas class
            Object with no UI for creating images of molecules...
            An object that can be drawn onto.
            All of the drawing is carried out by internally managed
            objects, somewhat like the Tk Canvas widget.
            Provides double buffered rendering.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.backgroundColor">
            <summary> The background color of the canvas.</summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.foregroundColor">
            <summary> The current foreground color of the canvas. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.contrastingColor">
            <summary> A color which is guaranteed to be Visible against the background. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.outlineColor">
            <summary> The current border color of the canvas. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.fgpen">
            <summary>pen with foreground color and 1 screen pixel width </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.blackpen">
            <summary>black pen with 1 screen pixel width</summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.blackbrush">
            <summary>black brush </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.fgbrush">
            <summary> brush with foreground color </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.bgbrush">
            <summary>brush with background color </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.Dragging">
            <summary>return the last clicked X in screen corrdinates 
            return the last clicked Y in screen corrdinates
            Is the drawing currently being transformed.
            This is set to true whenever the canvas is being translated,
            zoomed or rotated. Objects may wish to draw themselves differently
            if the drawing is being rapidly updated.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.ImmediateDrawingMode">
            <summary>flags if drawing should be down immediately to parent compontent (in
            XOR mode) when an object is added
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.needsFitting">
            <summary> Has the drawing been fitted?
            Set this to false when you create the Canvas if you
            don't want to have it autofitted when it is first
            displayed. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas._documentWidth">
            <summary>
            document width in inches
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas._documentHeight">
            <summary>
            document height in inches
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.OBJECTUNITSPERINCH">
            <summary>
            conversion between object space and inches.
            SKC format documents reads: In ISIS, one Angstrom unit is equal to 240 sketch units (1/3 of an inch). (p2.1)
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.activeDPI">
            <summary>active DPI for rendering </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.objectUnderMouse">
            <summary>The current object that is under the mouse. 
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.OTYPE">
            <summary>Canvas object itself  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.parentComponent">
            <summary>parentComponent is canvas object used for creating images, etc.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.associatedUI">
            <summary>AssociatedUI
            this flag dictates if the Canvas being built will
            be tied back to the original Molecule, for use by
            an editor, etc, or if it just being used to generate
            a Canvas that has no editing capabilities
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.canvasActions">
            <summary> Hook for attaching actions to the canvas.</summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.LastActionHandler">
            <summary> Returns the last action handler installed or added.
            NOTE:  Handler returned as object (to maintain compatibility with
            the way Mike implemented things), but should be either an
            ICanvasListener or an ICanvasObjectListener.
            </summary>
            <summary> The last action handler that was installed.</summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.#ctor">
            <summary> Default constructor.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.#ctor(System.Int32,System.Int32)">
            <summary> Constructor that allows specification of the width and height
            of the canvas.
            *
            </summary>
            <param name="initWidth">The width of the canvas.
            </param>
            <param name="initHeight">The height of the canvas.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Resize(System.Int32,System.Int32)">
            <summary> Resize the canvas.</summary>
            <param name="newWidth">The new width of the canvas. </param>
            <param name="newHeight">The new height of the canvas. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Resize(System.Drawing.Rectangle)">
            <summary> Alternate resize object that specifies the size with a Rectangle object. </summary>
            <param name="rect">The rectangle object that specifies the new size. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.StopEditingMode">
            <summary>
            DP: force stop editing mode
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Reset">
            <summary> Reset the canvas.
            This entails resetting the scale, the origin, offscreen buffers
            and list of canvas objects.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Reset(System.Boolean,System.Boolean)">
            <summary>
            resets the canvas.
            </summary>
            <param name="resetorigin">whether the origin should be reset</param>
            <param name="resetzoom">whether the zoom should be reset</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Add(MDL.Draw.Rendering.CanvasObject,MDL.Draw.Rendering.ObjectRenderer)">
            <summary>
            Add an object to the canvas.
            The object should only be added after all of its attributes
            have been set.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.PaintBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            paint the bitmap on the canvas.r is the clipping rectangle
            </summary>
            <param name="bitmap"></param>
            <param name="r"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.PaintBitmap(System.Drawing.Graphics,System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            paint the bitmap on the canvas using supplied graphics, and rectangle as a clipping rectangle
            </summary>
            <param name="g"></param>
            <param name="bitmap"></param>
            <param name="r"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FitCanvasToScreen">
            <summary> Fit the current drawing to the available screen space.
            This is done by finding the center of all the objects
            on the canvas and shifting this position to the center
            of the window. Then the appropriate scale is determined
            such that the objects fit within the screen.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.GetStructureBoundingBox">
            <summary>
            returns the bounding box for all the canvas objects.
            This can be used to figure out the size of the image to save the structure.
            Note that it's in object space, so one needs to use screendistance(returnvalue.Width)
            and screendistance(returnvalue.Height) to figure out the size of the image.
            </summary>
            <returns>a bounding box or null if no canvas object</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.CenterMoleculeToScreen(MDL.Draw.Rendering.BoundingBox)">
            <summary>
            center the canvas to the center of the bounding box.
            Call fit canvas to screen to get a bounding box.
            </summary>
            <param name="bbox"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.TransformPoint2d(MDL.Draw.Utils.Point3d)">
            <summary> Transform a Point3d according to the current scale and center
            of the drawing.  This method assumes that the point does
            not have absolute screen coordinates.
            </summary>
            <param name="p">The point to be transformed.
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.TransformPoint2d(MDL.Draw.Utils.Point3d,System.Boolean)">
            <summary> Transform a Point3d according to the current scale and center
            of the drawing.
            </summary>
            <param name="p">The point to be transformed.
            </param>
            <param name="absolute">Does the point have absolute coordinates or not. 
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Transform">
            <summary>Transform all of the objects that are currently held on the canvas.
            This usually happens when the canvas has been translated, scaled
            (or rotated).  TransformCanvasObject does all of the work
            for each object.
            </summary>
            <seealso cref="M:MDL.Draw.Rendering.Canvas.TransformCanvasObject(MDL.Draw.Rendering.CanvasObject)"/>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.TransformCanvasObject(MDL.Draw.Rendering.CanvasObject)">
            <summary> Transform all the parts of a single CanvasObject.
            This method is separate from transform() because 
            new objects need to be transformed when they are added
            to the canvas.
            </summary>
            <seealso cref="M:MDL.Draw.Rendering.Canvas.Transform"/>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FindCanvasObjectForHost(MDL.Draw.Rendering.WindowLessRichEdit.IMyRichEditCtrl,MDL.Draw.Chemistry.GraphicsSkText)">
            <summary>
             For a given pHost, find the index of CanvasGraphicsSkText, 
             who has GraphicsSkText, who has that IMyRichEditCtrl set as an edit control.
             If the second argument GraphicsSkText is not null, 
             we are seaching for CanvasGraphicsSkText with that known GraphicsSkText 
             ( which still has no IMyRichEditCtrl assigned, since it is being created now ).
            </summary>
            <param name="pCtrl"></param>
            <param name="knownSkText"></param>
            <returns>the integer of the index</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FindGraphicsSkTextForHost(MDL.Draw.Rendering.WindowLessRichEdit.IMyRichEditCtrl)">
            <summary>
             For a given pHost, find the CanvasGraphicsSkText, 
             who has who has that IMyRichEditCtrl set as an edit control.
            </summary>
            <param name="pHost"></param>
            <returns></returns>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.RendererBorderStyle">
            <summary>
            Style of border used when Outline color is not Empty.
            Default is Inset.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Paint(System.Drawing.Graphics)">
            <summary> This method actually paints the canvas.
            This involves clearing the given graphics context,
            figuring out the window size, transforming the objects
            and calling of the individual objects paint methods.
            This method is seperated from paint so that double buffering
            can be disabled when the paint method is called from print.
            </summary>
            <param name="g">The graphics context into which the objects are to be drawn.
            </param>
            <seealso cref="M:MDL.Draw.Rendering.Canvas.Paint(System.Drawing.Graphics)"/>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.PaintToImage(System.Drawing.Image,System.Drawing.Graphics,System.Drawing.Text.TextRenderingHint)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Print(System.Drawing.Graphics)">
            <summary> Print the image.
            This is similar to paint but does not do double buffering because 
            this breaks printing.
            </summary>
            <param name="g">The print context.</param>
            <seealso cref="M:MDL.Draw.Rendering.Canvas.Paint(System.Drawing.Graphics)"/>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.UpdateContents">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.UpdateContents(System.EventArgs)">
            <summary>
            
            </summary>        
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.GetPointInOpenQuadrant(System.Int32,System.Int32,System.Double)">
            <summary> Returns a point in the first empty rectangle in the canvas.  The size of the
            quadrants are determined from gridCountx (the number of columns to divide the
            canvas into) and gridCounty (the number of rows).  Quadrants are searched from
            down the columns in the lowerFraction first and when the lower fraction has 
            been searched then the upper fraction is searched across the rows as follows:
            
            16 |  17 |  18  (3 x 6 grid)
            13 |  14 |  15
            10 |  11 |  12
            1  |  4  |  7   --- lowerFraction = 1/2
            2  |  5  |  8  
            3  |  6  |  9  
            *
            If fractionOfWayDown = 0.0 then the search order would be:
            *
            1  |  7  |  13  --- lowerFraction = 1.0
            2  |  8  |  14
            3  |  9  |  15
            4  |  10 |  16  
            5  |  11 |  17 
            6  |  12 |  18 
            *
            If fractionOfWayDown = 1.0 then the search order would be:
            *
            16 |  17 |  18  (3 x 6 grid)
            13 |  14 |  15
            10 |  11 |  12
            7  |  8  |  9   
            4  |  5  |  6  
            1  |  2  |  3   --- lowerFraction = 0.0
            *
            </summary>
            <param name="gridCountx"> Number of columns to be used for the grid used to divide canvas into rectangles
            </param>
            <param name="gridCounty"> Number of rows to be used for the grid used to divide canvas into rectangles
            </param>
            <param name="lowerFraction"> How far down the grid to start searching for empty cell.
            </param>
            <author> jbo
            </author>
            <version> 12-07-99
            
            </version>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.objectx(System.Single)">
            <summary> Convert a screen x coordinate into an object space x coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.objectDistX(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.screenx(System.Double)">
            <summary> Convert an object space x coordinate into a screen x coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.objecty(System.Single)">
            <summary> Convert a screen y coordinate into an object space y coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.screeny(System.Double)">
            <summary> Convert an object space y coordinate into a screen y coordinate.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.objectdistance(System.Single)">
            <param name="screendistance"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FindObjectUnderMouse(System.Int32,System.Int32)">
            <summary> Find the uppermost object under the specified x and y coordinates.
            If there are no objects under this point in screen space then
            null is returned.  The method does not really have anything to
            do with the position of the mouse and any coordinates can be
            used.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.findObjectsIntersecting(MDL.Draw.Rendering.CanvasObject)">
            <summary> Return a ArrayList  of objects that intersect the passed object.
            If no objects intersect the passed object, then an null is returned.
            </summary>
            <param name="o">The object for which intersections are to be found.
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FindVisibleObjectsIntersecting(MDL.Draw.Rendering.CanvasObject)">
            <summary> Return a ArrayList  of objects that intersect the passed object.
            We'll try to count only Visible objects. e.g. fragment's co or ring's canvasCircle co is not Visible
            NOTE:Any other non-Visible objects can be added here.
            If no objects intersect the passed object, then an null is returned.
            </summary>
            <param name="o">The object for which intersections are to be found.
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FindObjectsContainedBy(MDL.Draw.Rendering.CanvasObject)">
            <summary> Return a ArrayList  of objects that are contained within the passed object.
            If no objects are contained by the passed object, then an empty ArrayList 
            is returned.
            </summary>
            <param name="o">The object for which intersections are to be found.
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FindObjectsContainedBy(MDL.Draw.Rendering.CanvasObject,System.Boolean)">
            <summary> Return a ArrayList  of objects that are contained within the passed object.
            If no objects are contained by the passed object, then an empty ArrayList 
            is returned.
            </summary>
            <param name="o">The object for which intersections are to be found.
            </param>
            <param name="centerOnly">if true, then canvas object's CENTER point need only contained
            within the passed in object
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.Select(System.Collections.ArrayList)">
            <summary> Select the objects in the passed ArrayList. </summary>
            <param name="al">The vector of objects that are to be selected. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.UnselectAll">
            <summary> Unselect all objects on the canvas. Returns true if unselected anything, 
            false if there was nothing to unselect.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.ObjectsWithTag(System.String)">
            <summary> Return a ArrayList  of objects that have the specified tag.
            If there are no objects that match the tag, then an empty
            ArrayList  is returned.
            The tag "all" returns all objects.
            This could be done much more efficiently with
            a hashtable of tag names, but at least this
            is simple.
            </summary>
            <param name="tag">The tag that objects must have.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.ObjectsWithTag(System.Object,System.Boolean)">
            <summary>
            Overload allowing the option of finding a property tag that partially matches the parameter value.
            </summary>
            <param name="tag">the tag we seek</param>
            <param name="bPartialMatch">true to allow partial matches, false to fallback to the default exact match
            behavior.</param>
            <returns>an ArrayList with matching elements, or an empty ArrayList if no matches were found.</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.HasVisibleObjects(System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary>Returns true if the Node passed in is on the Canvas with
            at least 1 Visible object
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.HasVisibleObjects(MDL.Draw.Nodes.Node)">
            <summary>Returns true if the Node passed in is on the Canvas with
            at least 1 Visible object
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.HasVisibleObjectsNoAttachment(System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary>Returns true if the pass in vector of CanvasObjects contains
            at least 1 Visible object
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.HasVisibleObjectsNoAttachment(MDL.Draw.Nodes.Node)">
            <summary>Returns true if the Node passed in is on the Canvas with
            at least 1 Visible object
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.GetObjectCoordinate(System.Int32,System.Int32)">
            <summary> Convert the x, y screen coordinates into object coordinates.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.GetObjectCoordinate(System.Windows.Forms.MouseEventArgs)">
            <summary> Convert the event coordinates into object coordinates.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.dpixelCoordinate(System.Double)">
            <summary> Perform rounding of object coordinates to pixel coordinates.
            This will let us try different rounding schemes easily.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.PointInPolygon(MDL.Draw.Utils.Point3d[],System.Double,System.Double)">
            <summary> Is the point within the polygon.
            *
            </summary>
            <param name="pointArray">The Outline of the polygon.
            </param>
            <param name="x">The x-coordinate of the point to test.
            </param>
            <param name="y">The y-coordinate of the point to test.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.PointNearLine(MDL.Draw.Utils.Point3d[],System.Double,System.Double,System.Double)">
            <summary> Is the point near the line.
            *
            </summary>
            <param name="pointArray">The array of Points describing the line.
            </param>
            <param name="width">The width of the line in object coordinates.
            </param>
            <param name="xc">The x-coordinate of the point to test.
            </param>
            <param name="yc">The y-coordinate of the point to test.
            
            </param>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.xCoordinates">
            <summary> Cached array for drawing polygons.
            The size is increased if necessary so that we can use these arrays
            again and again to avoid allocating arrays each time we draw a
            shape.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.EnsureCoordinateArraySize(System.Int32)">
            <summary> Method for ensuring we have enough room in the cache arrays.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawFilledPolygon(System.Drawing.Graphics,MDL.Draw.Utils.Point3d[],System.Int32,System.Drawing.Color)">
            <summary> Draw a filled polygon on the canvas. </summary>
            <param name="g">The graphics object to draw in. </param>
            <param name="Points">An array of Points that describe the polygon. </param>
            <param name="pointCount">The number of Points in the array. </param>
            <param name="FillColor">The color to fill the polygon. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawOutlinePolygon(System.Drawing.Graphics,MDL.Draw.Utils.Point3d[],System.Int32,System.Drawing.Pen)">
            <summary> Draw an Outline polygon on the canvas. </summary>
            <param name="g">The graphics object to draw in. </param>
            <param name="Points">An array of Points that describe the polygon. </param>
            <param name="pointCount">The number of Points in the array.</param>
            <param name="pen">The Pen. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawPolygon(System.Drawing.Graphics,MDL.Draw.Utils.Point3d[],System.Int32,System.Drawing.Pen,System.Drawing.Brush)">
            <summary> Draw the point array as either a filled or Outline polygon.</summary>
            <param name="g">The graphics object to draw in.</param>
            <param name="Points">The array that describes the polygon Outline.</param>
            <param name="pointCount">The number of Points to draw.</param>
            <param name="pen">The Pen.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawLine(System.Drawing.Graphics,MDL.Draw.Utils.Point3d[],System.Int32,System.Drawing.Color)">
            <summary> Draw a polyline on the canvas.</summary>
            <param name="g">The graphics object on which to draw the line.</param>
            <param name="Points">The point array that describes the line.</param>
            <param name="pointCount">The number of Points to draw.</param>
            <param name="color">The color to draw the line.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawLine(System.Drawing.Graphics,MDL.Draw.Utils.Point3d[],System.Int32,System.Drawing.Color,System.Double[])">
            <summary> Draw a polyline on the canvas. </summary>
            <param name="g">The graphics object on which to draw the line. </param>
            <param name="Points">The point array that describes the line. </param>
            <param name="pointCount">The number of Points to draw. </param>
            <param name="color">The color to draw the line. </param>
            <param name="dashPattern">The dash pattern for the line. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawLine(System.Drawing.Graphics,MDL.Draw.Utils.Point3d[],System.Int32,System.Double,System.Drawing.Color,System.Double[])">
            <summary> Draw a polyline on the canvas. </summary>
            <param name="g">The graphics object on which to draw the line. </param>
            <param name="Points">The point array that describes the line. </param>
            <param name="pointCount">The number of Points to draw. </param>
            <param name="widthInPoints">Width of the line in Points. </param>
            <param name="color">The color to draw the line. </param>
            <param name="dashPattern">The dash pattern for the line. </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawDashedLine(System.Drawing.Graphics,System.Double,System.Double,System.Double,System.Double,System.Drawing.Pen,System.Double[])">
            <summary> Paint a line using the dash info contained in 
            dashPattern.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawOutlineCircle(System.Drawing.Graphics,System.Double,System.Double,System.Double,System.Drawing.Pen)">
            <summary> Draw an Outline circle on the canvas.</summary>
            <param name="g">The graphics object to draw on.</param>
            <param name="x">The x-coordinate of the circle.</param>
            <param name="y">The y-coordinate of the circle.</param>
            <param name="r">The radius of the circle.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawFilledCircle(System.Drawing.Graphics,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary> Draw a filled circle on the canvas.</summary>
            <param name="g">The graphics object to draw on.</param>
            <param name="x">The x-coordinate of the circle.</param>
            <param name="y">The y-coordinate of the circle.</param>
            <param name="r">The radius of the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawCircle(System.Drawing.Graphics,System.Double,System.Double,System.Double,System.Drawing.Brush,System.Drawing.Pen,System.Boolean)">
            <summary> Draw an Outline circle on the canvas.</summary>
            <param name="g">The graphics object to draw on.</param>
            <param name="x">The x-coordinate of the circle.</param>
            <param name="y">The y-coordinate of the circle.</param>
            <param name="r">The radius of the circle.</param>
            <param name="brush">The Brush object.</param>
            <param name="pen">The pen.</param>
            <param name="fill">Is the circle filled or Outline.</param> 
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.POINT_SIZE_KLUDGE">
            <summary> Amount by which a font height is scaled to allow for the
            fact that the font height includes white space above the letters.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.DrawString(System.Drawing.Graphics,System.String,System.Double,System.Double,System.Drawing.Color,System.Drawing.Font)">
            <summary> Draw a string on the canvas.
            This method does no calculations.  The font should be scaled by the current
            overall of the canvas right before this method is called.
            </summary>
            <param name="g">    The graphics object to draw on.</param>
            <param name="text"> The string to draw.</param>
            <param name="x">    The x-coordinate of the bottom left hand corner. (canvas coords)</param>
            <param name="y">    The y-coordinate of the bottom left hand corner. (canvas coords)</param>
            <param name="color">The color of the string.</param>
            <param name="font"> The font to draw the string in.</param>
            <author> fan
            </author>
            <version> 11-14-00
            
            </version>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.InstallListeners">
            <summary> The list of install listeners.</summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.AddInstallListener(MDL.Draw.Rendering.IInstallListener)">
            <summary> Add an install listener.</summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.RemoveInstallListener(MDL.Draw.Rendering.IInstallListener)">
            <summary> Remove a InstallListener from this canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.RemoveAllInstallListeners">
            <summary> Remove all MTInstallListener's from this canvas. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.CanvasListeners">
            <summary> The list of canvas listeners. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.AddCanvasListener(MDL.Draw.Rendering.ICanvasListener)">
            <summary> Add a ICanvasListener to this canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.RemoveCanvasListener(MDL.Draw.Rendering.ICanvasListener)">
            <summary> Remove a ICanvasListener from this canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseDoubleClickEvent(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMousePressedEvent(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a CanvasEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseReleasedEvent(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a CanvasEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseMovedEvent(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a CanvasEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseDraggedEvent(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a CanvasEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseDragEnterEvent(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a DragEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseDragDropEvent(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a DragEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseDragOverEvent(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a DragEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasMouseDragLeave(System.EventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a DragEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasKeyPressedEvent(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a CanvasEvent to the listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.FireCanvasKeyDownEvent(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Fire a CanvasEvent to the listeners.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Canvas.CanvasObjectListeners">
            <summary> The list of canvas object listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.AddCanvasObjectListener(MDL.Draw.Rendering.ICanvasObjectListener)">
            <summary> Add a ICanvasObjectListener to this canvas. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.RemoveCanvasObjectListener(MDL.Draw.Rendering.ICanvasObjectListener)">
            <summary> Remove a ICanvasObjectListener from this canvas.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.RemoveAllCanvasObjectListeners">
            <summary> Remove all of the canvas object listeners.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.InstallCanvasActionHandler(System.Object)">
            <summary> Install an action handler.
            We record the last action handler so that we can remove it from
            the list of listeners.  It is done this way as the
            canvas can now have more than one handler.
            Don't forget that an action handler can implement more than
            one of the listener interfaces.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Canvas.AddActionHandler(System.Object)">
            <summary> Add a single action handler without caring whether there
            are others present.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.Background">
            <summary> The background color of the canvas. </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.Foreground">
            <summary> The foreground color of the canvas. </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.OutlineColor">
            <summary> The border color of the canvas. </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.DocumentWidth">
            <summary>
            document width in inches
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.DocumentHeight">
            <summary>
            document height in inches
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.TemporaryUserFeedbackFontSize">
            <summary>
            font size (in points) used when drawing temporary use feedback like resize ration, 
            rotation angle, ring size or chain length.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.TemporaryUserFeedbackFontColor">
            <summary>
            font color used when drawing temporary use feedback like resize ration, 
            rotation angle, ring size or chain length.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.HostInstaller">
            provides the access to m_pHostInstaller member variable
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.OverallScale">
            <summary> Returns the overallScale of the canvas.
            width in object coords = width in pixels / overallScale
            This methods should only be called by the implementing class's getOverallScale()
            see MoleculeRenderer for an example.
            </summary>
        </member>
        <member name="E:MDL.Draw.Rendering.Canvas.CenterOfDisplayChanged">
            <summary> Zoom factor of the drawing.
            prefs.standardbondlength * zoomFactor = the true size of a bond on the 
            screen. Default value is 1.0
            </summary>
            <seealso cref="M:MDL.Draw.Rendering.Canvas.FitCanvasToScreen"/>
        </member>
        <member name="P:MDL.Draw.Rendering.Canvas.CanvasObjectToString">
            <summary>
            for QA
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasMatrixHelper.PageSize">
            <summary>
            Page size in inches
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasMatrixHelper.ObjectRectangle">
            <summary>
            Rectangle that defines the theControl rendering rectangle in Object coordinates (decipoints)
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasMatrixHelper.PageRectangle">
            <summary>
            Rectangle that defines the page in Object coordinates (decipoints)
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.TextRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.TextRenderer.getTextMetrics(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.TextRenderer.drawText(System.Drawing.Graphics,System.Drawing.Font,System.String,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.TextRenderer.MeasureText(System.String,System.Drawing.Font,System.Drawing.Text.TextRenderingHint,System.Drawing.StringFormat,System.Drawing.RectangleF,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.TextRenderer.TextMetrics">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasBase3DFeature">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.SELECTMARK_CORNERS">
            <summary>constant for selectMarkStyle - mark enclosing rectangle corners only</summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.SELECTMARK_POINTS">
            
            <summary>constant for selectMarkStyle - mark all Points in object</summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.SELECTMARK_CENTER">
            
            <summary>constant for selectMarkStyle - mark enclosing rectangle center only </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.SELECTMARK_RECTANGLE">
            
            <summary>constant for selectMarkStyle - mark entire enclosing rectangle </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.SELECTMARK_EIGHTMARKS">
            <summary>constant for selectMarkStyle - mark enclosing rectangle corners and centers of each side </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.OUTLINE_BORDER_PX">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject._canvas_Layer">
            <summary> The canvas layer that this object is in.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.LineWidth">
             <summary>
            Line Width in decipoints. 
             </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.Visible">
            <summary> Set the visibility status of the object.
            Note: invisible objects are still Selectable.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.Selected">
            <summary> Is the object currently selected? </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.Highlighted">
            <summary> Is the object currently highlighted? </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject._selectable">
            <summary> Is the object Selectable? </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.OTYPE">
            <summary>Canvas Drawing Objects  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject._theCanvas">
            <summary> This allows canvas to be set during initialization and referred to later. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.PROP_CANVASOBJ_TAGS">
            <summary>static NodeProperty for "tags" </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.SelectMarkStyle">
            <summary>selection marking style
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.DrawWhenPanning">
            <summary> Should the object be drawn when the picture is being
            translated, scaled or rotated.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.Absolute">
            <summary> Are the coordinates of this object in screen space.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasObject.Outline">
            <summary> The Outline of the object.
            This may be different from the shape described by Points.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.#ctor">
            <summary> Default constructor for Canvas.
            </summary>        
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.UpdateBoundingBox">
            <summary> Update the contents of this objects bounding box.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.BoundingBoxIntersects(System.Double,System.Double)">
            <summary> Determine if bounding box of the object intersects the point.
            If the object bounding box is null then the return value is true, 
            as the object is infinite in that case.
            </summary>
            <returns> boolean value </returns>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Intersects(System.Double,System.Double)">
            <summary> Default intersection method for an object.
            *
            Perform in polygon test using the Outline if it exists
            or the object point list.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Intersects(MDL.Draw.Rendering.CanvasObject)">
            <summary> Does this object intersect the passed object.
            The method proceeds as follows.
            First, find out if the bounding boxes of the two objects overlap.
            If not they cannot possibly overlap.
            Then, determine if any of the Points of one of the objects
            lies within the other object.  If they do the objects overlap.
            Finally, find out if any of the edges of the two objects intersect.
            If they do the objects overlap.
            </summary>
            <param name="o">The object that is to be tested for intersection.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Contains(MDL.Draw.Rendering.CanvasObject)">
            <summary> Does this object completely enclose the passed object?
            Currently only checks that all of the vertices are enclosed.
            Should also check that none of the object perimeters intersect.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.centerWithin(MDL.Draw.Rendering.CanvasObject)">
            <summary> Is the CENTER of this object enclosed by the passed object?
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.HasTagLike(System.Object)">
            <summary>
            allows a partial match of the property tag
            </summary>
            <param name="s">tag we seek</param>
            <returns>true if found, false if not found</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Paint(System.Drawing.Graphics)">
            <summary> The method that is called when the object has to paint itself.
            *
            This must be implemented by new object types that directly extend
            CanvasObject.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.PaintObject(System.Drawing.Graphics,System.Drawing.Color)">
            <summary> The method that is responsible for drawing the main part of
            the object.
            *
            </summary>
            <param name="g">The graphics object in which to draw.
            </param>
            <param name="shadowColor">The color the object should draw itself if
            it is being drawn with a shadow. null if we are not drawing the shadow.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.PaintHighlight(System.Drawing.Graphics,System.Drawing.Color)">
            <summary> The method that will paint the highlight marker if this object
            is highlighted.
            *
            This method is called with the Graphics object set to draw
            XOR mode.
            *
            The default behaviour is to draw the Outline point polygon
            if there is one, or failing that to draw the point array polygon.
            *
            </summary>
            <param name="g">The graphics object in which to draw.
            </param>
            <param name="highlightColor">The color to draw the highlight.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.PaintSelect(System.Drawing.Graphics,System.Drawing.Color)">
            <summary> The method that will draw the object selection markers.
            This method is called with the Graphics object set to draw
            XOR mode.
            </summary>
            <param name="g">The graphics object in which to draw.
            </param>
            <param name="selectColor">The color to draw the selection markers.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Highlight2">
            <summary> The method that allows an object to highlight itself.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Unhighlight2">
            <summary> The method that allows an object to unhighlight itself.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasObject.Destroy">
            <summary> We need to override our destroy() method to remove 
            highlight and select objects that won't go away unless we tell them
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasObject.TheCanvas">
            <summary>
            The canvas that this object should be renderer on.
            
            If the object has been explicitly set, return that set value, otherwise return
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasObject.LineWidthInPoints">
            <summary>thickness of line in Points </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.Canvas3PointAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.Canvas2PlaneAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasDihedral">
            <summary>    
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasActions">
            <summary>
            A class for managing events on an MTCanvas object while
            the mouse is over the background.
            A Canvas contains a reference to a CanvasActions class that
            will handle the events.  As the events occur the appropriate method
            in this class is called.  The method is called with the Event object
            and a reference to the Canvas on which the event occurred.
            In this way different sets of actions can be incorporated into
            distinct classes.  This allows the actions of the Canvas object
            to be changed by simply replacing the CanvasActions object with a
            different one.
            All methods return a boolean value which indicates whether or not
            the Canvas should redraw itself.  It is frequently possible that
            the event handling does not require canvas redraws, especially if
            new objects have been added to the canvas in XOR mode.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseDown(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouseDown event. </summary>
            <param name="e">The event that occurred on the Canvas.</param>
            <param name="d">The Canvas object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseMove(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouseMove event. </summary>
            <param name="e">The event that occurred on the Canvas.</param>
            <param name="d">The Canvas object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseDrag(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouseDrag event.</summary>
            <param name="e">The event that occurred on the Canvas.</param>
            <param name="d">The Canvas object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseUp(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a mouseUp event.</summary>
            <param name="e">The event that occurred on the Canvas.</param>
            <param name="d">The Canvas object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.KeyDown(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a keyDown event.
            The key that was pressed is obtained as <code>e.key</code>
            </summary>
            <param name="e">The event that occurred on the Canvas.</param>
            <param name="d">The Canvas object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.KeyUp(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Handle a keyUp event.
            The key that was pressed is obtained as <code>e.key</code>
            </summary>
            <param name="e">The event that occurred on the Canvas.</param>
            <param name="d">The Canvas object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseDown(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event.</summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseMove(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseMove event.</summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseDrag(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDrag event.</summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.MouseUp(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseUp event.</summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.ObjectEnter(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle the mouse moving over an object on the canvas.</summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.ObjectLeave(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle the mouse leaving an object on the canvas. </summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.KeyDown(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a keyDown event.
             The key that was pressed is obtained as <code>e.key</code>
            </summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasActions.KeyUp(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Handle a mouseDown event.
            The key that was pressed is obtained as <code>e.key</code>
            </summary>
            <param name="e">The event that occurred.</param>
            <param name="o">The object on which the event occurred.</param>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasArc">
            <summary>
            Summary description for CanvasArc.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.First">
            <summary>Values for the arrowHeads property. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.ArrowHeads">
            <summary>Does the line have arrow heads.  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.ArrowWidth">
            <summary>Width of arrow head. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.ArrowShaftSpace">
            <summary>Arrow Shaft space, used only for Equilibrium and block arrows/// </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.ArrowLength">
            <summary>Length of arrow head.  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.ArrowBevel">
            <summary>Bevel of arrow head (inset of broad part of arrow).  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.FirstArrowHead">
            <summary>The internal polygons that will be used to draw the arrowheads.  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.GenericCanvasLine.DashPattern">
            <summary> Dash pattern for this line.
            The pattern alternates on/off/on/off and is in units
            of object coordinates.  For instance, if
            dashPattern[0] = 3.0
            dashPattern[1] = 1.0
            then the line will be 3 units on 1 unit off.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.BoundingBoxIntersects(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.getOutlineWidth">
            <summary>
            
            </summary>        
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.Transform">
            <summary> Overridden transform method.
            *
            Canvas lines may have arrow heads and these are stored as private
            polygon objects which will need transforming.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.Intersects(System.Double,System.Double)">
            <summary> Does the point intersect this line object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.GetArrowHeads(System.Int32,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary> Set up the arrow heads on this line.
            *
            Have to have a method for this so that we can create the arrowheads
            at this point.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeBlockArrows">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.getBlockHeadPoints(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeEquilibriumArrowHeads">
            <summary>
             Make the arrow heads.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeHalfEquilibriumArrowHeads">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine._initHalfEqLine(MDL.Draw.Utils.Point3d[],MDL.Draw.Utils.Point3d[],System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeEquilibriunLines">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeArrowHeads">
            <summary> Make the arrow heads.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeArrowHead(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            The point of the arrow head is at p2
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeArrowHead(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Boolean)">
            <summary>
            The point of the arrow head is at p2
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.GenericCanvasLine.MakeArrowHead(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary> Make an arrow head.
            *
            The point of the arrow head is at x2,y2.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasArc.MakeOutline">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasArc.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasArc.MakeArrowHeads">
            <summary> Make the arrow heads.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasArc.MakeArrowHead(MDL.Draw.Utils.Point3d,System.Double)">
            <summary>
             Make an arrow head.
            </summary>
            <param name="end"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasBracketRect">
            <summary>
            Summary description for CanvasBracketRect.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.#ctor(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Double,System.Drawing.Color,System.Boolean,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.init_gp">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.getBracket(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.PaintHighlight(System.Drawing.Graphics,System.Drawing.Color)">
            
            
            
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.PaintObject(System.Drawing.Graphics,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="shadowColor"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.Intersects(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasBracketRect.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircle.PaintHighlight(System.Drawing.Graphics,System.Drawing.Color)">
            <summary> Draw the circle highlight as a slightly bigger circle.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasCircularArc">
            <summary>
            Summary description for CanvasCircularArc.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="penwidth"></param>
            <param name="penstyle"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.MakeOutline">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.#ctor(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            
            </summary>
            <param name="p1">box point 1</param>
            <param name="p2">box point 2</param>
            <param name="p3">start point</param>
            <param name="p4">end point</param>
            <param name="p5">mid point</param>
            <param name="c">color</param>
            <param name="penwidth"></param>
            <param name="penstyle"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc._round1(System.Double)">
            <summary>		
            round error may be a reason for sin (or cos) invalid value 		
            </summary>
            <param name="val"> </param>
            <returns> value in [-1,1] </returns>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.GetArcParameters(System.Double,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="r">circle radius</param>
            <param name="dang_calc_start">[out] start angle for arc</param>
            <param name="sweep_angle">[out] arc angle</param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.MakeArrowHeads">
            <summary> Make the arrow heads.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasCircularArc.MakeArrowHead(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
             Make an arrow head.
            </summary>
            <param name="st"></param>
            <param name="mid"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasCircularArc.DrawAsLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasComplexText.#ctor(System.Double,System.Double,System.Double,MDL.Draw.Rendering.Canvas,System.String,System.Int32,System.Drawing.FontFamily,System.Drawing.FontStyle,System.Drawing.Color)">
            <summary> Main constructor for CanvasComplexText objects.
            *
            </summary>
            <param name="x">The x coordinate of the text object.
            </param>
            <param name="y">The y coordinate of the text object.
            </param>
            <param name="h">The height of the text label in points.
            </param>
            <param name="mtc">The Canvas object</param>
            <param name="text">The text string.
            </param>
            <param name="justify">The Justification style for the text object.
            </param>
            <param name="fontFamily">A font family identifier from the FontCache.
            </param>
            <param name="fontStyle">A font style identifier from the FontCache.
            </param>
            <param name="outline">The color of the text object.
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasComplexText.IsChemicalFormula(System.String,MDL.Draw.Chemistry.PTable)">
            <summary> Returns true is text is a string that contains either element symbols
            or integers.
            E.g.:  C5O2H6, 551HeCCS2H450 
            Returns false for:  C+1H2 (because of + symbol) or R2H4 (because of R)
            </summary>
            <author> jbo
            </author>
            <version> 10-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasComplexText.FormatAsChemicalFormula(System.String)">
            <summary> Takes a normal string for a chemical formula and converts it to complex
            string format.
            Example:
            "C6H5O2" --> "C<SUB>6</SUB>H<SUB>5</SUB>O<SUB>2</SUB>"
            </summary>
            <author> jbo
            </author>
            <version> 10-10-00
            
            </version>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasEllipse.PaintHighlight(System.Drawing.Graphics,System.Drawing.Color)">
            <summary>
            draw an ellipse slightly larger.
            </summary>
            <param name="g"></param>
            <param name="highlightColor"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasGraphicsRectangle.PaintHighlight(System.Drawing.Graphics,System.Drawing.Color)">
            <summary>
            draw an rectangle slightly larger.
            </summary>
            <param name="g"></param>
            <param name="highlightColor"></param>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasGraphicsSkText">
            <summary>
            Summary description for CanvasGraphicsSkText.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasGraphicsSkText.#ctor(System.Double,System.Double,System.Double,System.Double)">
            constructor
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasGraphicsSkText.GetGraphicsSkText">
            Get GraphicsSkText data object
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasGraphicsSkText.Intersects(System.Double,System.Double)">
            <summary> Intersection method for an object. 
            Overwritten to test properly the hit with the mouse. Although there are 8 points,
            we really do not have 8-point polygon but something much more simple.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasGraphicsSkText.#cctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasGraphicsSkText.GetTimeSpan">
            Get the time span since creation
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasGroup">
            <summary> Class CanvasGroup
            *
            An object that groups a set of other canvas objects together.
            Basically it has no functionality of its own.  It just passes on
            the various requests to its children objects.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.ICanvasListener">
            <summary> ICanvasListener
            The listener interface for objects that are interested in canvas events.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseDoubleClick(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse key was pressed over the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse key was released over the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseMoved(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse was moved over the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse was dragged over the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseDragEnter(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse was drag entered the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseDragDrop(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse was drag drop on the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.MouseDragOver(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> Mouse was dragged over the canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.KeyPressed(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> A key was pressed over a canvas. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasListener.KeyUp(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.Canvas)">
            <summary> A key was released over a canvas. </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.ICanvasObjectListener">
            <summary> ICanvasObjectListener
            The listener interface for objects that are interested in canvas object events.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseDoubleClick(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary>  </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MousePressed(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse key was pressed over the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseReleased(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse key was released over the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseMoved(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse was moved over the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseDragged(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse was dragged over the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.ObjectEntered(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> The mouse entered a canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.ObjectExited(System.Windows.Forms.MouseEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> The mouse left a canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseDragEnter(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse was drag into the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseDragDrop(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse was drag drop on the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.MouseDragOver(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> Mouse was dragged over the canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.ObjectEntered(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> The mouse entered a canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.ObjectExited(System.Windows.Forms.DragEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> The mouse left a canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.KeyPressed(System.Windows.Forms.KeyPressEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> A key was pressed over a canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.KeyUp(System.Windows.Forms.KeyEventArgs,MDL.Draw.Rendering.CanvasObject)">
            <summary> A key was released over a canvas object. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ICanvasObjectListener.ObjectIsHandled(MDL.Draw.Rendering.CanvasObject)">
            <summary> Should the current object under the mouse be considered by this action handler.
            This gives action handlers considerable flexibility in
            deciding which objects they want to interact with, without
            complicating the canvas implementation too much.
            </summary>
            <param name="canvasObject">The object that is under the mouse. </param>
            <returns>True if the object should be considered, false if not.</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasRoundedRectangle.PaintHighlight(System.Drawing.Graphics,System.Drawing.Color)">
            <summary>
            draw an ellipse slightly larger.
            </summary>
            <param name="g"></param>
            <param name="highlightColor"></param>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.fontFamily">
            Font family shortcut from the FontCache. 
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.fontStyle">
            Font style. 
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.text">
            <summary>The string that this object represents.  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.x">
            <summary>The x coordinate of the string in object coordinates </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.y">
            <summary>The y coordinate of the string in object coordinates </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.font">
            <summary>The font that is used to draw this text object.  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.fontSize">
            <summary>The height of this text item in points. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.Justification">
            <summary>The Justification of this text object.  </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.CanvasText.OpaqueBackground">
            <summary>Does this text object have an opaque background.  </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasText.#ctor">
            <summary> Amount by which a font height is scaled to allow for the
            fact that the font height includes white space above the letters.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasText.#ctor(System.Double,System.Double,System.Single,MDL.Draw.Rendering.Canvas,System.String,System.Int32,System.Drawing.FontFamily,System.Drawing.FontStyle,System.Drawing.Color)">
            <summary> Main constructor for CanvasText objects.
            NOTE:  Even though Canvas is a parameter, this object is NOT
            added to Canvas.
            </summary>
            <param name="x">The x coordinate of the text object. (obj coords)
            </param>
            <param name="y">The y coordinate of the text object. (obj coords)
            </param>
            <param name="fsize">The height of the text label in points.
            </param>
            <param name="s">The text string.
            </param>
            <param name="mtc"> The canvas that this object will draw to.  
            NOTE:  This canvas object is NOT added to mtc as child.
            </param>
            <param name="justify">The Justification style for the text object.
            </param>
            <param name="family">A font family identifier from the FontCache.
            </param>
            <param name="style">A font style identifier from the FontCache.
            </param>
            <param name="outline">The color of the text object.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasText.Translate(System.Double,System.Double)">
            <summary> This overwrites the Translate() method in CanvasObject.
            </summary>
            <author> jbo
            </author>
            <version> 2-27-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Rendering.CanvasText.getTextRegion(System.Double)">
            <summary>
            
            </summary>        
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasText.Metrics">
            <summary>
            
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasText.Height">
            <summary> Returns the height of the text in object coordinates.
            </summary>
            <returns>The height of the text in object coordinates.
            </returns>
        </member>
        <member name="P:MDL.Draw.Rendering.CanvasText.Width">
            <summary> Returns the width of the text in object coordinates.
            </summary>
            <returns>The width of the text in object coordinates.
            </returns>
        </member>
        <member name="F:MDL.Draw.Rendering.ObjectRenderer.renderObjectType">
            <summary>ChemObject type name for that type that this renderer takes  </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ObjectRenderer.SetFillStyle(MDL.Draw.Rendering.CanvasObject,MDL.Draw.ChemGraphicsObject)">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.ObjectRenderer.molRenderer">
            <summary>current MoleculeRenderer use for draw() calls </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ObjectRenderer.PreRenderHook">
            <summary>This hook can be implemented by object specific subclasses to do
            variable initing before rendering.
            NOTE: mol and prefs are GUARANTEED to be valid when this 
            method is called </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ObjectRenderer.ShouldRender(MDL.Draw.Nodes.Node)">
            <summary>
            determine if renderer is able to render the given object. By default, it only checks
            the OTYPE.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.ObjectRenderer.IsFoundationObjectValid(MDL.Draw.Nodes.Node,System.Boolean[])">
            <summary>
            Checks the given foundation object for validity
            (comparing the kept ages with object ages)
            </summary>
            <param name="obj">foundation object to check</param>
            <param name="valid_out"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.ObjectRenderer.MakeFoundationObjectValid(MDL.Draw.Nodes.Node)">
            <summary>
            Makes ages of canvas objects equal to given node's ages. 
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.ObjectRenderer.RemoveCanvasParents(MDL.Draw.Nodes.Node)">
            <summary>
            Remove the canvas objects (made by me) associated with the given node
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:MDL.Draw.Rendering.ObjectRenderer.prefs">
            <summary>current DisplayPreferences for draw() calls  </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.ObjectRenderer.AssociatedUI">
            <summary>flag for if there is an associated UI </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AAMRenderer.DrawAtomNumOrMap(MDL.Draw.Chemistry.Atom,System.Drawing.Color,System.String,System.Double)">
            <summary> Draw a number if atom has an atom-atom mapping value or atom numbers is on. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Chemistry.AtomRenderer.HYDROGEN_AUTO">
            <summary> Hydrogen display positions. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.PreRenderHook">
            <summary>Called after parent ObjectRenderer gets called with valid mol/prefs</summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw an atom.
            
            This the main entry point for drawing all kinds of atoms.
            The method figures out if the atom has an alias, or needs a proper
            label and calls the either drawAtomAlias() or drawAtomLabel().
            *
            If neither of these cases is true then drawSimpleAtom is called
            which just creates an invisible highlight rectangle for the atom.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.getMinMaxPoints(MDL.Draw.Chemistry.Atom)">
            <summary>
            returns Point3d[]{min,max} or null
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.AddDelta(MDL.Draw.Chemistry.Atom,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary>
            creates canvas objects for delta+ delta- representation
            </summary>        
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.getDeltaPos(MDL.Draw.Chemistry.Atom)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.getLonePairsPos(MDL.Draw.Chemistry.Atom)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.AddLonePairs(MDL.Draw.Chemistry.Atom,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary>
            creates canvas objects for lone pairs representation
            </summary>        
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.add_pair(MDL.Draw.Chemistry.Atom,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject},System.Double,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            adds single pair: p - position; dir - vector atom->poition
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.DrawHighlightedSimpleAtom(MDL.Draw.Chemistry.Atom,System.Drawing.Color)">
            <summary> Draw a dot when the simple, bonded carbon is highlighted. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.AtomNeedsLabel(MDL.Draw.Chemistry.Atom,System.Int32)">
            <summary> Does an atom need an explicit label in the drawing.
            The atom needs labelling under the following circumstances.
            This list is not complete.  The method is a placeholder
            for more complex functionality.
            <ol>
            <li> It has a charge.</li>
            <li> It is not the usual isotope.</li>
            <li> It has explicit hydrogens and the renderer is displaying hydrogens.</li>
            <li> It is marked as needing to have a label.</li>
            </ol> </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.NeedsHydrogenLabel(MDL.Draw.Chemistry.Atom)">
            <summary>
            Does this atom need a hydrogen label.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.DrawAtomAlias(MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,System.Drawing.Color,System.Drawing.FontFamily,System.Single)">
            <summary> Draw an atom alias.
            An alias overrides any underlying chemistry of the atom.
            It is a simple markup language that describes superscripts, subscripts,
            hydrogen count, charge and plain text.  Centering can also be
            described.
            \S \S denotes text that is to be superscripted.
            \s \s denotes text that is to be subscripted.
            \n \n means don't superscript this text even if it is a number.
            ^ means center around this point.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.AliasTokenPosition(System.String)">
            <summary> Return whether this token needs to be sub or superscripted or normal. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.PruneToken(System.String)">
            <summary> Remove any markup from an alias token. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.NextAtomAliasToken(System.String,System.Int32)">
            <summary> Get the next token from an atom alias. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.DrawAtomLabel(MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,System.Drawing.Color,System.Drawing.FontFamily,System.Single)">
            <summary> Draw an atom that has a label.
            This is essentially a reimplementation of atomDrawOrMeasure
            from drawlib.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.DrawHydrogenLabelOnRight(MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,MDL.Draw.Rendering.BoundingBox,System.Drawing.Color,System.Drawing.FontStyle,System.Drawing.FontFamily,System.Single,System.Single@,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary> Draw the hydrogen label for this atom. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.DrawHydrogenLabelNotOnRight(MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,MDL.Draw.Rendering.BoundingBox,MDL.Draw.Rendering.BoundingBox,System.Int32,System.Drawing.Color,System.Drawing.FontStyle,System.Drawing.FontFamily,System.Single,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary> Draw the hydrogen label for this atom. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.GenerateAtomBoundingBox(MDL.Draw.Chemistry.Atom,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary> Figure out the size of all the text objects that make up this
            atom, and create one rectangle that encloses them all.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.GetHydrogenPosition(MDL.Draw.Chemistry.Atom)">
            <summary> Return the position that this atoms hydrogen labels want to be.
            This can either be stored as a property, or calculated if not explicitly set.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AtomRenderer.ChargeString(System.Int32)">
            <summary>Build a label that will display the charge 
            if charge is 0  return null
            if charge is -1 return -
            if chage is +1 return +
            if charge in +n with n>1 return n+
            if charge in -n with n>1 return n-
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AttachmentRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw any attachment points that atoms have.
            This probably needs to only be called if we have already noticed that
            the molecule has some attachment points.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.AttachmentRenderer.DrawAttachmentPoint(MDL.Draw.Chemistry.Atom,System.Int32)">
            <summary> Draw a single attachment point. </summary>
            <param name="a">the atom to draw the point to </param>
            <param name="attachmentPoint">1 or 2 to determine which attachment point gets drawn</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.PreRenderHook">
            <summary>
            set up everything that will not change during the rendering of all bonds
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary>
            draw a bond
            </summary>
            <param name="obj">the bond</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.ClipCanvasObjectsToText(System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject},MDL.Draw.Rendering.CanvasText)">
            <summary>
            convert the CanvasObject that represent the bond line if it intersects the text into multiple objects that do not intersect the text.
            </summary>
            <param name="inCanvasObjects"></param>
            <param name="textobj"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.SplitLine(MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d@,MDL.Draw.Utils.Point3d@,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d[])">
            <summary>
            line goes from l1a to l2b. find intersections with textbounds and fill l1b and l2a
            </summary>
            <param name="l1a">first point of line</param>
            <param name="l1b">end point of first subline</param>
            <param name="l2a">start point of second subline</param>
            <param name="l2b">second point of line</param>
            <param name="textbounds"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.HasVisibleNonAAMObjects(System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary>Returns true if the Node passed in is on the Canvas with
            at least 1 Visible object
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.DrawBondRxnCenter(MDL.Draw.Chemistry.Bond,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Int32,System.Drawing.Color)">
            <summary> Add some markup to the bond to display its reaction center status.
            Some of these are done with text, others are displayed with lines or circles.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.BondRenderer.ClipLineToAtomBonds(MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Atom,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary> Clip a line to bonds that are attached to one of the atoms
            that the bonds represents.
            Used to make centered double bonds touch the single bonds
            of the non-terminal atom.
            *
            Return true if the line intersected and false if it didn't.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Chemistry.ChemTextRenderer.labelHeight">
            <summary>pre-calculated label height from current Molecule and MTRendererPrefs 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ChemTextRenderer.PreRenderHook">
            <summary>Called after parent NodeRenderer gets called with valid mol/prefs
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ChemTextRenderer.DrawStereoGroupText(MDL.Draw.Chemistry.ChemText,System.String,System.String,MDL.Draw.Chemistry.StereoGroup)">
            <summary> Draw a stereo Group
            r# for relative stereo group / *# for racemic stereo group
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Chemistry.ConfigLabelRenderer.labelHeight">
            <summary>pre-calculated label height from current Molecule and MTRendererPrefs 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ConfigLabelRenderer.PreRenderHook">
            <summary>Called after parent NodeRenderer gets called with valid mol/prefs
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.features">
            <summary> Short cut to the feature list.
            Initialised by the preRenderHook
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.PreRenderHook">
            <summary>Called after parent NodeRenderer gets called with valid mol/prefs
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.MarkFeaturesAsNotDefined">
            <summary> Mark all features as not having been Defined.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DefineFeatures">
            <summary> Iterate through all of the features until they are all Defined.
            *
            Stop when no more features are Defined on a particular iteration.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawPlanePntLine(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawPntPlaneDistance(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.getLinePointDistance(MDL.Draw.Chemistry.Feature3D)">
            <summary>
            returns (point[0],point[1]) -- distance
            point[1] -- line point
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawPntLineDistance(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawPoint(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawAtoms(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.addAtomText(MDL.Draw.Chemistry.Feature3D,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.getLinePointRequired4OtherFeature(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawNormal(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.FindFeatureCentroid(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Calculate the centroid of the objects in a feature.
            *
            Return the centroid of the feature.
            *
            </summary>
            <param name="features">The list of all the features in the molecule.
            </param>
            <param name="feature">The feature whose centroid we are calculating.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.FindFeatureLine(System.Collections.ArrayList,MDL.Draw.Chemistry.ChemObject,MDL.Draw.Chemistry.ChemObject)">
            <summary> Find if there is a line between points p1 and p2.
            This is principally used to decide whether or not to
            Draw the lines that mark an angle.  We don't want to Draw
            one of the lines if there is a distance that is already
            showing it.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawDihedral(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a feature that represents a dihedral angle.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.AddDihedral(MDL.Draw.Chemistry.Feature3D,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Drawing.Color)">
            <summary> Draw a dihedral object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawTwoPlaneAngle(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a feature that represents the angle between two planes.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.getFragmentParentsOfBasicObject(MDL.Draw.Chemistry.Feature3D,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawBestFitLine(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a feature that represents a best fit line.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.IsDrawFeatureLineRequired(MDL.Draw.Chemistry.ChemObject,MDL.Draw.Chemistry.ChemObject)">
            <summary> Draw features that represent fixed atoms.
            *
            These put an (F) by the atom. It has to allow for the atoms
            label if it has one.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawThreePointAngle(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a feature Defined by three points and a range.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawTwoLineAngle(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw an angle feature described by two lines.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawTwoPointDistance(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a feature Defined in terms of two points and a range.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.ellipseVectors">
            <summary> The vectors that are used for constructing ellipses.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawExclusionSphere(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw an exclusion sphere.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawEllipse(MDL.Draw.Nodes.Node,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Double,System.Drawing.Color)">
            <summary> Draw an ellipse in object space.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawArc(MDL.Draw.Nodes.Node,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Double,System.Drawing.Color,System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject})">
            <summary> Draw an arc between the three specified points.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawCentroid(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a centroid 3d feature.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawPlane(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a plane 3d feature.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.DrawPointNormalDistnace(System.Collections.ArrayList,MDL.Draw.Chemistry.Feature3D)">
            <summary> Draw a feature that represents a point Defined by a point,
            a normal line and a distance.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.AddArrowLine(MDL.Draw.Nodes.Node,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Int32,System.Drawing.Color)">
            <summary> Convenience method for Drawing a line with arrow heads.
            </summary>
            <param name="object_Renamed">The object that will be made a child of the line.
            </param>
            <param name="a">The coordinates of one end of the line.
            </param>
            <param name="b">The coordinates of the other end of the line.
            </param>
            <param name="arrowHeads">Which ends of the line to put arrow heads on.
            </param>
            <param name="color">The color of the line.
            
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.AddPlaneBoundary(MDL.Draw.Chemistry.Feature3D,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Drawing.Color)">
            <summary> Draw a rectangle that just encloses the points in the feature.
            *
            </summary>
            <param name="feature">The feature for which we are Drawing the rectangle.
            </param>
            <param name="center">The center of the plane.
            </param>
            <param name="normal">The plane normal.
            </param>
            <param name="color">The color in which to Draw the rectangle.
            </param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.AddCross(MDL.Draw.Nodes.Node,System.Drawing.Color,MDL.Draw.Utils.Point3d,System.Double)">
            <summary> Add a simple cross to the Drawing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.Feature3DRenderer.GetColor(MDL.Draw.Chemistry.Feature3D)">
            <summary> Return the color of this object on the basis of its colorNum variable.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.FragmentGroupRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary>
            Create the appropriate canvas object (a CanvasPolygon) used for
            selection and manipulation of this object.
            </summary>
            <param name="obj">Object to be represented on the Canvas
            (Should be a FragmentGroup)</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.FragmentGroupRenderer.UpdateBoundingRectangle(MDL.Draw.Chemistry.FragmentGroup,MDL.Draw.Rendering.CanvasPolygon)">
            <summary>
            Iterate through the objects getting the bounding box and incorporating
            them.
            </summary>
            <param name="fg">The FragmentGroup that is being rendered</param>
            <param name="boundingRectangle">The Bounding Rectangle to update</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.NostructRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw the chiral label on the molecule.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.Chemistry.ReactionArrowRenderer">
            <summary> 
            Draw a reaction arrow.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ReactionArrowRenderer.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ReactionArrowRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw the arrow.
            The arrow may be composed of more than one object so we create a
            canvas group object and add the arrows to that.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.Chemistry.ReactionPlusRenderer">
            <summary> 
            *
            Draw a reaction plus.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ReactionPlusRenderer.#ctor">
            <summary>Default constructor. 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.ReactionPlusRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw the plus.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.RgroupLayoutRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Move RGroup core / "Rx=" labels / Rgroup fragments to 
            lay them out properly
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.RgroupNumberRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw the "Rx=" text for each rgroup
            *
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.RingAtomRenderer.GetCenter(System.Collections.ArrayList)">
            <summary> Calculate the coordinate center of the given atoms.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.RLogicInfoRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw RLogic info in MDL mode
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.RLogicRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw RLogic info
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.PreRenderHook">
            <summary>Called after parent NodeRenderer gets called with valid mol/prefs
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.DrawLabels(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Drawing.Color)">
            <summary>
            This properly locates and positions the SRU and config labels.
            
            Removed duplicate code by putting this section in a single method to call from
            two different places.
            </summary>
            <param name="sgroup">The Sgroup we are currently drawing</param>
            <param name="p1">One end of the bracket to draw to the right of</param>
            <param name="p2">The other end of the bracket to draw to the right of</param>
            <param name="drawColor">The Color for the text</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.ReverseUnits(System.String)">
            <summary>
            For simple 'formulae' like COOEt, reverse the units (defined by the presence of an upper case character)
            Do not reverse if any non-alphanumeric characters are present.
            If there is a term in parenthesis, leave them alone behind the unit they were behind before.
            </summary>
            <param name="toReverse"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.TweakIndentation(MDL.Draw.Rendering.CanvasPolygon,System.Int32,System.Int32)">
            <summary>
            Given a canvas polygon that has length characters imaged in it,
            tweak the position over by approximately inent characters. This
            is dependant upon the box having been originally created with
            MoleculeRenderer.LEFT_JUSTIFY_LABEL and is only going to be an
            approximate as it assumes that all of the characters have the
            same width (not exact for proportional fonts or strings with
            subscripts/superscripts). 
            </summary>
            <param name="cp">The CanvasPolygon to act upon</param>
            <param name="length">The length in characters of the imaged text</param>
            <param name="indent">The number of characters to shift the box over</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.LengthWithoutAnnotations(System.String)">
            <summary>
            To be able to approximate the distance that we should slide the
            CanvasPolygon over to match up with the caret position, we need
            to know about how wide in characters the string will be without
            annotations. This relies on including any annotation we want to
            compensate for in one of the annotation patterns as one of the
            SubstituteStrings (not perfect, but much better than hard coding).
            </summary>
            <param name="text">The string to calculate the value for</param>
            <returns>int with the length</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.BondIsHorizontal(MDL.Draw.Chemistry.Bond)">
            <summary>
            This utility routine is used to determine whether a bond is
            nearly horizontal so that we should use the atom at the end
            of the abbreviation for the attachment letter rather than the
            one specified by a caret.
            </summary>
            <param name="b">The Bond to be checked</param>
            <returns>bool, whether it is horizontal to within BOND_HORIZONTAL_TOLERANCE</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.LayoutDataWithSingleChild(MDL.Draw.Chemistry.Sgroup,System.Double,System.Double,System.Collections.ArrayList)">
            <summary> Calculate the automatic Layout position. 
            it makes a small adjustment when there is one atom child or one bond child.
            </summary>
            <author> ymk
            </author>
            <version> 09-12-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.Layout(MDL.Draw.Chemistry.Sgroup,System.Double,System.Double,System.Boolean)">
            <summary> Calculate the automatic Layout position. 
            it makes a big change in layout (i.e. place under a fragment)
            </summary>
            <author> ymk
            </author>
            <version> 09-12-01
            
            </version>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRenderer.AverageBasisAtomPos(MDL.Draw.Chemistry.Sgroup)">
            <summary> Calculate the average coordinate of all basis atoms for an sgroup
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRendererHelper.IncorporateIntoBoundingBox(System.Collections.ArrayList,MDL.Draw.Rendering.BoundingBox)">
            copied from object renderer
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRendererHelper.CalcActualBracketWidthFromCoords(System.Int32,MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d)">
            *----------------------------------------------------------------------*/
            * Returns the actual width, in virtual units, of bracketNo (as opposed to
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRendererHelper.UpdateBracketsPosition(MDL.Draw.Chemistry.Sgroup,System.Collections.ArrayList[],System.Boolean)">
            <summary>
            creates the bracket. code copied from sgrouprenderer.
            </summary>
            <param name="sgroup"></param>
            <param name="CrossingBonds">array of two arraylist with crossing bonds on left and right brackets</param>
            <param name="drawnoncrossingbondbracket">if true will try to draw missing bracket on side that does not cross any bond.</param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.SgroupRendererHelper.CreateOrUpdateCrossingBondBracket(MDL.Draw.Chemistry.Sgroup,MDL.Draw.Renderer.Preferences.DisplayPreferences,MDL.Draw.Chemistry.Bond,MDL.Draw.Chemistry.Atom,MDL.Draw.Chemistry.Atom,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sgroup"></param>
            <param name="prefs"></param>
            <param name="bond"></param>
            <param name="insideAtom"></param>
            <param name="outsideAtom"></param>
            <param name="create"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.Chemistry.STextRenderer.GetCanvasObjects(MDL.Draw.Nodes.Node)">
            <summary> Draw the chiral label on the molecule.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.Chemistry.TagDataRenderer">
            <summary>
            Summary description for TagDataRenderer.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.FontCache.GetFont(System.String,System.Drawing.FontStyle,System.Int32)">
            <summary> Get a font from the font cache.
            A key is built from the specified font attributes.
            If an entry of this name exists in the font Hashtable
            then that entry is returned as the font.
            If no entry exists, then the font is created, stored
            in the Hashtable, and then returned.
            </summary>
            <param name="name"> The name of the font</param>
            <param name="style"> The style of the font</param>
            <param name="size"> The size in pixels (screen coordinates) </param>
        </member>
        <member name="M:MDL.Draw.Rendering.FontCache.GetFontNameCode(System.String)">
            <summary>   Translates the passed in font face name into (faster) cache
            code for that name </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsOleObjRenderer">
            <summary>
            Summary description for GraphicsArcRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsObjectRenderer">
            <summary>
            Summary description for DisplayObjectRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsMetafileRenderer">
            <summary>
            Summary description for GraphicsArcRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsArcRenderer">
            <summary>
            Summary description for GraphicsArcRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsCircularArcRenderer">
            <summary>
            Summary description for GraphicsCircularArcRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsLineRenderer">
            <summary>
            Summary description for GraphicsLineRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsSplineRenderer">
            <summary>
            Summary description for GraphicsEllipseRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsBracketRectRenderer">
            <summary>
            Summary description for GraphicsBracketRectRenderer
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsRectangleRenderer">
            <summary>
            Summary description for GraphicsRectangleRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsEllipseRenderer">
            <summary>
            Summary description for GraphicsEllipseRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsRoundedRectangleRenderer">
            <summary>
            Summary description for GraphicsRectangleRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsPolygonRenderer">
            <summary>
            Summary description for GraphicsRectangleRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.GraphicsRendering.GraphicsSkTextRenderer">
            <summary>
            Summary description for DisplayRectangleRenderer.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasGridBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasSquareGrid">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.CanvasHexGrid">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.IInstallListener">
            <summary> This interface can be defined by objects that wish to
            be notified that an action handler has been installed
            or uninstalled on a canvas object.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.IInstallListener.CanvasListenerInstalled(MDL.Draw.Rendering.ICanvasListener)">
            <summary> Method that is called when a MTCanvasListener is installed.</summary>
        </member>
        <member name="M:MDL.Draw.Rendering.IInstallListener.CanvasObjectListenerInstalled(MDL.Draw.Rendering.ICanvasObjectListener)">
            <summary> Method that is called when a MTCanvasObjectListener is installed.</summary>
        </member>
        <member name="M:MDL.Draw.Rendering.IInstallListener.CanvasListenerUninstalled(MDL.Draw.Rendering.ICanvasListener)">
            <summary> Method that is called when a MTCanvasListener is uninstalled. </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.IInstallListener.CanvasObjectListenerUninstalled(MDL.Draw.Rendering.ICanvasObjectListener)">
            <summary> Method that is called when a MTCanvasObjectListener is uninstalled. </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.FRAGMENT_GROUP_LAYER">
            <summary> Definitions of the layers that graphical objects will inhabit.
            Higher values are picked last and so appear to be above other
            objects.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.addVersionInfoToDrawing">
            <summary>true if renderer will add version info text to each drawing 
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.LEFT_JUSTIFY_LABEL">
            <summary> Justification styles for labels.
            These are negative so they can be distinguished from CanvasObject
            Justification styles.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.LeftBottom">
            <summary> Convenience names for common Justification styles.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer._prefs">
            <summary> Parameters for the features of the overall drawing.
            Units are in fractions of a typical bond length.
            This is because some programs (cactvs for example) use
            arbitrary values for the atomic coordinates (presumably
            they are pixel coordinates from the drawing widget).
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.mol">
            <summary>current Molecule use for creating canvas </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.bShouldSetFocusToNextCreatedRichEdit">
            <summary>flag indicating that next created Richtext control should get the focus </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.renderers">
            <summary>Faster array of NodeRenderers which MIRRORS the renderers
            created by createRenderersArrayFromVector()
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.ValidateFoundationObject(MDL.Draw.Nodes.Node)">
            <summary>
            Make the canvas objects valid with respect to the given node.
            This may cause re-creation of the canvas objects.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.layoutBasisObjTypes">
            
            <summary>contains all of the object types that we will get from the
            fragment info object to incorporate into the bounding box/
            translated during layout operations.  There is a property
            for each of these object types on a fragmentInfo object, 
            with values of a System.Collections.ArrayList containing all objects of the 
            specified type associated with that fragment.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetFoundationObjectAssociatedData(MDL.Draw.Nodes.Node)">
            <summary>
            Retrieve arbitrary data associated with the rendered object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.ValidateAllObjects">
            <summary>
            validate all stored foundation objects
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.ValidateAllObjectsUnderMouse(System.Windows.Forms.MouseEventArgs)">
            <summary>
            validate all stored foundation objects
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.UpdateContents">
            <summary> Overridden updateContents to allow us to update the molecule
            independent of drawing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.PutChildrenOnCanvas(MDL.Draw.Nodes.Node)">
            <summary>
            Put on canvas all node's children that are not already there.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.RemoveDeadObjects">
            <summary>
            Remove canvas object whose children are not in molecule.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.ScalingEnabled">
            <summary>
            if false, calling ScaleMolecule will not do anything.
            You may want to set ScalingEnabled to false before setting the Molecule in the renderer
            and true after because you know that it would try yo scale the molecule inside and you want to 
            call ScaleMolecule explicitely after doing other things that affect the molecule.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.ScaleMolecule">
            <summary> Scale the molecule according to the current scaling model.
            The choices are Scale to fit the box or Scale to a standard
            bond length.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.ScaleToStandardBondLength(System.Boolean)">
            <summary> Make the bonds in the molecule have a specified length.
            *
            This is by default 1.0 cm, but can be changed by
            setting StandardBondLength to an appropriate value.
            *
            If MTRenderPrefs.scalingMode = SCALE_TO_STD_BOND then
            if the molecule is too big to fit in the window then
            the suggested automatic Scale value is used.  This will
            make the molecule just fit the window.
            --jbo
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetStyledLine(MDL.Draw.Nodes.Node,MDL.Draw.Rendering.ObjectRenderer,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary> Convenience method for adding a line to the drawing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetLineObject(MDL.Draw.Nodes.Node,System.Drawing.Color)">
            <summary> Add a line object to the canvas and return it.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.ClipLineToCanvasText(System.Collections.Generic.List{MDL.Draw.Rendering.CanvasObject},MDL.Draw.Utils.Point3d,MDL.Draw.Utils.Point3d,System.Double)">
            <summary> If pa is within the bounding box of the CanvasText
            object t, figure out the intersection point of the line
            pa-pb and set pa's coordinates to that value.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetCenteredText(MDL.Draw.Nodes.Node,MDL.Draw.Rendering.ObjectRenderer,System.Double,System.Double,System.Single,System.String,System.Drawing.Color)">
            <summary> Convenience method for adding centered text to the drawing.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.CalcStructureCanvasBoundingBox(MDL.Draw.Chemistry.Molecule)">
            <summary>
            find all chemgraphicsobject children of the structure and incorporate their canvasobject 
            to a bounding box.
            </summary>
            <param name="mol"></param>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetStructureBoundingBox">
            <summary>
            returns the bounding box for all the canvas objects.
            This can be used to figure out the size of the image to save the structure.
            Note that it's in object space, so one needs to use screendistance(returnvalue.Width)
            and screendistance(returnvalue.Height) to figure out the size of the image.
            </summary>
            <returns>a bounding box or null if no canvas object</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.AdjustCanvasTranslationAndScale">
            <summary>
            This is very similar to Scale Molecule, but th
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetStructureBoundingBoxWithoutRendering(MDL.Draw.Chemistry.Molecule)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.AdjustCanvasTranslationAndScale(MDL.Draw.Rendering.BoundingBox)">
            <summary>
            This is very similar to ScaleMolecule, but since it takes the Bounding box it
            does not require repested calculation of the bounding box (and in theory, you could
            manipulate the bounding box to get display where you want it
            </summary>
            <param name="bbox">The bounding box to use for scaling</param>
            <returns>true if it could scale, false otherwise</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.CalcFragmentVisualCenter(MDL.Draw.Chemistry.Fragment)">
            <summary>This calculates a fragment's "visual center"
            Atom's which are within ring systems are weighted 3 TIMES more
            important than chain atoms.  This seems to me to be more what 
            we humans do when placing reaction components in a line
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetAtomCoordinateCenter(MDL.Draw.Chemistry.ChemObject)">
            <summary> Calculate the coordinate center of the atoms that are in the
            passed object.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.MoleculeRenderer.RescaleOnResize">
            <summary>
            defaults to true.
            Set RescaleOnResize to false to temporary disable the rescaling when the molecule renderer is being resized.
            e.g. during modification of the toolbars that force a change of size of the rendering area.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.Resize(System.Int32,System.Int32)">
            <summary> Overloaded resize method that will let us enforce the
            scaling model that the renderer is using.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.dosToUnix(System.String)">
            <summary> convert 0x0D0x0A to 0x0A end of lines (\r\n -> \n
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetAtomScreenCoordinate(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an atom.
            Atom index is one-based [1;AtomCount]
            </summary>
            <param name="index">index of atom to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetBondScreenCoordinate(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an bond.
            Per QA specs, this is the mid-popint of a bond ie middle of two end atoms.
            bond index is one-based [1;BondCount]
            </summary>
            <param name="index">index of bond to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetSgroupScreenCoordinate(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an sgroup.
            index is one-based [1;n]
            </summary>
            <param name="index">index of sgroup to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetRgroupScreenCoordinateByIndex(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an rgroup.
            index is one-based [1;n]
            </summary>
            <param name="index">index of rgroup to get the coordinates from</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetRgroupScreenCoordinateByNumber(System.Int32)">
            <summary>
            For QA use.
            return the screen coordinates of an rgroup from its number.
            </summary>
            <param name="number">rgroup number</param>
            <returns>a point or empty if index invalid</returns>
        </member>
        <member name="M:MDL.Draw.Rendering.MoleculeRenderer.GetCanvasGraphicsSkTextOf(MDL.Draw.Chemistry.GraphicsSkText)">
            Get CanvasGraphicsSkText of given GraphicsSkText
        </member>
        <member name="P:MDL.Draw.Rendering.MoleculeRenderer.DocumentHeight">
            <summary>
            document height in inches
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.MoleculeRenderer.UpdateContentsEnabled">
            <summary>
            deprecated field. provided for compatibility.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.MoleculeRenderer.AtomCount">
            <summary>
            For QA use.
            return the number of atoms currently renderer
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.MoleculeRenderer.BondCount">
            <summary>
            For QA use.
            return the number of bonds currently renderer
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.MoleculeRenderer.SgroupCount">
            <summary>
            For QA use.
            return the number of sgroups currently renderer
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.SelectedObjectsHash.Dispose">
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
        </member>
        <member name="M:MDL.Draw.Rendering.SelectedObjectsHash.Dispose(System.Boolean)">
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.HitType">
            <summary>
            IMyRichEditCtrl is the interface used to access/ change the properties or behaviour
            of one instance of Window-less richText object.
            The object implementing this interface is CTxtWinHost.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.ITextEditControl">
            <summary>
            The interface ITextEditControl is the internal interface,
            implemented by CTxtWinHost and used ( called ) from the factory CHostInstaller.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.SelectionChangedHandler">
            <summary>
            SelectionChangedHandler is the handler used for event SelectionChange;
            this event is raised when the selection in current editing object changes.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.ScrollNotifyHandler">
            <summary>
            ScrollNotifyHandler is the handler used for event ScrollNotify;
            raised when the contents in the current editing object scrolls.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.ResizeRequestHandler">
            <summary>
            ResizeRequestHandler is the handler used as a wrapper for
            win32 notification EN_REQUESTRESIZE. The event will be raised 
            when the control created with mask ENM_REQUESTRESIZE wants to resize.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.ActiveHostChangeHandler">
            <summary>
            ActiveHostChangeHandler is the handler used for event ActiveHostChangeNotify;
            This event is raised when there is a chmage of what host ( editing object ) 
            is active ( currently on top of stack in Z-order ).
            That host may have the focus, or may not. 
            The argument migh be also a null pointer ( if there is no longer any active host ).
            
            The argument userDefinedArg i a usr-defined value ( used only in case 
            when the new object is being created).
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.SetFocusHandler">
            <summary>
            SetFocusHandler is the handler used for SetFocusEvent.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.KillFocusHandler">
            <summary>
            KillFocusHandler is the handler used for KillFocusEvent.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.MouseDownEventHandler">
            <summary>
            MouseDownEventHandler is the handler used for MouseDownEvent
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.HotKeyHandler">
            <summary>
            HotKeyHandler is the handler used for the event HotKeyEvent,
            raised when the key pressed by the user in editing mode is matching
            the previously registered hotkey. 
            The information about the hotkey is provided by the CHotKeyInfo argument.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.SysCmdPreProcessHandler">
            <summary>
            SysCmdPreProcessHandler is the handler used for the event SysCmdPreProcessEvent,
            raised when ( before ) the message Win32.WM_SYSCOMMAND is processed 
            by the CHostInstaller factory.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.SysCmdPostProcessHandler">
            <summary>
            SysCmdPostProcessHandler is the handler used for the event SysCmdPostProcessEvent,
            raised when ( after ) the message Win32.WM_SYSCOMMAND is processed 
            by the CHostInstaller factory.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.CFlags">
            <summary>
            The class CFlags is an 'small' auxiliary class, used for internal implementation 
            of the 'big' class CTxtWinHost.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.CHotKeyInfo">
            <summary>
            The class CHotKeyInfo is an 'small' auxiliary class, used to maintain the information
            about the specific hotkey, that has been registered by CHostInstaller.RegisterHotkey
            ( the class CHostInstaller maintains the internal list of those objects ).
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost">
            <summary>
            CTxtWinHost is the object keeping all the data of single Window-less 
            RichText object. It implements interfaces IDisposable, IMyRichEditCtrl, IMDLTextHost
            You will not create the CTxtWinHost directly; but you have to use 
            the class CHostInstaller, who works as a 'factory' for CTxtWinHost objects.
            ( The method CHostInstaller.CreateTextControl will create CTxtWinHost for you... )
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.disposed">
            Track whether Dispose has been called.
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.Dispose">
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.Dispose(System.Boolean)">
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.MDL#Draw#TextServicesWrapper#IMDLTextHost#TxInvalidateRect(MDL.Draw.TextServicesWrapper.RECT_GC,System.Boolean)">
            <summary>
            CTxtWinHost is the object keeping all the data of single Window-less 
            RichText object. It implements interfaces IDisposable, IMyRichEditCtrl, IMDLTextHost
            You will not create the CTxtWinHost directly; but you have to use 
            the class CHostInstaller, who works as a 'factory' for CTxtWinHost objects.
            ( The method CHostInstaller.CreateTextControl will create CTxtWinHost for you... )
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.MDL#Draw#TextServicesWrapper#IMDLTextHost#TxScrollWindowEx(System.Int32,System.Int32,MDL.Draw.TextServicesWrapper.RECT_GC,MDL.Draw.TextServicesWrapper.RECT_GC,System.IntPtr,MDL.Draw.TextServicesWrapper.RECT_GC,System.UInt32)">
            <summary>
            CTxtWinHost is the object keeping all the data of single Window-less 
            RichText object. It implements interfaces IDisposable, IMyRichEditCtrl, IMDLTextHost
            You will not create the CTxtWinHost directly; but you have to use 
            the class CHostInstaller, who works as a 'factory' for CTxtWinHost objects.
            ( The method CHostInstaller.CreateTextControl will create CTxtWinHost for you... )
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.MDL#Draw#TextServicesWrapper#IMDLTextHost#OnTxCharFormatChange(MDL.Draw.TextServicesWrapper.CHARFORMATW_GC)">
            <summary>
            CTxtWinHost is the object keeping all the data of single Window-less 
            RichText object. It implements interfaces IDisposable, IMyRichEditCtrl, IMDLTextHost
            You will not create the CTxtWinHost directly; but you have to use 
            the class CHostInstaller, who works as a 'factory' for CTxtWinHost objects.
            ( The method CHostInstaller.CreateTextControl will create CTxtWinHost for you... )
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost.MDL#Draw#TextServicesWrapper#IMDLTextHost#OnTxParaFormatChange(MDL.Draw.TextServicesWrapper.PARAFORMAT_GC)">
            <summary>
            CTxtWinHost is the object keeping all the data of single Window-less 
            RichText object. It implements interfaces IDisposable, IMyRichEditCtrl, IMDLTextHost
            You will not create the CTxtWinHost directly; but you have to use 
            the class CHostInstaller, who works as a 'factory' for CTxtWinHost objects.
            ( The method CHostInstaller.CreateTextControl will create CTxtWinHost for you... )
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller">
            <summary>
            The class CHostInstaller works as a 'factory' for CTxtWinHost objects,
            and is responsible to manage all the existing instances.
            The method CHostInstaller.CreateTextControl will create CTxtWinHost for you,
            you can call DeleteTextControl(CTxtWinHost pHost) to destroy particular control,
            or to call DeleteAll() to get rid of all of them.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_pArrayControlInfo">
            <summary>
            The array of all created CTxtWinHost controls so far. 
            Used to maintain the Z-order; the control at the end of the array 
            ( the last one ) is the top-one in Z-order.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_pLastActiveHst">
            <summary>
            The last active host ( when the Win32.WM_ACTIVATE with WA_INACTIVE was received ).
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_pArrayHotkeyInfo">
            <summary>
             The array of all registered hotkeys ( represented by CHotKeyInfo info ).
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_bFlagProcessWM_Paint">
            <summary>
             Flag saying whether WM_PAINT should be processed or not.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_bAllowEditFlag">
            <summary>
            Flag saying whether edit mode is allowed.
            </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_inTxtBxCursor">
            <summary> See CursorForTextBox </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_outTxtBxCursor">
            <summary> See CursorOutOfTextBox </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_bInsideSetCursorFor">
            <summary> for preventing reentran calls of SetCursorFor /// </summary>
        </member>
        <member name="F:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.m_nLockFoc">
            <summary>
            Variable used for LockFocusOnDelete()/ UnlockFocusOnDelete()
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.#ctor">
            <summary>
            The class constructor
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.CreateHost(System.IntPtr,System.Windows.Forms.CreateParams,System.Boolean,System.Boolean,System.Object,MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost@)">
            <summary>
            Create window-less text control for given input arguments.
            You can call this method directly, but usually you will call
            the method CreateTextControl, who will delegate the call here.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.CreateTextControl(System.IntPtr,System.IntPtr,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Create window-less text control for given input arguments.
            You can call this method directly, but usually you will call
            the overloaded version ( below, with input argument IWin32Window ctrl ),
            who will delegate the call here.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.CreateTextControl(System.Windows.Forms.IWin32Window,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Create window-less text control in a given Control client area.
            The control may be System.Windows.Forms.Control, or anything derived;
            but basically just IWin32Window is required.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DeleteTextControl(MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost,System.Boolean)">
            <summary>
            Delete the previously created text control.
            When bMoveFocus is false, no other control will receive focus 
            or will be activated.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DeleteTextControl(MDL.Draw.Rendering.WindowLessRichEdit.CTxtWinHost)">
            <summary>
            Delete the previously created text control.
            See also CreateTextControl; DeleteAll();
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.GetHookedControl">
            <summary>
            Get the control, who is currently hooked by this CHostInstaller object instance.
            See more the description of CHwndMessageHook class to find out what 
            hooking-up of the control means...
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.GetActiveHst">
            <summary>
            Get the current active text control.
            ( Active control is the control who is on top in the z-order. 
              It may or may not have the focus. ). See also SetActiveControl.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.GetHstAtItem(System.Int32)">
            <summary>
            Get the text control form the array of text controls created so far.
            The index is zero-based.
            See also the property Count.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.RegisterHotkey(MDL.Draw.Rendering.WindowLessRichEdit.CHotKeyInfo)">
            <summary>
            Register the hotkey for a given CHotKeyInfo input argument.
            See also UnregisterHotkey, IsHotkeyRegistered
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.UnregisterHotkey(MDL.Draw.Rendering.WindowLessRichEdit.CHotKeyInfo)">
            <summary>
            Unregister the hotkey for a given CHotKeyInfo input argument.
            See also RegisterHotkey, IsHotkeyRegistered
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.IsHotkeyRegistered(MDL.Draw.Rendering.WindowLessRichEdit.CHotKeyInfo)">
            <summary>
            Return true if the hotkey with the given characteristic ( CHotKeyInfo information )
            is already registered; false otherwise. See also FindHotkeyRegistered.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.FindHotkeyRegistered(MDL.Draw.Rendering.WindowLessRichEdit.CHotKeyInfo)">
            <summary>
            Return the CHotKeyInfo information if the hotkey with the given 
            characteristic ( CHotKeyInfo information ) is already registered; 
            null otherwise. See also IsHotkeyRegistered.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.FindHotkeyRegistered(System.Windows.Forms.Keys,System.Boolean,System.Boolean)">
            <summary>
            Return the CHotKeyInfo information if the hotkey characterized by the given 
            input arguments is already registered; 
            or return null otherwise. See also IsHotkeyRegistered.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.RegisterHotkey(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.String)">
            <summary>
            Register the hotkey characterized by the given input arguments. 
            or return null otherwise. See also UnregisterHotkey.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.RegisterHotkey(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Register the hotkey characterized by the given input arguments. 
            or return null otherwise. See also UnregisterHotkey.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.UnregisterHotkey(System.Windows.Forms.Keys,System.Boolean,System.Boolean)">
            <summary>
            Unregister the hotkey characterized by the given input arguments. 
            or return null otherwise. See also RegisterHotkey.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.FindZoomApprox(System.Double,System.UInt32@,System.UInt32@)">
            <summary>
            Use this method to find the best approximation for a given ( double) zoom value.
            To chnage the zoom for a given double value, it is necessary to involve this method,
            since the RichText control supports zoom factor only in form numerator/numerator,
            where numerator and denominator are integer values;
            (1 is less or equal numerator) and (numerator is less or equal 64)
            (1 is less or equal denominator) and (denominator is less or equal 64) 
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.GetCount">
            <summary>
            Return the count ( amount ) of text controls created so far.
            See also GetHstAtItem.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DeleteAll">
            <summary>
            Delete all previously created text controls.
            See also CreateTextControl; DeleteTextControl();
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.SetFocus">
            <summary>
            This method sets the focus to the 'active' host.
            The 'outside' classes should call ONLY this method; not CTxtWinHost.DoSetFocus;
            That way iw will be sure that it is always the active host ( on top of stack ),
            who is called.
            See also HasFocus().
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.HasFocus">
            <summary>
            Returns true if the currently hooked control has the (keyboard) input focus; 
            false otherwise.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.StopEditingMode">
            <summary>
            This method stops editing mode for 'active' host.
            The 'outside' classes should call ONLY this method; not CTxtWinHost.DoSetFocus;
            That way it will be sure that it is always the active host ( on top of stack ),
            who is called.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.IsEditingMode">
            <summary>
            Is there an editing mode or not ?
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.SuspendEditingMode">
            <summary>
            Suspend the editing mode, should be called from handler of main window deactivation
            ( or handler to message WM_ACTIVATE with WA_INACTIVE flag )
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.IsEditingModeSuspended">
            <summary>
            Has been editing mode suspended ?
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.RestoreEditingMode">
            <summary>
            Restore previously suspended editing mode, should be called from handler of main window deactivation
            ( or handler to message WM_ACTIVATE with WA_ACTIVE or WA_CLICKACTIVE flag )
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.SetActiveControl(MDL.Draw.Rendering.WindowLessRichEdit.IMyRichEditCtrl,System.Boolean)">
            <summary>
            Set the current active text control.
            ( Active control is the control who is on top in the z-order. 
              It may or may not have the focus. ). See also GetActiveHst.
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.GenerateNewHost(System.Int32)">
            <summary>
            This method creates new object CTxtWinHost 
            ( used in public method public bool CreateHost ).
            It is virtual method, so some other factory, derived from this class,
            could overwrite it and create different object ( derived from CTxtWinHost ).
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.Item(System.Int32)">
            <summary>
            indexer
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.FlagProcessWM_Paint">
            <summary>
             Get/Set flag saying whether WM_PAINT should eb processed or not.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultTextFont">
            <summary>
            Default used font for document type text. See more protected bool IsTextType()
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFont">
            <summary>
            Default used font for non-text doc. See more protected bool IsTextType()
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontSizeTwips">
            <summary>
            Default font size in points
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontSizePoints">
            <summary>
            Default font size in points
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontMakeBold">
            <summary>
            Make the default font bold
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontMakeItalic">
            <summary>
            Make the default font italic
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontMakeUnderline">
            <summary>
            Make the default font underline
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontMakeStrikeout">
            <summary>
            Make the default font strikeout
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontColorPick">
            <summary>
            Get/set the default font color. Value Color.Empty means 'Automatic' color.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.DefaultFontBackColorPick">
            <summary>
            Get/set the default font color. Value Color.Empty means 'Automatic' color.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.AllowEditFlag">
            <summary>
            Property 'allowing' the edit mode. Default value is true.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.CursorForTextBox">
            <summary> Get/set the mouse cursor that will be used for internal area 
            of the active text control. 
            If none is specified, the default one ( appears as an I-beam ) will be used.
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.CursorOutOfTextBox">
            <summary> Get/set the mouse cursor that will be used for the area 
            outside of active text control. 
            If none is specified, the default one will be used 
            ( specified as Control.Cursor property for the hooked control or form ).
            </summary>
        </member>
        <member name="P:MDL.Draw.Rendering.WindowLessRichEdit.CHostInstaller.NewHostBorder">
            <summary> Border that will be used for new created text controls.
            Does NOT affect already created controls.
            </summary>
        </member>
        <member name="T:MDL.Draw.Rendering.WindowLessRichEdit.IMyRichEditFactoryF">
            <summary>
            IMyRichEditFactoryF is the interface extending IMyRichEditFactory.
            It will create controls that have the type IMyRichEditCtrlF 
            ( supporting formula mode ).
            </summary>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CInstallerWithFormula.GenerateNewHost(System.Int32)">
            <summary>
            Overwrite the method of the base class, 
            to generate CTxtWinHostF insatead of just CTxtWinHost.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.CInstallerWithFormula.HookWindowProc(System.Windows.Forms.Message@)">
            overwritten window proc of CHostInstaller 
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.RichClipboardData.Dispose">
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
        </member>
        <member name="M:MDL.Draw.Rendering.WindowLessRichEdit.RichClipboardData.Dispose(System.Boolean)">
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
        </member>
    </members>
</doc>
